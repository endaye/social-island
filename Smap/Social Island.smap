{"sandbox_archive_version":61,"resources":[{"default":[{"guid":[953679908,159793237,2165885860,1104393525],"revisions":[{"type":"kTexture","name":"Dot","revision":-1,"autoGenerated":false,"rawdata":"0WSam051Rl009610096102BZK0Dc7k0EtjeM-2)Z3IG5A4M|8uQUCw|F8}}lF9-$z0046*ldJ#$010qNS#tmY4#WTe4#WYKD-Ig~00MDIL_t(&fz_J5ZWBQiMvupW1}PN$iy%am6d*;Ao;dG7LK>igm!N|lWOx8lVG@)AQadivfeA<;k(Pi2L?Ag94aj^Hvy0bDEIhOJj`v8TwMM(XN8_KFxpPaB$cO=EfVt>81xx~mfWtrw_yK$bwt+Xm2JjmAoh5K7gZxF{2CxVm_jvv*@C0}Syz(-T<k~8d>KZQf=zX1BTy8!q>DiE_(>#yj3|0P$q}GVVV_K3Hh9O^;RLw~`O*M+|C4W%TYW~hWtVSMA@?}Z25VrfUqCTHMKlxB!m3~w;p!`B8!~d|TlxupDngref6JC?XXxRhK13PhtN!@Ut@e~K^buZbG9Qirynq%Cl01fCJ`P)HM-1+MnkNhm~BAAXlvp_Q*`D-CfJh%>a<PGo{I2P8&iCy4iypbr9I9T5qgZ=duk&40Yh>FOp0j5J+crs;x)1fUqIZ=}I6F3ms#DjK8sg+rgFu<?S5}vdT@IADJCv5|K3T@%Z7lTc~6_ITNY=yS)WXk}Xp)EYwEJ-S3SCvOY+c>ZboH9TMs0EgBr3Q53&B$^{6AzZ5yN7)V)Wf+rQ3smPy8*uw#>JVt@r$H<16a#l#f>!*>6vuK><sXh@k~7J0T+M|aYs61wgcSE)5w8aB*fugd9a6E4|35NoQLf9cb?9?s+*r*$u|kym#1>f&lmb+r0{1_$#zxwo(3)r;x(u|lFmt5AF=p)6lWkO7x}o&Ycwa|^R6ygY7Z`9YY&!yBOcFx10G{*51Kv#S>$8N*ktYH=sHce>SF>sGsaaP@3B=M4Q$m%CrjWze+IZe`C-a-.NkvXXu0mjfiBL{Q4GJ0x0000DNk~Le0000l0000l2nGNE0COjktN;K232;bRa{vGi!~g&e!~vBn4jTXf0&z)1K~!jg)tbF-6G0S4kH>-rDHQyRAVifEAVrX#IPXA08lZxgpo1P{cmPsi5|jc`J1)|J2}mH3mVg9AAUPHd$b1yDi`PpmJhS$W_ei6)M!UX8<DZ$ib4!xQhyiARx#&6tOah01!$1r80el3ufj7Vg@EZ7?C2%Q&{6*jfum~LYc>XK!1b76z@-mR*+A5Oj8ZPzdeVtrfZaypN*^s5vJdffGRsM>k)`-PpT9OuqAzzkM%}F{<HHz;ge^AnD{?0wDMjlS`Wl6OVw)?Q6KA%88`A}b#epEG}{6Z+h|FEc(YkHEJ1l|D?UX#XX*#pi4J8_3e-Eg1r6bI{dFWHeC`8n*GW8A3#4d@;D+d)*^`Rf^v{4DSyn2tNMKr<fsYavZMxDIyY4e%K_7S_j!UEpNAktmWlSl=0g{q+`+iox!PipZ=1rbAnJGG&0%p)EW)QIhl%I1t*zgLX-&m06K6z^~8}p0o|{J+y@<Z3BD?ZQ;omgH6E|k!=HPg|_fy%K)39Ej-yQNh)Jkl}AI{IIs(xGC&8Y1(tE826W=h$Z|*%50;_3hkXgu!?`$72b$2k0lyQ*#hJVDi==!5Sj%0-jWrVKnRLeN4DgomOg!xY7l03OM>=D+1KiBh$bnlV#Nl6gu!md^a?u%_hwS%vp3c0go1b6FHwoOAr*h2C7y4wR@MluVc2)VF1}+WaHK;t2&PiGyvG{rvXCNmR`MAw%G$-Kmt}a<>4=!PA50-!<9?yRR9%E|{nmz(q<YUU%WbNhXI!(9gV*)!f##JBhu~i=pY}H36OW;3$2Dm@@Vaj#@0000<MNUMnLSTX"}]},{"guid":[1260272136,125914301,2612360310,1584440831],"revisions":[{"type":"kTexture","name":"Hand","revision":-1,"autoGenerated":false,"rawdata":"0ha&(0KfnM009610096102BZK03IIz0EtjeM-2)Z3IG5A4M|8uQUCw|mjD0&zz7Ba000RT@iqVe010qNS#tmY3ljhU3ljkVnw%H_00Mn!R9JLaO-wptZ*4ANWN%_+E_iKl00971R7Nd009Z{-I%98bE@5PEVr4FPZEyfMjh&R;ZksR^fM3OOZ#HdUObRJhS=Etl%>`T4M(S=I+exefX0}sEUu_qAq`krn4Xo|7Rx1+7KK{-hKIa^tv^8Zn!h)q(%PNJxe*A<$@)TZ2d63tc*vRucEw1jqEZE%*OE^6F0FGPImUSsC1#MYWhO{Z9TrCB0>rRXy=n;F9!qe^me9JFDrnCT&AA1ZRhG3fbI1ZBV@I43vJVn72;fWVu62xSZfc*oVH_cb%a`tKO%k5IQv9=}%HBI9;6JO~y!by^#AVgv4Il?o$%F@=W%)ww`CJfWEwo+A~+ta1m+7!Yeg|Z&aR>tqs@tG=7OKXJv01Y5#BUf*A(L3i1i9(d3vc|D^Wb2Kx%52m>OpnKp9JomG{P|eQa-@wtyS2~LX0fXUx)erjH4|sIF3f{Yy(XC!)GEDDsu(WnVu%T38F+IoE3O*z_5m(t?oDABgn<`CUKlNKL~uedeis~(Ah<_!#pP=EH##L@M54(f)D;Y;mc9scMpjCf)TJv+x)!Le))0(8kz}e++BtSsCJ*KFEW6NZB@1_8E<b++^Rq0*NgR8jkNX(%oXjg@X~o2RmO>}-rQ{^U(a|(wu_y2$?LOFZRkrk&G^Cg><0+$)L4T&$wkv=^pZ}-+S1nxw(&E*2y0+{solE2Hbhj`2EAf55DkSKOg;3TtK?+%aogD7P^3{LfUccFh>e;%u$BbIphH7!Tc3Hkqb;yN|{$zokCWxLi_8@Z8qQ{3Z<u>D>6P258+KsW_EL@R73xY@9000cQNkl<Zc%1E>FPN3Z7so%lkC(6p3=lB<3=lA2fFNNB8YEzVpg{rz3=lA2(11Y#1Pu@*Xn>#r0tN{ZBw&yLK>`~vNPr;04c@>T_7~2by_em6XXgDg@4x%~JkNceg?H{d^DJM^nK?6a&cfQ-8UtW2a2i+!b^+UGo~;5;fxEyJ;CbVtn^P8gF0LEE5n!pncgDbN;Nv7C66^F;T)zSD)$pD>z~LI+Ber0%?Ew_zEbx+ggaz=y<b9`WdY_n~PnPRfObn^G4SbmJ{c}fO#PuhzuYrCZ0q-=>&s@+4xA=f&gvF$v2MzT#c)BjGTfqLvw%N?*1r~Bxoje;){yv8NlYT`-x-6~}z|n|y8787jz_!U}C-5fl2Cx9U5B$zld?AhkpA;Xmn5D~eu9v_lqTT1fw*}to+-%Id7Ye*rY@n-_>lXfheCPTWC?+g`1C#H>STMQA3Ut+S`3B|O;LeJDoC7WrwqUYeCF!E&`YxhPRbhcyuj}|NSO#3Hp|825i<av@^7jfe;8RQ#b@4awKhN_FTO^2rbj@<@!oLaqoO*=?aFVd~5+&%GxXyc?je#=>`n-!R4)Pcw*I0_KiOaVkJ;L_?QgAiUZ(SSZb4AzYTzRpr40s3}OxSm5g{pa1LAoZcyuplt*Aw^c3))ItCFq)4Y!lzSOOyH%NL*9KZ4Y2*NL(Tr5|>DZ#3hm;afxI|Tp}3~mq>=hC6Xa=iDXDzA{i2wNJf{$wLRP<DcV1*nJ$S-3=D}&Btzm7$&k22G9)gM42er5L*f$2khnxLBrcH*iAy9y;u6V_xI{7}E|Cn0OC&?$63KY2?Ewsc?O2MX-B==%RV*XV{Wb^H1thL=d<1+!IOX^%RvGOx=CICVmr^Kg2mZ}@)<g=W$5>I&t;m22m_RO5tiGdT1uI<jSE<qU5Q%GwPh5_SxZ(&tegckHd`B<n(u96B+$1S6qNyq@u(B`DYIslQ>5{nSiCtJq^ca?~Vhj&3%l;C}!1xjq>2JWP1Y@jBm)s(>o3`=^w&H7&Rjl~cR-6L9#)KHlBh2MKsyMD%khrFl71vgk&_=|&(7%8^Gk;#j3d0u>)kZo|lvHl9JWf=1FyYUB?h;>qZ#VG$<mVrOdsGt^ScqhemTPy*a!n~>xia7;;Z@%ataf9J6&q77#1Y~;RwblyWVy<5n7DAl$H1}3ccu^)SW(m)iQer+;wsMDnA?lxHff79#PAWe;%pR&E1nE<FDoU!dmq~ZDw~fYV_K*C>EyFY{JaiqyDGL`cr8d=ab%c4s#Hw7f(f&zz-AW>+km$wpEo9dzCygn?iK925}MFY@lELK>fg7;wGmelcMoy97x#d72`?Ugz-m?|N0zHuR*7?~&i(Bqep~Diwr?4-U?&34cVnRpUxCvoB(CO(Dfs?^R|BiDoWxvcNMPU3{Cp9!+G~@~6W~v*g09<UdW_B43L&>Rr3ts_@cq)qz~}gDK!$jRKM<Q?$A`*Tr#o0ECWtIoJA_<a6=8wJ)_m4$M0vOO0rsEcn@~fEs~u8rEZ@iGY$-X1xzAiAu68IAge}XL4fL@O_$Tk7#MKT>9Cg0gKpy}*$Pt*t)ecQ%jxOpN-A;hp4Tv4*4s1pF3KG|_iJjXyLEUD0Y-roe_hUr17q~Y27hMw9JmsNp>b^jX`(4FOc)ZT$6C4MC1<b|9{C-X_bGoBT;u7@}a*NNgJ<6X0?T%w7TVn+F!2KX`4I7{3$|!ciV+C`SA%U$2q9v|j6S7?Imw0E41$zJz*U(83@>s!6R^$n6gvGxku7Q(k;cy1O^~ylv66Lw#c{TzbOI)HXzU`$Euv_91Rq&;S$|NpP1@8vD#3icmyYHbg3r@L<Z9$FMe90lzh1I^}-Mf^yrkt64L_EGw$4G8bBtzm7$&k22GBoFEhgGHr^foe>#e>Av4!@KB9%k#vEsA7FTp}4=5?9-K=tXgM_#SpiTw-8ITp}3~mq>;}5%WQlcQV(JxQ5R{TOHRat|jc&hf6y40=p^lqQ*W%kEkN9Wh_V2GJz#2w$1SnOKSF0g+4`(C^MnIjFoe{hm{@)2@A}sEn~H9UIM?A=vVZNBH}uS3F9o)HdjZ$5iIqgL^fbz-C|6M-ZC7)tl%Nq&vGMbCM2%?z#r68em9RLEVsZ`$4^9$@wvsL*gtwoVa+m_b4<d>vs}x-tpe}yr8q27HB}6VJj)eZfXE4Ih0WDc-RB|GT$^H!*h*Y~M|{s&s&BCfu&<u-K`d$5=S&m1iaB7TxV|A=Ss}xY>29M~uJfyyC5tJ3BnH4nah(ga&wxvm%Sh)qNn8nE(Q{_SbuG}=3G1sG`n`!2Cz1slFtg(F)#1yqTncpv%W(&|fCM&JoVZR0+GRwRK`Y1w%9Z97-N1X|#l^W!dD>*uYq2)+4*vRsqNg~^wJ*>vrn+erE+l@xXn{p++a)i8?!peK`HEr*_eBp_#43O0kx?z|P=vP|>PIxhB6jkjE2Ny;iH2DuztDC@^Bc}?^(Y3wBKZPp>m-BR<3L!%e_Elf_>)$T17MN#Rou()70uLv771Ad?t7k(2=6(jLhiBWEaI<%Fv5;Iw?T&7W3O=$df&XO%_GWkk3GhT%NK<o0Z$qjOCEcegZ!aG#EHx2en!~oRNs*tAvUqFwzhsC;a~h0Q#0&nvk;Dbz@ItKUMY!pDdJ^$FA`!C8^z^2{N)N`hYl7B0c^gYaWdjNmlKRb43LfDx{aM}_c225QADuSrP#xSbHeWfzNmjVqGy!KLmzV)<LlyM5%WZzxb6c#2fjPP@^%TaCB76&#|XQ}y}<eUh9ibVC~alT`FV*;Y)MF553#HFKI9(7mc%67{g`kr`Mto!>cbI3A~u`zp@=r;Q0hrBL#((~2p1<%a8<lQkv#Or3A@MLSOPgA3RloL7}4e|$|)}>F0Q|bTRqA>ic+<IVpfm;L#HR^p0br<V}h%v$xjs^=76%|dIVe#v>9O)IK-S%rN;G1;CZ0UF5tTgeTW`YwSanzdpt!rx4jr3RmHUe{19j}!YZGM;o-e4R#jX8pAzRDzptS$(Je}yL@i28aP<Th!5729JKd>ETu*^3fi@%JtD%X0;0-m^B`$!^2<Q5edmI+t($urp`RibW6<H7Q7TrubCyMb5Pfp!BEf-9SPlZr$br^WvV%?U@@r3Z?{W@_syhV5MiRWqEmdmjxqK#IM{U%f|>QO3jL0rm71y}paC!S{+@L?*q=!kKTH?d<pqF?++{+)?2@Oo--L0q}JgZQ&bi*B)mi7Sr`*p|{QI%4Yi{F;0eqE3AGBr@#2YqHhiMjjIgxM8^|jx{hAQJsIt-&Y(nNs!!>xFF6w9-^80j-os}FmdIvo;$Y*x9IpXqRlVKM<J?mE%1DO=cP$;UBZq>``C^I)^(0}o{fR4?hj46MMq4BhY6?86wPy<aMHg8_d}DG%kf!6n_J08A<E!ORhqFOoYaQ6t`K&QODH_iHO}HsG?TI6&}bWO(Gk<}hggPb(LTP2JlI9)owI+@hUIdciD+{p`6xsT7x4>g%of4&HZ2#}xvu?zHg}1;!Y0xY63Ketbe1+P7r+6+b+q5Zzx)+x3Eg`blXC*5ZOa9AE+}-aUKP{Y;V9vi`<7M<+P7R_muf>NB6P8~9exZvALE%jcfoQwUJ@>Oe2j4M1yK)w0PlL9XV_)vxAGcv!E!l{N3;q3PZIU;HGW|^a)kxm64y<_F|85WdrZwT;ldRe5gw#VZqea8E97_|3sH#riJ6|P0&j#~)FsR1I1tfB)+-JF5Ej;^ZJs>3D6Xf3llm^9q`r0YjIhVZu+{xa%nQ5d79IZ*PC5P)aSH+ACuS;=VWN5`_N864T#isd(G0sgr>xQC*@taNhlB<8`;HbCbX#1mplIIqkeeHvMH}2@xQtCLV(T>pC-58TvRiccGO5h+9CMLcMf!OUix<YGad#8=hebQ;gSa5>?3ZJVS-tzzlcp(DEw?Cjm#&E!-x3zTIzpTabY$3>x>85Z`y#HG4OCGtm4pS|o^#FeGj=sCbUa5?C!2f@Q1Oz?Yqbog87^Uy`16DVeWDy0=4N+>8phBU%jLMhG+~^qSiOv~#ZWE6g8t08w&EE!IacZ8YB)D|oSKg__04k4@+NjEU_ANAk`=@K&aPr7NozkR*JsPMkq21Bc~)ean@w@Qmk|~dyaIfivcvxa;()H}usI@h.NkvXXu0mjfiBL{Q4GJ0x0000DNk~Le0001&0002M2nGNE00|WFHUIzs32;bRa{vGf6951U69E94oEQKA0)1&zSaeuTOgdw4Z7yMCZ(?OGcx`Y10RUB0MlCo1SWQeiV{dIPVPtP&WiEJaZ~!=sos`{fn=llBU&V57Hf>-`3Mp1u)sb$^1zXid>TVs|Nvr~9wo^!7Z5Ml_y}}F)tnIW`D-y^){>~ph=NzB3HDx!#f~8o?Duus({DeUA6kbPpkk^^m$n!fbuI|1p*xe0FI6V0Pj$6`}btx<bZCO-?v?-)qEd_DwPK+Sv5qp!u)9wI#%P&Btv;dJGdki0jV4C<i4wCTjJqQClMZpx|i5FlJ#AK3y{R5ph%~#}d_G$0S?NYe0wk8NQP2)EcU+Fc%Ns^!-L}BPT!ZW+d($=fY!C+w~4AZi<QdOYa)1}(l6v82evL4M=#_!YdnJQ6BYlQs(4IpPDS8sLEJLe3ELX@Ji#<6&0>y5I?Y}7wYkH?Q3xJdH+`B=(wq>Vkhwa?RLv8x5T6h>_|6KA(B%!5w7CYcu0D!ovu7%u8!hzVpFcylc)t{U_90WN0lO<@>>ffqzx7%gx_a6&MC7aWlwxJPrv<!bjgIwfI5qRAuF6%41Az6f(hR!W!Dr7KIi7O1Y)5R5;OWU5fwId)bi59RYLyU=PS3wK~HKYs-Cvn<9*9DAXU`xx?^%qwGQ#l(D;LMQR1<Rrw=(KKSQC-5QdKG<_rw)B=Xq?j+`DWj7?f2P>BD}X_t|EK;}EnNfB;?;J#w(KpPOXKczw=erE@qNE4B<PEUP}Vg;3R!=h9PY*P)qmh#zuAcD*}AyLj9S@-YH_-DS-wzp$c2vnWPzS0h@Ld|Aac{9$A>ZHHshcZm78wbjj`V>T#-Txf=Au}01UWEL_t(|ob8=2n3csB$3MG|m#_v55HS1<5HMhXAYlm_Bw&D`K>`E}5HMiSfI$KT4G<(~fS>^a1_=@*V2}Vo0vj+$fFQvQ-oP977tWo%m)(75=KVA8zx(|>&wZYSckVm$EMLx<IWu$4!rIyz17I(38dwH)0o!MutpZPhyTBFTdE=v-Qx<wIt{cD+V5z`&#=vdh<0K;z>-1GzzX9*n@SZ!s;Tql}wqUXC0Tkpc@RE9j1@OV-eWz=BpO~Rfmg`qc45_#ce3<b4b4Opq^(U~efqotV?=;ZQT+j!%_<&}F#iXAH4fQp6x-PC;!2Za#+05q!7IIjfJR48`K8F31enmyPEUpv4(TH{#CZbEgw#jEF@FwsEumHRd{LWN-A&vr{6d$sfrOR`!m%u2Z-RHo!1>Wo2Y|OhC3cOcrpsSYa7XE*H=lT{XCM<vhlkdb>FuBJHbk%bC2Ibt~&We4U11=J_V6t8%>7wQOE}~6UVS!n%>-a5L23)J5ueqd)mg_(A_X;!MQ%n?f@i*{4&+`mhB#44^&2sI+zX|=EdW8jWlCbp>CFq*C&U>DXfinsEyo)Uk@)#l4Sc<NR%eNst!uJ1Ca5d0xT^r?dMc3wBd9kewcnBO!*mr1!s(DvIx+bo?!Hj{|6Zh>4+Dcp{=$cz>6W_c`lll@!TvNtv4`66WTp}3~mq>=hC6Xa=iDXDzA{i2wNQT5Ek|A-4WJp{h84{OBMwi63J=`QI+CQwBE{RJF42er5L*f$2khnxLBrcH*iAy9y;u6V_xI{7}E|Cn0OC&?$63LLbL^32Ukqn7TBtzm7$#|{p0SticSc;|HSR#{EEF;hTHV4%OB(8FN1bjg_<@hRA8SOLXu+C$bQYdW){>^#TL<*(HSW(ce$bbu&KrU0PzN2FWD_r$gsnPWiiED~aT#k&m;s`!|0*+UFM=$8ognl*LBq=eXsVXe6vM<kScu(i)lDOuHU06!=7?!YN3=c5N{u0Z;_!1N8Z@{SpW2{V<+#<A_w(<$K;%kystoYSdoC3bagc!>s%;i3+IIdcdxTcg9*H)F#M#Q_&zkoe6e_qB4!xs_NMmkZHRBo|6PE>a=;m>~V5?_9AH}L)B=O2N4R1+3hh-8hHYj?|XO(|lzGT<iRRo@M)c4Lec8&fXC5#l;lC8Tj=xyo^vxNyS9z_G}8rVtibQPdlW-t9%=D$d)O+l%EkX^S(&@DaA+Y!rzro(yv@D<!^rAKL;dn~x%6TBrNz<g-frybf%;Dz;vDEl6B(WSBszR7|^q3A3ocW)}_HfVU=}Hzt3+LcGZC73{kbn$S=2P3Y_D-?zoJ5mym+4{^H}_kec^FCKotYE~vkmaAD-iF2#Y{p}=vTkH_FZyB;+Cj!rRW1$RRfzv1?uI7m;`2K=d1FNx|#9U}dVBgRDd=azSYm?6t;7_cAuG?mMjLq2!A-6cC3AgC*{nE$4=lE+thIocQ5SwAghss!|J6I?th%8q-gj`(}VS&ZgeAa73dAIig_MhXMP(z8U9a3*B-^b=`DLIF^&s-#~b|?~rEz6e;^sx{4C-0%e)ecP@b-vj^9{@YZ5tzi)4ozi_F6tWHPJr7Dh#lt+Y(@DB64$Vao!dD<-DY}hXxq&9V??$WxHkJ2T@u$k<)LrtzCeuoUBym#yw2tm90z~}%*Dq1eoioRx}!_t67>^ui_ft=%AW)6j$<cVV+8iV{UC7-8=vLMD0aeQ1#^`lfvpFkC9Yu;vRv<%cxQ|SdjJyG&`A;USiw$K<Oytq#lIx3fs<<Ca0b8i%0S{0<+<W{HUb_?T%s(#?WGa0TjCN`@TG;yBrZ_}?*_cYC93ed@1ZgaPPvP1L5<mb$syH+)xP81yOg-5oSA$?JibuJNN!OiL*f$2khnxLH0NrERi+2@HZqvSgT&PizmxtRX6wi;ieyM!A{kv0SKE2$MR9ic9(GAwVqi#IA{i2wNQOcY^Ffn$GS`u~hR;G<9oH$YCG6IROFH%fyD9Rb#y&)ks3NXqEJxEafh8%n&G8URYW7owK1GixGoinXm2<m?l^zKR3(Tr5W3_Ew0>6~#SM-b`;yQ;3<1E!SS4Y4REcKy8Heh1iVoZtNG91CI;33-2awBRcB(D9yAJkKRH;*MOx4>4%PehOLxy7T{KYB`G%`%vCOv1>sT+6_%0`KvqI4n{%RSbwc%N1LI$O&qN&DB!f=ONQvn_`aGN?d<Oe9u{`Z?Oolub%QjENR&1OcS|^Ibfr>z9C#$A;XU8ZlhSP^Q)L8iz$922EayfoeQ+jfJ>CiNar|7TnS&%b7sYLEzs5p>#G|2y@?ekk_8(uv*PmA;mfdG3Uvs}aR<171U6WlxK0P!Wki-iE64@PmF5-Qz<c7w#ko#-+GNygu{QD!{`!NWr#Q>CFVHTgx@i?IB!0hWfkkZFB`<>R!VanVied@(MGsiSDu3pYQ7!CHgtr^&M>NDDcJiSsq@3G{hFK)P&~`@i8_sU^C<eeH`2uR|B!k@JKv=|oTA{7@lU9!dV3G7y+{^G4&D4Pw30Va0d!CO7?>VMI?y=`A;;(`*!j3z)L5AF8uW=E2-@L2MBg%4*J;sU47lj`IPZ}6Y9($OB{Gmg{iOc7HM%d|8-;o?4HnFg_wtgVtU;GzSGwf)y5RQGopE=K7DT#L};$?X+5@Hh@#pOHv<qBhm4i*XlY`&mzGU7Xz6O2O)kd5NHjh$`xF+%Q9M6lJR*u#W#!tVpVsDC)3XOzlAA9ESw>*8Y(^F*Gw?gKvuzB|J5b_ua1z7$Hw2)oC<!1?-yBZfpMZDq{)d5KGGNl07|v8(q!<Q~PA#3bDPm~bxny}-rl!x2LwHk<RIh&Ja?>Pay}thiPP7bj3~RlGuxJoLv2yT{#F0y!ZHSI{^Z(dI15DK984uD^&|J<2_bQni0#R*(Nfrzhr~vXx?Ef~%*=PZc2MfU@Fx1Y8fa8DSMT#GF#4#`Q_yd7#ZM;JXTah#ph5fO?F3JViLSy%-=>#kB(b5NI>PDxZnr;k_+ZRa^j{66YSjuc0r|ElQn4ElNyq^#m5d7sJ6j-Kk4lPk}3eHY4Jzp^1Lr4K>vzE`ZMn=lYU+92VZv)U((5>tKWxSr73R-Ap<sit!9jPTe{!7fg#!g-~#H7<k=c-ImMogz)73I&n9=MR)Ou=V{%R%dsb-jaHBSCR8u#Q7UmkT*^rWSNqE+o@W{GVJf%ih;ffMv12@<U;Ib@ory8<dTMb&T)Df0__IojZn1=kD~}A=meMUcV(R()ntT+ZPJH(yGVH!<ven{79uo+-VYw-eH82)Yoqx#RR~$1*kld8GAkIA=qM7=RqC7h=apkd|JGTk9==d_C%`eGEA*ymM@O*verAcvJ!j4D#*p39&b&hzRje)D~4^6s7M@)x@38&8#&2ye`(!T}wLz9-v@mWNhTggWu%HT^?nz13A)P}gO5O$ACC_K?M&f-rrld<8@Xd7<P5!3O9ScYlQKE8-N*hT4`vwzWs<#L>fXmca^C`1ew@e6Cr7Qym1Ef?6iuKj^FcZs{gCejfS$$H>)mNqRHzyZQ_wBN(O{1s^l-Fq05a{{Jq%LR5WD0Hq~71P?`DB+d+mR1Yew_ISCYC|U?bg{M_ehfSx<C!~m!E!lX5-xdsjBxP<Q4fCr?|PnR*k$Oq@)~r(aygDiv<dxB67}#keqlLsg$3Ob*G<APtr6OLOwBUk!W9`29;8cd(cwEQ<ai$oQHc79nVzfyZ-iddCClYF5Ya}~D-Hh;7S^V1o;<oJuBU{P`YxfQzIF4Au*b--)%{A$3%lqR9sd$eIsOxI3jyILW-5|lqIxIxrCqdKj!;3-47)q0tkLD!hiyoQga!8djusYlTU@T7Xx{dan;V=(8{B2Mj7=?K>oo-@@Ehr}TXgs`sm$^mbCFs_`gsqF7sjS>cN6%BMLX()xFGKAmt%}sz5CRYrYTe{w<vX&u8A4n5*EKYLYxb9WZ0RyQb*4FBCePXR8cRLgazH6bItNIb~P<@JV#U~n|uyX@siAIwG5{jE@6}S^MnI^q8u6KW_N}f#?Tkb<+#8!VVta3y^OKNP%XlO{>-_y;u$tMR_WtvI5&8lnvXN}&2r81CUz-cJo(6y6~q0`u3{%iYd<H~XUnyb2Ux^;R%Du+O>w`M5f&4?0(_gY!~X-~fUfJXIU;lb0000<MNUMnLSTX"}]},{"guid":[3420273076,1898989905,2838226766,2988281017],"revisions":[{"type":"kTexture","name":"Circle","revision":-1,"autoGenerated":false,"rawdata":"0TclM02BcL009610096102BZK0Ej&R0EtjeM-2)Z3IG5A4M|8uQUCw}6aWAL6bJ?Y008Q6$$0<(010qNS#tmY4#WTe4#WYKD-Ig~03LQpL_t(|obBCvs8wbD$MJXDaY&r%q<BHf&@4sMDJwCdp(X<@6VW0nC}g@ZO*2E&G|Yv$F&Cz3VrKdkH8n^B6;X+prI1~iz{1QLP0=zX3-N-cmKcfn`{TQ|+siq}=eyRk_PXrP3l{wNxh~IX&i8ZHUi-VA=cGf24k5L7Ixq|v3Jd`T1A~Bp$-i|0rvj${-vaspCj;LE`T~8D^Be>Y0AB-N0sDb3fiHl)z;57kU?;Ex*bZz1wgOv{f0G(JNr6%uUBD>dY+xiX0yqm84x9<}FK%c6>;papHUpmkn}ChL$G`?GjHKceDAjZZFb)`-Y@?HHaFK(`U^}or+14i88sM`c2PJ+Alxmm=TmXDK*(P9jBz3kMSOxqq+1>+I7CIt1Aq7e~jRz(H7Xudo7Zy95(s&nG0lWh&2UZt5966Q(r5w6|Dam$8vh^!;MCG?1cq`eKC7YhZ6ik6qoMFIslI>F9ykdt_c^?380{>06EyWI}GbvEoYY_0=WV;MFx6skl*N4Cxz-!62qtMZG5Cuy9`T$oZ+f?j<s<h84U@7oQvK=gTIQ6DL$<H`oTCz<ocr0R;0!xx@O~GTSB?U@+Gk~jrtFflCvicl*&af5hX5Ef`G}xK^+itA;^$V;U7Oac*6s)VZ3+u8Sh<%hBjCJ7-#hwqH-lm@;jm^MIz{|j*g2z%T3Y0j805gGWlC3OuV_m2pV_m76urAfjSl8;loUYp+>&_jHb?c76x_8gUx_QggL-S&?EyRLVGEksoGa8tcY?BKf%V*eae6!QE*?GFX$U${uFs;tsW~c8stoye}ZvzXGZGFLGsVoIbI_Cp(fZ13<6k#RSJ=*LfT}5^KFuJgZ)y+=e3$X6sBCG}G11|vY7c_>-QlR)u1g-<F#cti(X*Jdz`VQ7D`fi)A-)<LTUBVY*UBlzseEki;^T2bc<v*ALCCqr>`ebWYknE<_0ov>c-QT8bmrXxf9mLI!;&wfU*#JD7Y-;sC0R>9$MgTVeH)5aj^R|Unr{|kk_op21JgmF8*=ani4cA-)JPka9J=~UVC{Vh08gNsxP09IMJ7{%uzJYalO1N{euH$A0@}Qirw+whH+4kgot;$iL9B&SAGxjxbUJlag++2!1P?hW^U`>S0&g4G5@1Ds*;6K>ITS+KTS|$OvBwJpyo2{YMskt<#YlxXjt5Z3zkE{EDCzEY?PS>au1&Vcg&P}$wz5-r^b!EPUHI+&G49B{bufn>R^RO0}mux$8x<(~*dZ5ezzK1oY#kLK*EpB#VO7WVV%rmj>=GYbh|E7c6`8zdGh6A?(w_)#|#I&AP$K~6R&n<CGrq$s*I`X-<0*?bv(1CZOofs&yfIG0y)-k=0J)oP9-2zMbjm5g1=V0B>F)aZe!~U>zj7|!ap}?KV7V~y@CDu*(Jk|sy)iVm~e!h;lE&tnqN0V)9#PgO`rv%Cs!1uAgMzO4>)j_EssfSUtI-+B?`p*X*0bY%G&Qhv-pqvEUm26`oopTe`E%`K>q^GXNVcpR;VBOL&tOFiSw%Qh5ode|@;O=CLVGpei$z_qwDdjeWR>$;dk<R&0vV9cke5F#?K$!;o5SSk6d@o>KkqaZ8PpV}m);&EZ()ktx|HK~L)=C`%<qqJ-#QBJ`oK`1fUbCA?HT0*|Nj)jT`PKn{$G!=wjXDL&0N|cv%eqL`PFkIh`U+T%G?rFp^}vkh+7CRKY`Zd^s}$-IDC2;iVE-d$wFv8W?5O?$ahrv8S;uJSp9lPn8a(8$L!ev^{FLm^OEzQOjgQkIJp+>2P^{bfR<f^fuo(C&@Osuk6{+fhavg9VHdSC23$V|!wR=b=Z7~gdc9->?uob}lSfgYmRXI>@2Y!Yv&ydzuTAhqqLP4?^LaP%y%lly)fxiI%iZQ5mt7@R!3;Y~=5S!MkSoh-mC?gUvv$3x1D>9s87w~7`fhZ$tqpAf;U*MO(FOvT|jYG6L7S}}@m&lRE(CW}WDdjm10Dl7hnEc<BP^CaQ6$_L5GMwWhTAhj_d24oRpOfJn_hX^5H_C`|R+T^*0Q?&GQHFCY!MYO{M;VbwnCV#8c9!Wf{sH`+3iPUcqv!zy7=(q%4>FwNF{~?5A91AJ7Smc&`i_+6_z^bY_V2M(5=yJ=cPN8^-(nBB(%40-6R}el$&zyDN2`-N?UxCUVD(ViP$_eu3;=#d`a6>~Soh()Xd@EIZZ6i<opvVv{{wzQNk9ISHBe5)Ztv1QGkG2BI@I$LDWmCFclYHfkN*eu7@%|yYRecXeStra{@a}AuqWdyqK!x-zKgKm@#|6^e?RamO7@j<83X0F*ezWe|H8TqH%1$cNPb3Q-QKsSJpOlBy_81T0_9$;nI}!t+5=d3VJSabiu7Or*7bdFienF8O`fIcs4Y{V+>Ql;_X+p`tnuehl<f9TBv4;07=DTWkLfNfkV^6HPowAoB(B45{k&na7yBIfI}|2TT?eq=;a}l@&^iFCowUzlqAEk6T#h}Q^1e0Pyfe8!`iMk|(QLE#{&5_M)lk}RjiM<!P{v_jpQV}4L}4Oz)C?7`i?CWs+ussJk%2M*Yw$@k)7k^rGZT?I`V;9Mv`)urD$BGUnG_i)_mFN5*neRUZ}rSX>goXYJD%o2>s+k13Q<&`+(Eh@`Z=u6L|+X{-R;7D*V9Y~c@ODdM9id!K$(WEo8w*T;&trvrJB~HQ*6Y3=e-kG_rq!|%ajSJv^!AF!RChWF2c12dpAez^wMcoV88p`B{s%jwU%XaC%1M6%1PMlRo;iNyRf&0^`f72s>N6hct7e-$7(L^G?Z@b43xV_w{ZD`XbJ+6c~~uY-Hp{=TeK@st{~kH^%&{?BZ}0~gQQyv`7W}}!XK<1fie`Ean1YOWC=EHqh?wYG5fKa@GeL<2CKm=>jedAN1)t^tySXj5jLT;=71GB+B&Q@K5`y68>_`!<sB%q@c$5puw^dv5LTpni?JH<P8Dz`*_TW0Ri1$|9BZx_;ymtQv~G^bi9CeWipLPFCbKT=-lIGN<yQQSHLv3Tk0jEm9>!|MV;WYQxyUO}W&pQ2kJ*YX6QJiNB4O5HHM7-u+-+EmMwdsR3<SQ1|B3RWXyI}ZulZQ*cnrmAbYSek<Pj)y@jv)kfd4;=h?qyQ8uFM$y0`s%6+2KS;UDB?tXXGU<gti!ifvd8ZFU|v7pvK5Vh74Cz*y%oPvCFV5s{-U!D`84ELOA8#0-=<_y@NLcs$}5L^|2ySWS7{g4J#mu>$2Z;AWt|<CvYmzwtkz7Lo34#cFD&<Cy+f?Vc860I>q)CSa!Xn0fdgB#B7x7T|w7e<oJLnZ*c{5%>qQ98F0el9zc{jd|RJ)p8~=0_6r^iu0H!fwd8?Eh5KTi`AIN6s(pr$r>o*fg7F2ynz3Q6%n5&v0C%E5v%FcvIffa_!bu01N;Zrm+`tH(z|_Ft?h9fGY+fi)UpK1#1t2Q3Rsxonj#WzAy#u9*JHJvN|r#m4jARwe-r*6PDHYK3ah<PqsXxEdfGraAGp?e%rn5Ul-CoHbe3VY=W#7o<8EmKWe&c(lhwe}DX%3W**uNaV5m`~?4C^%D5LSu5&JCug^ENZjx|^fdd$XZ-6c(+%)<8q;7a^IjEKbbELMx5#*$+GS#O{WNpX?qfDO)LL?o^a_!nNEg>z15Z=lQsCOh_jA9&t*4H3!5^H@!WnvC-uJ#U~~<J|uRbax_B78~$)&$?>f6DTvBCtr`|h!rWD`B-g+x(3ID)}BDQ%CRrlYt(uHP^4Ve;-5Aoxb{N>WgKv|V*uOGTqh!BwE*87&Q}xo&R%GsOvAU@*h1iK$NnPHK5yfDr*1fbi}r;CN}te^9pOdi{vy&|-Wr{TWkIh(0_93zs^h|oP@ssE-HZ4pw4RD(L9aps#p7k?{vuKgZ>?qyltK9JPSyY~IrbNk;=F|K9lNPmCiLh;f%08og5!cq@ULDbBE{H@Z;`zTSSIu+Bv3*fL@NM_RLv5sc0;8OlwrVSjtjj4EOqQJBE?&Z)o!TEux#j7Z-Me1;9SRrJcAOE^6=E|xmY%I>qLPPY6rSI5vi)BSPh4A2TB)kspA5#0jnJQi%5B_!fH6wrC3HBr>8)f0-Wc#fM+lwQa+v<K93$&3+*jXLTv%waO^K4<?{ws%b{F>a*5-_{{=pD>@Ona^C4Etp}Nh8?gC|ePdoR(GYAnWFK?h6w+?c5fiel`7kJX$z?+Uih)8+8iPdz7eppr<rMp16*fD@*zz2@~MWnnwz_+^Raaqw_pj_lQp_UdEsTWU8AD0!!2FgU>LdOZ;a_lQ2<>#sC3$e^N?ASoLz;UwG&Wnpk`Mrg29ps}j<Jds?w&O(0f&GsCMWp=pW3?UXsLaR`DDOD-6_M)j)OL@7at6N1lvX(Q6_M)j)b<1{JAk7DWgI=c@Y9Wzz`Kr%ib!?5i`96DE{<5U=g2@A>$u>1j(tU>dOS6LI6Kk?%Kseuib(Z%YP{P(8J*L`M5KB=HGVidnt{?qc%XcSCQ}lryH!}NhZs%r{IwY<qkzGI2d^Rg1tJltrrm_E*)tf+ki&s;w&Ox;9s7z%b$M$2Y-k0_$eb=BBGu)o^^wpDlo5^t*E{wVk?Qi)`Uq$R%2|O2?RH*7M5=2&;m=FYf>xjm4?JiCu-!Q*5viu_Sj~qR4i+e<17`*v^l^$oiAZ&Y*8G{k=?!e1(*A)5ZA>*J5vi)sn(q$`YXCzXC*R~BkBC&5r{;$?fFX_pK5-64M5@hG^FtbhcgO;4b`C~Fs?AgLgB!r0z@0w_KJ|}BL@Ml4toB0;Y5)TRcisZ*OEn}Bsj7X1uX#MM`L%I~t?9-iA{7@}`=>VupZ0NE%E5?8wT0GxR|7aTaA$SMigc#X+CQ}coD#V6j+BEDk!lOA{Zksiw*q(GnQ|~9Qf;BN|E&hlFL3A3uZ~2dUP5cXUjsNfaA!^XDAJiiYyad1@Xf%T_of_-h*Vo>?SHcY^bOqki<E;Ak!lOA{k{#LPvFj9rW}ljR9k56_i3DX9}$r-4d7tlzM)?)i%7kM*8af;a3FB!&;~dWsh7~&KhOZa4%|7kMPEefCA9XxZUA2e?i~6Op@`H=XzhR10QLv&96HT`h}27H?eA|8{*_SZL`))5FQK*nWrOghmC&goMWkLrYyXP|;cc~^$*e`BK0<4MZ-ej`e>}@=h)8{e*8c7W;jbop76cQK`UtK4&l`kKp5j@uR7C2bKUVu8b~Xr~-p#Y9x`@=nnS_6ByrY3{^6BCJ@rX!;d1`)p1K;u(XE_HWBGu-p`E3n+3wVui4n{<(%~SJR8~BzO9qAvBh*Vf;&F=%YG`}_uT?GB?R6`PxstT?7Pf5Nu2G|^U&?wX~E7B<jV>KUQGuVu60G|XN)CG)o4oXC-X*A(e7kmP(K-uKHh=|mmr`9(?D^NB%4jk*)S467IQ|lX{6(}F)bP*A$E>Eq046Q)fKzPUOI5ZukNZoZ|wH{(SmLZ1&WjC-s@Zd9m39g}uNYzZhYCXhyl4(#H$NWD-ecQ3Gh*XcK#t&!5k%6){r;CY5^>}LhaCW2(lnWgDib(Z%YP{P(Swr}AkQ0Fm9Tyal>bMZA@esSQ>;R4ql+S=wj*DL8*jGfV!&BR<u<QVi4itd@IZkx3V_y-e4o__#l^IzAWfIWOvA>9vUq7t2L-iUc?>SC19=OD@zlfCIC0K2TIw~`c4V0C@yUvS?NPT!}`dutD4m&nb09H6oIK{EAh?JkFrjN^t?gHf<=f%%+>@OnabsoMzIW8-@3zX%+{=gG<0hc-kAR^^;Dd8{v?#Hs?DBT6hYTzx$Aim?+S47IoQ_F8*S#gx^0;RdLXAtK)_7{=zITwGR9H*y1S>`zLFyJ!B{vuL7ml3{(G4zlTy#>k#j+1}av9E}fkEez|z!@mJfj6Cl(WFZv)ieQLpu9;BFB10@C;<O;Two9|)v>>bl*d%8hC}t34JQhe4;>e|(y_0Il!vEwKO|+KYysYIT<A)4mm*R%Q}G4L8(21UtG7S_c+GL4KEO1`{vuMmX;|%s>NOKW0>v}w(llVWV}B7T&TxD;0jtOuC_8|qjth<hu6FD%BE`9y@U?fqvS3GVJDey`0A6ui5a253{vuKgZ>^p%3qk|MbC)s$xW=)+h_v4|SgnRyN~AzJ2rO}27!)WXW#_HYC0G{pDkM;vC)@0}_)K83V}B88pUGH_hT2TvO+{#+tN~tf3}6T_%dx+Rw9hQ8Mnk>C5o_=CCNxk0UUuvYHt4a=V?-ohWAXp753YSrpezDjbnHJGnC;kKMDjNqtIbd^VznQ{6DZA-d&~hwIgb&Me2l_s(!*8r-auIhyzSWkeBfH=HAEyI*J3pp>TRs%gLwmG8?eB6%ysB4MWkq>uv+w3fYp33Z=f_UvevQxMBw@q*AbC;uE%OI)LQ&E52*rWJuu&S%=P%*84!_p#^L{?J|C-fmo$L_@B*;GvHy7B#+26*k!)_nw_foEtj68a2Fm-u^Uh;#Kued3wA&P{_B@`)YTPYtpa49F?=EEoa8risiHP4#SnY+{fYo*?SpsDx@T~KgoAA9uAR_6_#Q#V9S**5G$r32diwE`iCr$%y2Kr~bu88!mKUQm}IgVL_|0dxmSp#J?@U-)oIlwI$uPY+Gy9Iw&?9+6!Ua?2kKmm9L-_oUEKdfFH6v@X}{C~8UVYQq|j6m50JmoxQ5->NywMFE3bFmupcnYiKOkxBI*kD{e|JV<$Ia5U9nuY(5^+NnN1>K4jD0_ha0Q(%r3<SOh42?7fkxn-htEqvGWA<USyC=o~Vg(9VXWf&|V`c!iMI3`jC%X;b#M59ko2o0eJ23+VY;c|z2LWzHD-MceH4UpJkG1%30(uoYP?iJpoW~3Y?!Y(4rHHf)!D`66YUezxW}}H6C}4y1zV<u|xHE^bh;)KG@qfXw0RJEV6Urk{b^`wfwmOfy6U{*@;x!xpALFf9jqZ#+m^=anY*O3DoyQCXz7LFvKOB)-8iUo0_nXqkaZEhzkyoGqJb{13!7G5fau|z99o>c1jK>nJHgl0@plk*n!#O7<_8;l)_`?yYmAmo(@!f{iq-PaSmplUn?7`2Y&SOr({$ov#KOB)-n2y!RNzUUQCB;0k9(e}}*bm{IgZ3QYhv<2V$g##?wQ-K~xcT`1xVyC@P__b(0PCE`O#^-m^ou?sk!tFP)r7YZbRAZM-fv#r+7T!KuL2LJIPMPMp2%Ynsj7Rhn(%rUtHIp0D^S3GsE1M<cMqECKx8iI{<uCwx<BTrv@=i+VL#kr=WzpopP+}d(z&K%H88+=++wWe4n-eP584?h03QMW#Q!{H9Pm@%qUa+MDYuKT-+k{wdF!xR`zZQ|deQDc0c))JJFwq*+~vT1z{uz$5-F#V*zf%1&g1rDHRf$B&8&z(0c);#FvW4#0YAfk>nBn*1F+w9?*ivwwe?us;e;tFP{4lZG;cfJ4*VSG8+SM&rO_Ar9lt%rvGYjx$2y8417#QRH~bH20qzBU5qCHurSS{wcid|+R#Us;4kuiZfdaO$&|iTSDUSUm_W4qzPVU2gx4l+iwd7fNFS?=w1>kkyeqf{XxV|V<q+Xg~;{7<k5v!rsqmRg`41of+IP+id->RJo`~mn4dZr@P)ff96{sZ<q?Xe51ozx4Q$8^%6Lv8DM32`s*C(?z(1Hhjt@bjZc3InhQuxXx|9KfEpJP>t68I<J?rRf1IP|~;;3l#OKNL7r)erMB!30SR^CQP7wcPL<YCx0OQvytbp&y#5$^oq30McD6nnm!Y--|=5zcPXV&#y|o49Qk|TM=6hg9ed)P<|}EDyiLd2>AfAWP5%IX4eX6JqDa0`^Z<IW7Ymd=zz<R!e>pH1o4hyrQUM|v%*9^x^S+zY^nX}wlrBu5ymu%~gMi;+Gkd483+ozu5dXVFA~E&DrXRS6^skOQg4M&0NMnkw?12InD!(S(ol4VV*vnGhx12>{7=z8UmS%FKrskbVX~P7n5h!4Z{%g`dQvrMP@}KCrinP~sY!28g>v#VH3zO2fL{ueEz#i0Q?Tq~hn{X!0%yA-KcPE>7Lg^#j5B!mmJ~KI1l>!A??e@PQeP`?;Y)ZU`(MKT3#~5tQoV)NZb<uPH>ofTyCHrc)H&qLirhBpO!YuQmyox>K@-Fcq(wo`Xmk8b!{f@K?Yj`VF(^`nC1`60*5kDhaXY5vNt&&IauW%@Gq#@X%<#*y=YxqbTv3GO+6=P8CR^>ne>oUBL>~qa7z`hA;`;>W73)8S~aAsvZ&kF3BNhx0ROQY(60@lR#Q?k#BzZqLZ`f=K@Ad=L=P~bM;R$zF>b1lZYy9=L!Ad5N#3Ru_SPl&UA&m!R8<h%x~RNgG$d%%nc=bDGjv{vZkNHNqUP{1D0HaiisE?>G6`yY88ur}klq+Z5if4JrX12dj$Kdnyg()XBzs8gUc-GOx_##m^5Iq+n%?Tc_esjmLOEy*@1!ui%=-P?uCPM?=L1`60ivL6y}wZRvF{{RakolmM|CU7$_C(`*AV_n;|`x2n8fdbZ@*z8n{VGr<BvMq~rPARu3z)i_^TBLI}JGI-oqF=kzIZ(j56q_B3F+KtTYyzGEo~8y5(WG1BfE$4ufDw_-xsFzcc5REU?t#*D1=hVdJK{N41J5SghKT2t;*0{WPqy(9&pRLM%6>KCIZLTi0tKvRpxMbdB;t8jVvR`8qhP73QNXoWqvXVh=iNrD6T2gNn>r~_nr30&1Z8=hygTn>4{ztAubQi3EOysA2RJ|SxtCzy;B-_!Qzr%rSXbk%SeIj#_b$4#9{VL)0K6Uf+!DuR><`N<V07ejZ^gQ;pTN4WJ4&YpO4AIi+cE1q7~R>1ea-x0vPto-Nw%59{n*>I0PC_|l*73zq0<8etlP2K`8YPGYb*j@2412A|7sO%IB+#^6>-|+yR(*7XZ6mUu2BgJl$J@fIwAY#bd5FGXX_=v(wwd#W-9iaY#Qljm_Lzyv^uGm=X8xqQJ@@e4%QVpGskNj1YSwDrNF8juhmH=U_o+avh~UFS_`r6=@)XmM&&3_x_26_4#_DwUuy^OTC%+Xe3<j~>gHVFGT^((HYn%oEu+;jy(i~uRgMCscO$TF$s5V<w)sd~fd3}jo4^NcxMmfd2V4q#C)tLz;hJl(?&xQ*ZfWU;0wv6NS{;<5+H}p`*k8kCz+1`Isf(5M11?FnDaqE=rfYAY)e*hAP1md}1&Yr^tef&$+7~QMtFZ@v?_g5}zT4*Ox7&r-)See(56ok>!iU&^bw59cbwf)41xh;SV-Ig<liyd(C$bWF5BOiQt-|hVs;CQlp!)4(yMVYY@E&WiZs!-U?q_jOpky<eR>$S!g2(b1_BnrTvaL_H?L`i%8-ua`Zlkd<9*aGnI-|%zVO`D54(Ig+kEOB{C~*wIzGiNAVwS~j?AHBbY<Y%Fz$aL9-KXR?3tfNUOsuKwEbQU-NZ@Sjqhh<Be}rguGA~3+sbr==iEjqhm3cMUXF|`@=h(MOTd_jgj(vr_Gx@jO*z%WO0AD7@d<!@QTNbtpI34RW9)#U_48h)w8kYQ9S#8F;mS3iW+vM}0K*`TITAi9x3m%J@rL;PgH91xe6e#)YL#uOhD)#VE+GiCOB+bs`gT)S~-V`Y9HHcP6=Ve%zr^NRm)^*(MK;BX4XgY`jr8vWAb$VWkb$?2FA7I_Z%}(Pj#SW)4DNxFxi&h6{vm-R?Vr6x=pH>HPv!l4GeK@tDKq;s3Sa;~fShwhf#SW)5-o?6v-@&?u)e2uS3Y2P?h;@%PJ4q){u3nBj?8Y9bHamgeLoM*7r$DKuGqA6vo1Lc3&eOp~4l0A~v^sm6oxW?Z?q8`81xkH%VO^+aV_m5uurAf%Sl4P^v(Sawhjr&}#=3PkVcokQW8J)Z{!s%8l+JKE_N~%TtebT(_7(QP<lnlm?$=YWZrFan$-p;(zO-gOI|v*Az6QR+9*lm8b<^&}Lg90)+ja+b=dlgz#@&+qo7C9<0}YE;GQ-y-*Z=?k07*qoM6N<$f{9R0M-2)Z3IG5A4M|8uQUCw}6aWAL6bJ?Y008Q6$$0<(010qNS#tmY4#WTe4#WYKD-Ig~03LQpL_t(|obBCvs8wbD$MJXDaY&r%q<BHf&@4sMDJwCdp(X<@6VW0nC}g@ZO*2E&G|Yv$F&Cz3VrKdkH8n^B6;X+prI1~iz{1QLP0=zX3-N-cmKcfn`{TQ|+siq}=eyRk_PXrP3l{wNxh~IX&i8ZHUi-VA=cGf24k5L7Ixq|v3Jd`T1A~Bp$-i|0rvj${-vaspCj;LE`T~8D^Be>Y0AB-N0sDb3fiHl)z;57kU?;Ex*bZz1wgOv{f0G(JNr6%uUBD>dY+xiX0yqm84x9<}FK%c6>;papHUpmkn}ChL$G`?GjHKceDAjZZFb)`-Y@?HHaFK(`U^}or+14i88sM`c2PJ+Alxmm=TmXDK*(P9jBz3kMSOxqq+1>+I7CIt1Aq7e~jRz(H7Xudo7Zy95(s&nG0lWh&2UZt5966Q(r5w6|Dam$8vh^!;MCG?1cq`eKC7YhZ6ik6qoMFIslI>F9ykdt_c^?380{>06EyWI}GbvEoYY_0=WV;MFx6skl*N4Cxz-!62qtMZG5Cuy9`T$oZ+f?j<s<h84U@7oQvK=gTIQ6DL$<H`oTCz<ocr0R;0!xx@O~GTSB?U@+Gk~jrtFflCvicl*&af5hX5Ef`G}xK^+itA;^$V;U7Oac*6s)VZ3+u8Sh<%hBjCJ7-#hwqH-lm@;jm^MIz{|j*g2z%T3Y0j805gGWlC3OuV_m2pV_m76urAfjSl8;loUYp+>&_jHb?c76x_8gUx_QggL-S&?EyRLVGEksoGa8tcY?BKf%V*eae6!QE*?GFX$U${uFs;tsW~c8stoye}ZvzXGZGFLGsVoIbI_Cp(fZ13<6k#RSJ=*LfT}5^KFuJgZ)y+=e3$X6sBCG}G11|vY7c_>-QlR)u1g-<F#cti(X*Jdz`VQ7D`fi)A-)<LTUBVY*UBlzseEki;^T2bc<v*ALCCqr>`ebWYknE<_0ov>c-QT8bmrXxf9mLI!;&wfU*#JD7Y-;sC0R>9$MgTVeH)5aj^R|Unr{|kk_op21JgmF8*=ani4cA-)JPka9J=~UVC{Vh08gNsxP09IMJ7{%uzJYalO1N{euH$A0@}Qirw+whH+4kgot;$iL9B&SAGxjxbUJlag++2!1P?hW^U`>S0&g4G5@1Ds*;6K>ITS+KTS|$OvBwJpyo2{YMskt<#YlxXjt5Z3zkE{EDCzEY?PS>au1&Vcg&P}$wz5-r^b!EPUHI+&G49B{bufn>R^RO0}mux$8x<(~*dZ5ezzK1oY#kLK*EpB#VO7WVV%rmj>=GYbh|E7c6`8zdGh6A?(w_)#|#I&AP$K~6R&n<CGrq$s*I`X-<0*?bv(1CZOofs&yfIG0y)-k=0J)oP9-2zMbjm5g1=V0B>F)aZe!~U>zj7|!ap}?KV7V~y@CDu*(Jk|sy)iVm~e!h;lE&tnqN0V)9#PgO`rv%Cs!1uAgMzO4>)j_EssfSUtI-+B?`p*X*0bY%G&Qhv-pqvEUm26`oopTe`E%`K>q^GXNVcpR;VBOL&tOFiSw%Qh5ode|@;O=CLVGpei$z_qwDdjeWR>$;dk<R&0vV9cke5F#?K$!;o5SSk6d@o>KkqaZ8PpV}m);&EZ()ktx|HK~L)=C`%<qqJ-#QBJ`oK`1fUbCA?HT0*|Nj)jT`PKn{$G!=wjXDL&0N|cv%eqL`PFkIh`U+T%G?rFp^}vkh+7CRKY`Zd^s}$-IDC2;iVE-d$wFv8W?5O?$ahrv8S;uJSp9lPn8a(8$L!ev^{FLm^OEzQOjgQkIJp+>2P^{bfR<f^fuo(C&@Osuk6{+fhavg9VHdSC23$V|!wR=b=Z7~gdc9->?uob}lSfgYmRXI>@2Y!Yv&ydzuTAhqqLP4?^LaP%y%lly)fxiI%iZQ5mt7@R!3;Y~=5S!MkSoh-mC?gUvv$3x1D>9s87w~7`fhZ$tqpAf;U*MO(FOvT|jYG6L7S}}@m&lRE(CW}WDdjm10Dl7hnEc<BP^CaQ6$_L5GMwWhTAhj_d24oRpOfJn_hX^5H_C`|R+T^*0Q?&GQHFCY!MYO{M;VbwnCV#8c9!Wf{sH`+3iPUcqv!zy7=(q%4>FwNF{~?5A91AJ7Smc&`i_+6_z^bY_V2M(5=yJ=cPN8^-(nBB(%40-6R}el$&zyDN2`-N?UxCUVD(ViP$_eu3;=#d`a6>~Soh()Xd@EIZZ6i<opvVv{{wzQNk9ISHBe5)Ztv1QGkG2BI@I$LDWmCFclYHfkN*eu7@%|yYRecXeStra{@a}AuqWdyqK!x-zKgKm@#|6^e?RamO7@j<83X0F*ezWe|H8TqH%1$cNPb3Q-QKsSJpOlBy_81T0_9$;nI}!t+5=d3VJSabiu7Or*7bdFienF8O`fIcs4Y{V+>Ql;_X+p`tnuehl<f9TBv4;07=DTWkLfNfkV^6HPowAoB(B45{k&na7yBIfI}|2TT?eq=;a}l@&^iFCowUzlqAEk6T#h}Q^1e0Pyfe8!`iMk|(QLE#{&5_M)lk}RjiM<!P{v_jpQV}4L}4Oz)C?7`i?CWs+ussJk%2M*Yw$@k)7k^rGZT?I`V;9Mv`)urD$BGUnG_i)_mFN5*neRUZ}rSX>goXYJD%o2>s+k13Q<&`+(Eh@`Z=u6L|+X{-R;7D*V9Y~c@ODdM9id!K$(WEo8w*T;&trvrJB~HQ*6Y3=e-kG_rq!|%ajSJv^!AF!RChWF2c12dpAez^wMcoV88p`B{s%jwU%XaC%1M6%1PMlRo;iNyRf&0^`f72s>N6hct7e-$7(L^G?Z@b43xV_w{ZD`XbJ+6c~~uY-Hp{=TeK@st{~kH^%&{?BZ}0~gQQyv`7W}}!XK<1fie`Ean1YOWC=EHqh?wYG5fKa@GeL<2CKm=>jedAN1)t^tySXj5jLT;=71GB+B&Q@K5`y68>_`!<sB%q@c$5puw^dv5LTpni?JH<P8Dz`*_TW0Ri1$|9BZx_;ymtQv~G^bi9CeWipLPFCbKT=-lIGN<yQQSHLv3Tk0jEm9>!|MV;WYQxyUO}W&pQ2kJ*YX6QJiNB4O5HHM7-u+-+EmMwdsR3<SQ1|B3RWXyI}ZulZQ*cnrmAbYSek<Pj)y@jv)kfd4;=h?qyQ8uFM$y0`s%6+2KS;UDB?tXXGU<gti!ifvd8ZFU|v7pvK5Vh74Cz*y%oPvCFV5s{-U!D`84ELOA8#0-=<_y@NLcs$}5L^|2ySWS7{g4J#mu>$2Z;AWt|<CvYmzwtkz7Lo34#cFD&<Cy+f?Vc860I>q)CSa!Xn0fdgB#B7x7T|w7e<oJLnZ*c{5%>qQ98F0el9zc{jd|RJ)p8~=0_6r^iu0H!fwd8?Eh5KTi`AIN6s(pr$r>o*fg7F2ynz3Q6%n5&v0C%E5v%FcvIffa_!bu01N;Zrm+`tH(z|_Ft?h9fGY+fi)UpK1#1t2Q3Rsxonj#WzAy#u9*JHJvN|r#m4jARwe-r*6PDHYK3ah<PqsXxEdfGraAGp?e%rn5Ul-CoHbe3VY=W#7o<8EmKWe&c(lhwe}DX%3W**uNaV5m`~?4C^%D5LSu5&JCug^ENZjx|^fdd$XZ-6c(+%)<8q;7a^IjEKbbELMx5#*$+GS#O{WNpX?qfDO)LL?o^a_!nNEg>z15Z=lQsCOh_jA9&t*4H3!5^H@!WnvC-uJ#U~~<J|uRbax_B78~$)&$?>f6DTvBCtr`|h!rWD`B-g+x(3ID)}BDQ%CRrlYt(uHP^4Ve;-5Aoxb{N>WgKv|V*uOGTqh!BwE*87&Q}xo&R%GsOvAU@*h1iK$NnPHK5yfDr*1fbi}r;CN}te^9pOdi{vy&|-Wr{TWkIh(0_93zs^h|oP@ssE-HZ4pw4RD(L9aps#p7k?{vuKgZ>?qyltK9JPSyY~IrbNk;=F|K9lNPmCiLh;f%08og5!cq@ULDbBE{H@Z;`zTSSIu+Bv3*fL@NM_RLv5sc0;8OlwrVSjtjj4EOqQJBE?&Z)o!TEux#j7Z-Me1;9SRrJcAOE^6=E|xmY%I>qLPPY6rSI5vi)BSPh4A2TB)kspA5#0jnJQi%5B_!fH6wrC3HBr>8)f0-Wc#fM+lwQa+v<K93$&3+*jXLTv%waO^K4<?{ws%b{F>a*5-_{{=pD>@Ona^C4Etp}Nh8?gC|ePdoR(GYAnWFK?h6w+?c5fiel`7kJX$z?+Uih)8+8iPdz7eppr<rMp16*fD@*zz2@~MWnnwz_+^Raaqw_pj_lQp_UdEsTWU8AD0!!2FgU>LdOZ;a_lQ2<>#sC3$e^N?ASoLz;UwG&Wnpk`Mrg29ps}j<Jds?w&O(0f&GsCMWp=pW3?UXsLaR`DDOD-6_M)j)OL@7at6N1lvX(Q6_M)j)b<1{JAk7DWgI=c@Y9Wzz`Kr%ib!?5i`96DE{<5U=g2@A>$u>1j(tU>dOS6LI6Kk?%Kseuib(Z%YP{P(8J*L`M5KB=HGVidnt{?qc%XcSCQ}lryH!}NhZs%r{IwY<qkzGI2d^Rg1tJltrrm_E*)tf+ki&s;w&Ox;9s7z%b$M$2Y-k0_$eb=BBGu)o^^wpDlo5^t*E{wVk?Qi)`Uq$R%2|O2?RH*7M5=2&;m=FYf>xjm4?JiCu-!Q*5viu_Sj~qR4i+e<17`*v^l^$oiAZ&Y*8G{k=?!e1(*A)5ZA>*J5vi)sn(q$`YXCzXC*R~BkBC&5r{;$?fFX_pK5-64M5@hG^FtbhcgO;4b`C~Fs?AgLgB!r0z@0w_KJ|}BL@Ml4toB0;Y5)TRcisZ*OEn}Bsj7X1uX#MM`L%I~t?9-iA{7@}`=>VupZ0NE%E5?8wT0GxR|7aTaA$SMigc#X+CQ}coD#V6j+BEDk!lOA{Zksiw*q(GnQ|~9Qf;BN|E&hlFL3A3uZ~2dUP5cXUjsNfaA!^XDAJiiYyad1@Xf%T_of_-h*Vo>?SHcY^bOqki<E;Ak!lOA{k{#LPvFj9rW}ljR9k56_i3DX9}$r-4d7tlzM)?)i%7kM*8af;a3FB!&;~dWsh7~&KhOZa4%|7kMPEefCA9XxZUA2e?i~6Op@`H=XzhR10QLv&96HT`h}27H?eA|8{*_SZL`))5FQK*nWrOghmC&goMWkLrYyXP|;cc~^$*e`BK0<4MZ-ej`e>}@=h)8{e*8c7W;jbop76cQK`UtK4&l`kKp5j@uR7C2bKUVu8b~Xr~-p#Y9x`@=nnS_6ByrY3{^6BCJ@rX!;d1`)p1K;u(XE_HWBGu-p`E3n+3wVui4n{<(%~SJR8~BzO9qAvBh*Vf;&F=%YG`}_uT?GB?R6`PxstT?7Pf5Nu2G|^U&?wX~E7B<jV>KUQGuVu60G|XN)CG)o4oXC-X*A(e7kmP(K-uKHh=|mmr`9(?D^NB%4jk*)S467IQ|lX{6(}F)bP*A$E>Eq046Q)fKzPUOI5ZukNZoZ|wH{(SmLZ1&WjC-s@Zd9m39g}uNYzZhYCXhyl4(#H$NWD-ecQ3Gh*XcK#t&!5k%6){r;CY5^>}LhaCW2(lnWgDib(Z%YP{P(Swr}AkQ0Fm9Tyal>bMZA@esSQ>;R4ql+S=wj*DL8*jGfV!&BR<u<QVi4itd@IZkx3V_y-e4o__#l^IzAWfIWOvA>9vUq7t2L-iUc?>SC19=OD@zlfCIC0K2TIw~`c4V0C@yUvS?NPT!}`dutD4m&nb09H6oIK{EAh?JkFrjN^t?gHf<=f%%+>@OnabsoMzIW8-@3zX%+{=gG<0hc-kAR^^;Dd8{v?#Hs?DBT6hYTzx$Aim?+S47IoQ_F8*S#gx^0;RdLXAtK)_7{=zITwGR9H*y1S>`zLFyJ!B{vuL7ml3{(G4zlTy#>k#j+1}av9E}fkEez|z!@mJfj6Cl(WFZv)ieQLpu9;BFB10@C;<O;Two9|)v>>bl*d%8hC}t34JQhe4;>e|(y_0Il!vEwKO|+KYysYIT<A)4mm*R%Q}G4L8(21UtG7S_c+GL4KEO1`{vuMmX;|%s>NOKW0>v}w(llVWV}B7T&TxD;0jtOuC_8|qjth<hu6FD%BE`9y@U?fqvS3GVJDey`0A6ui5a253{vuKgZ>^p%3qk|MbC)s$xW=)+h_v4|SgnRyN~AzJ2rO}27!)WXW#_HYC0G{pDkM;vC)@0}_)K83V}B88pUGH_hT2TvO+{#+tN~tf3}6T_%dx+Rw9hQ8Mnk>C5o_=CCNxk0UUuvYHt4a=V?-ohWAXp753YSrpezDjbnHJGnC;kKMDjNqtIbd^VznQ{6DZA-d&~hwIgb&Me2l_s(!*8r-auIhyzSWkeBfH=HAEyI*J3pp>TRs%gLwmG8?eB6%ysB4MWkq>uv+w3fYp33Z=f_UvevQxMBw@q*AbC;uE%OI)LQ&E52*rWJuu&S%=P%*84!_p#^L{?J|C-fmo$L_@B*;GvHy7B#+26*k!)_nw_foEtj68a2Fm-u^Uh;#Kued3wA&P{_B@`)YTPYtpa49F?=EEoa8risiHP4#SnY+{fYo*?SpsDx@T~KgoAA9uAR_6_#Q#V9S**5G$r32diwE`iCr$%y2Kr~bu88!mKUQm}IgVL_|0dxmSp#J?@U-)oIlwI$uPY+Gy9Iw&?9+6!Ua?2kKmm9L-_oUEKdfFH6v@X}{C~8UVYQq|j6m50JmoxQ5->NywMFE3bFmupcnYiKOkxBI*kD{e|JV<$Ia5U9nuY(5^+NnN1>K4jD0_ha0Q(%r3<SOh42?7fkxn-htEqvGWA<USyC=o~Vg(9VXWf&|V`c!iMI3`jC%X;b#M59ko2o0eJ23+VY;c|z2LWzHD-MceH4UpJkG1%30(uoYP?iJpoW~3Y?!Y(4rHHf)!D`66YUezxW}}H6C}4y1zV<u|xHE^bh;)KG@qfXw0RJEV6Urk{b^`wfwmOfy6U{*@;x!xpALFf9jqZ#+m^=anY*O3DoyQCXz7LFvKOB)-8iUo0_nXqkaZEhzkyoGqJb{13!7G5fau|z99o>c1jK>nJHgl0@plk*n!#O7<_8;l)_`?yYmAmo(@!f{iq-PaSmplUn?7`2Y&SOr({$ov#KOB)-n2y!RNzUUQCB;0k9(e}}*bm{IgZ3QYhv<2V$g##?wQ-K~xcT`1xVyC@P__b(0PCE`O#^-m^ou?sk!tFP)r7YZbRAZM-fv#r+7T!KuL2LJIPMPMp2%Ynsj7Rhn(%rUtHIp0D^S3GsE1M<cMqECKx8iI{<uCwx<BTrv@=i+VL#kr=WzpopP+}d(z&K%H88+=++wWe4n-eP584?h03QMW#Q!{H9Pm@%qUa+MDYuKT-+k{wdF!xR`zZQ|deQDc0c))JJFwq*+~vT1z{uz$5-F#V*zf%1&g1rDHRf$B&8&z(0c);#FvW4#0YAfk>nBn*1F+w9?*ivwwe?us;e;tFP{4lZG;cfJ4*VSG8+SM&rO_Ar9lt%rvGYjx$2y8417#QRH~bH20qzBU5qCHurSS{wcid|+R#Us;4kuiZfdaO$&|iTSDUSUm_W4qzPVU2gx4l+iwd7fNFS?=w1>kkyeqf{XxV|V<q+Xg~;{7<k5v!rsqmRg`41of+IP+id->RJo`~mn4dZr@P)ff96{sZ<q?Xe51ozx4Q$8^%6Lv8DM32`s*C(?z(1Hhjt@bjZc3InhQuxXx|9KfEpJP>t68I<J?rRf1IP|~;;3l#OKNL7r)erMB!30SR^CQP7wcPL<YCx0OQvytbp&y#5$^oq30McD6nnm!Y--|=5zcPXV&#y|o49Qk|TM=6hg9ed)P<|}EDyiLd2>AfAWP5%IX4eX6JqDa0`^Z<IW7Ymd=zz<R!e>pH1o4hyrQUM|v%*9^x^S+zY^nX}wlrBu5ymu%~gMi;+Gkd483+ozu5dXVFA~E&DrXRS6^skOQg4M&0NMnkw?12InD!(S(ol4VV*vnGhx12>{7=z8UmS%FKrskbVX~P7n5h!4Z{%g`dQvrMP@}KCrinP~sY!28g>v#VH3zO2fL{ueEz#i0Q?Tq~hn{X!0%yA-KcPE>7Lg^#j5B!mmJ~KI1l>!A??e@PQeP`?;Y)ZU`(MKT3#~5tQoV)NZb<uPH>ofTyCHrc)H&qLirhBpO!YuQmyox>K@-Fcq(wo`Xmk8b!{f@K?Yj`VF(^`nC1`60*5kDhaXY5vNt&&IauW%@Gq#@X%<#*y=YxqbTv3GO+6=P8CR^>ne>oUBL>~qa7z`hA;`;>W73)8S~aAsvZ&kF3BNhx0ROQY(60@lR#Q?k#BzZqLZ`f=K@Ad=L=P~bM;R$zF>b1lZYy9=L!Ad5N#3Ru_SPl&UA&m!R8<h%x~RNgG$d%%nc=bDGjv{vZkNHNqUP{1D0HaiisE?>G6`yY88ur}klq+Z5if4JrX12dj$Kdnyg()XBzs8gUc-GOx_##m^5Iq+n%?Tc_esjmLOEy*@1!ui%=-P?uCPM?=L1`60ivL6y}wZRvF{{RakolmM|CU7$_C(`*AV_n;|`x2n8fdbZ@*z8n{VGr<BvMq~rPARu3z)i_^TBLI}JGI-oqF=kzIZ(j56q_B3F+KtTYyzGEo~8y5(WG1BfE$4ufDw_-xsFzcc5REU?t#*D1=hVdJK{N41J5SghKT2t;*0{WPqy(9&pRLM%6>KCIZLTi0tKvRpxMbdB;t8jVvR`8qhP73QNXoWqvXVh=iNrD6T2gNn>r~_nr30&1Z8=hygTn>4{ztAubQi3EOysA2RJ|SxtCzy;B-_!Qzr%rSXbk%SeIj#_b$4#9{VL)0K6Uf+!DuR><`N<V07ejZ^gQ;pTN4WJ4&YpO4AIi+cE1q7~R>1ea-x0vPto-Nw%59{n*>I0PC_|l*73zq0<8etlP2K`8YPGYb*j@2412A|7sO%IB+#^6>-|+yR(*7XZ6mUu2BgJl$J@fIwAY#bd5FGXX_=v(wwd#W-9iaY#Qljm_Lzyv^uGm=X8xqQJ@@e4%QVpGskNj1YSwDrNF8juhmH=U_o+avh~UFS_`r6=@)XmM&&3_x_26_4#_DwUuy^OTC%+Xe3<j~>gHVFGT^((HYn%oEu+;jy(i~uRgMCscO$TF$s5V<w)sd~fd3}jo4^NcxMmfd2V4q#C)tLz;hJl(?&xQ*ZfWU;0wv6NS{;<5+H}p`*k8kCz+1`Isf(5M11?FnDaqE=rfYAY)e*hAP1md}1&Yr^tef&$+7~QMtFZ@v?_g5}zT4*Ox7&r-)See(56ok>!iU&^bw59cbwf)41xh;SV-Ig<liyd(C$bWF5BOiQt-|hVs;CQlp!)4(yMVYY@E&WiZs!-U?q_jOpky<eR>$S!g2(b1_BnrTvaL_H?L`i%8-ua`Zlkd<9*aGnI-|%zVO`D54(Ig+kEOB{C~*wIzGiNAVwS~j?AHBbY<Y%Fz$aL9-KXR?3tfNUOsuKwEbQU-NZ@Sjqhh<Be}rguGA~3+sbr==iEjqhm3cMUXF|`@=h(MOTd_jgj(vr_Gx@jO*z%WO0AD7@d<!@QTNbtpI34RW9)#U_48h)w8kYQ9S#8F;mS3iW+vM}0K*`TITAi9x3m%J@rL;PgH91xe6e#)YL#uOhD)#VE+GiCOB+bs`gT)S~-V`Y9HHcP6=Ve%zr^NRm)^*(MK;BX4XgY`jr8vWAb$VWkb$?2FA7I_Z%}(Pj#SW)4DNxFxi&h6{vm-R?Vr6x=pH>HPv!l4GeK@tDKq;s3Sa;~fShwhf#SW)5-o?6v-@&?u)e2uS3Y2P?h;@%PJ4q){u3nBj?8Y9bHamgeLoM*7r$DKuGqA6vo1Lc3&eOp~4l0A~v^sm6oxW?Z?q8`81xkH%VO^+aV_m5uurAf%Sl4P^v(Sawhjr&}#=3PkVcokQW8J)Z{!s%8l+JKE_N~%TtebT(_7(QP<lnlm?$=YWZrFan$-p;(zO-gOI|v*Az6QR+9*lm8b<^&}Lg90)+ja+b=dlgz#@&+qo7C9<0}YE;GQ-y-*Z=?k07*qoM6N<$f&"}]}]},{"autogenerated":[{"guid":[3037973649,2521580805,2645691435,133872792],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[-8.2503,-6.0001,-32.7504],"m_extents":[19.0,9.0,19.0]},"packedVertices":[47172,16383,16383,49150,16383,18108,49150,16383,25735,43976,16383,30443,44149,16383,16383,42252,16383,18108,43976,16383,36950,18108,16383,20233,20369,16383,18108,18108,16383,40110,47425,16383,40400,47425,16383,46957,45233,16383,49150,40563,16383,49150,38906,16383,45701,26378,16383,45701,26378,16383,47425,16383,16383,47425,16383,16383,40110,38906,16383,47425,47425,38956,40400,47425,38956,46957,47425,16383,46957,47425,16383,40400,47425,38956,40400,47425,16383,40400,43976,16383,36950,43976,38956,36950,43976,45145,28127,43976,45145,39142,43976,38956,39142,43976,38956,36950,43976,38956,30443,43976,16383,36950,43976,38956,28127,43976,16383,30443,43976,16383,30443,49150,16383,25735,49150,38956,25735,43976,38956,30443,49150,38956,18108,49150,38956,25735,49150,16383,25735,49150,16383,18108,49150,38956,18108,49150,16383,18108,47172,16383,16383,47172,38956,16383,47172,38956,16383,47172,16383,16383,44149,16383,16383,44149,38956,16383,44149,38956,16383,44149,16383,16383,42252,16383,18108,42252,38956,18108,45701,49150,18108,45701,38956,18108,42252,38956,18108,36309,38956,18108,36309,46237,18108,29468,46237,18108,24144,46237,18108,18108,46237,18108,18108,49150,18108,29468,38956,18108,24144,38956,18108,42252,16383,18108,20369,16383,18108,20369,38956,18108,20369,38956,18108,20369,16383,18108,18108,16383,20233,18108,38956,20233,18108,16383,20233,18108,16383,40110,18108,38956,40110,18108,48786,34060,18108,48786,29748,18108,49150,29748,18108,38956,23789,18108,38956,20233,18108,49150,18108,18108,46237,23789,18108,46237,18108,18108,38956,45701,18108,49150,45701,18108,49150,34060,18108,38956,40110,18108,16383,40110,16383,16383,40110,16383,38956,40110,16383,16383,40110,16383,16383,47425,16383,38956,47425,16383,38956,40110,16383,38956,47425,16383,16383,47425,26378,16383,47425,26378,38956,47425,26378,38956,45701,26378,38956,47425,26378,16383,47425,26378,16383,45701,26378,38956,45701,26378,16383,45701,38906,16383,45701,38906,38956,45701,18108,49150,45701,18108,38956,45701,45701,38956,45701,29748,48786,45701,29748,49150,45701,45701,49150,45701,34060,48786,45701,34060,49150,45701,38906,16383,45701,38906,16383,47425,38906,38956,47425,38906,38956,45701,38906,16383,47425,40563,16383,49150,40563,38956,49150,38906,38956,47425,40563,16383,49150,45233,16383,49150,45233,38956,49150,40563,38956,49150,47425,38956,46957,45233,38956,49150,45233,16383,49150,47425,16383,46957,45233,38956,49150,47425,38956,46957,47425,38956,40400,45701,38956,45701,38906,38956,45701,40563,38956,49150,38906,38956,47425,43976,38956,36950,45701,38956,40866,43976,38956,39142,45701,45145,40866,45701,38956,40866,43976,38956,39142,43976,45145,39142,43976,45145,28127,45701,45145,26556,45701,45145,40866,43976,45145,39142,43976,45145,28127,43976,38956,28127,45701,38956,26556,45701,45145,26556,49150,38956,25735,49150,38956,18108,45701,38956,26556,43976,38956,30443,47172,38956,16383,43976,38956,28127,44149,38956,16383,45701,38956,18108,42252,38956,18108,45701,49150,18108,45701,49150,29748,45701,48786,29748,45701,45145,26556,45701,38956,26556,45701,38956,18108,45701,49150,45701,45701,38956,45701,45701,45145,40866,45701,49150,34060,45701,48786,34060,45701,38956,40866,18108,49150,29748,45701,49150,29748,45701,49150,18108,18108,49150,18108,18108,46237,18108,18108,46237,23789,24144,46237,18108,24144,46237,18108,24144,38956,18108,18108,38956,23789,18108,46237,23789,18108,38956,23789,24144,38956,18108,20369,38956,18108,18108,38956,20233,18108,49150,29748,18108,48786,29748,45701,48786,29748,45701,49150,29748,29748,48786,45701,34060,48786,45701,34060,48786,34060,45701,48786,34060,45701,48786,29748,18108,48786,29748,29748,48786,34060,18108,48786,34060,29748,49150,34060,29748,48786,34060,18108,48786,34060,18108,49150,34060,18108,49150,45701,29748,49150,45701,29748,49150,34060,18108,49150,34060,16383,38956,47425,26378,38956,47425,26378,38956,45701,18108,38956,45701,18108,38956,40110,16383,38956,40110,29748,49150,34060,29748,49150,45701,29748,48786,45701,29748,48786,34060,34060,48786,34060,34060,48786,45701,34060,49150,45701,34060,49150,34060,34060,49150,45701,45701,49150,45701,45701,49150,34060,34060,49150,34060,45701,49150,34060,45701,48786,34060,34060,48786,34060,34060,49150,34060,46994,49150,26880,46994,49150,29749,46994,48422,29749,46994,48422,26990,46994,38956,20688,46994,38956,20093,45701,49150,26880,46994,49150,26880,46994,38956,20093,45701,38956,20093,46994,38956,20093,46994,38956,20688,45701,38956,20688,45701,38956,20093,45701,38956,20688,46994,38956,20688,46994,48422,26990,45701,48422,26990,46994,48422,26990,46994,48422,29749,45701,48422,29749,45701,48422,26990,45701,49150,29749,45701,48422,29749,46994,48422,29749,46994,49150,29749,45701,49150,29749,46994,49150,29749,46994,49150,26880,45701,49150,26880,47172,16383,16383,47172,16383,16383,49150,16383,25735,43976,16383,30443,43976,16383,30443,43976,16383,30443,44149,16383,16383,42252,16383,18108,42252,16383,18108,42252,16383,18108,42252,16383,18108,43976,16383,36950,43976,16383,36950,43976,16383,36950,20369,16383,18108,20369,16383,18108,20369,16383,18108,20369,16383,18108,18108,16383,40110,18108,16383,40110,18108,16383,40110,47425,16383,40400,45233,16383,49150,45233,16383,49150,40563,16383,49150,40563,16383,49150,40563,16383,49150,38906,16383,45701,38906,16383,45701,38906,16383,45701,26378,16383,45701,26378,16383,47425,26378,16383,47425,16383,16383,47425,47425,38956,40400,47425,16383,46957,47425,38956,40400,43976,16383,36950,43976,45145,28127,43976,45145,28127,43976,45145,28127,43976,38956,39142,43976,38956,36950,43976,38956,36950,43976,38956,30443,43976,38956,30443,43976,38956,30443,43976,16383,36950,43976,16383,30443,49150,38956,25735,49150,38956,18108,49150,16383,25735,49150,38956,18108,47172,16383,16383,47172,38956,16383,44149,16383,16383,44149,38956,16383,42252,16383,18108,45701,49150,18108,45701,49150,18108,45701,49150,18108,45701,49150,18108,45701,49150,18108,45701,49150,18108,42252,38956,18108,42252,38956,18108,42252,38956,18108,42252,38956,18108,36309,38956,18108,36309,38956,18108,36309,38956,18108,36309,46237,18108,29468,46237,18108,29468,46237,18108,29468,46237,18108,24144,46237,18108,24144,46237,18108,18108,46237,18108,29468,38956,18108,29468,38956,18108,24144,38956,18108,24144,38956,18108,20369,16383,18108,20369,38956,18108,20369,38956,18108,20369,38956,18108,20369,38956,18108,18108,16383,20233,18108,16383,20233,18108,16383,20233,18108,16383,20233,18108,16383,20233,18108,16383,20233,18108,38956,40110,18108,38956,40110,18108,38956,40110,18108,38956,40110,18108,48786,34060,18108,48786,34060,18108,48786,29748,18108,49150,29748,18108,49150,29748,18108,49150,29748,18108,38956,23789,18108,38956,23789,18108,49150,18108,18108,46237,23789,18108,46237,23789,18108,49150,45701,18108,49150,34060,18108,38956,40110,16383,16383,40110,16383,16383,40110,16383,38956,47425,16383,38956,47425,26378,16383,47425,26378,38956,45701,26378,16383,47425,26378,38956,45701,26378,38956,45701,26378,38956,45701,38906,16383,45701,38906,38956,45701,38906,38956,45701,18108,49150,45701,18108,49150,45701,18108,49150,45701,18108,49150,45701,45701,38956,45701,45701,38956,45701,45701,38956,45701,29748,48786,45701,29748,48786,45701,45701,49150,45701,34060,48786,45701,34060,48786,45701,38906,16383,45701,38906,38956,47425,38906,16383,47425,40563,38956,49150,40563,16383,49150,45233,38956,49150,47425,38956,46957,45233,16383,49150,45233,38956,49150,45233,38956,49150,45233,38956,49150,47425,38956,40400,47425,38956,40400,47425,38956,40400,45701,38956,45701,45701,38956,45701,38906,38956,45701,38906,38956,45701,40563,38956,49150,43976,38956,36950,45701,38956,40866,45701,38956,40866,45701,45145,40866,43976,38956,39142,43976,45145,28127,45701,45145,40866,43976,45145,28127,45701,38956,26556,49150,38956,25735,49150,38956,18108,45701,38956,26556,45701,38956,26556,45701,38956,26556,45701,38956,26556,43976,38956,30443,47172,38956,16383,47172,38956,16383,44149,38956,16383,45701,38956,18108,45701,38956,18108,45701,49150,18108,45701,49150,18108,45701,49150,18108,45701,48786,29748,45701,48786,29748,45701,45145,26556,45701,45145,26556,45701,45145,26556,45701,38956,26556,45701,49150,45701,45701,38956,45701,45701,45145,40866,45701,45145,40866,45701,45145,40866,45701,45145,40866,45701,49150,34060,45701,48786,34060,45701,48786,34060,18108,49150,29748,45701,49150,18108,24144,46237,18108,18108,38956,23789,18108,38956,23789,20369,38956,18108,18108,49150,29748,45701,48786,29748,29748,48786,45701,34060,48786,34060,34060,48786,34060,34060,48786,34060,34060,48786,34060,45701,48786,29748,18108,48786,29748,18108,48786,29748,29748,48786,34060,29748,48786,34060,29748,49150,34060,18108,48786,34060,18108,49150,45701,29748,49150,34060,16383,38956,47425,16383,38956,47425,16383,38956,47425,26378,38956,45701,18108,38956,45701,18108,38956,40110,29748,49150,34060,29748,48786,45701,34060,48786,34060,34060,49150,45701,34060,49150,45701,45701,49150,34060,45701,49150,34060,34060,48786,34060,46994,49150,26880,46994,49150,26880,46994,49150,26880,46994,48422,29749,46994,48422,26990,46994,38956,20688,45701,49150,26880,46994,38956,20093,46994,38956,20093,45701,38956,20688,45701,38956,20688,46994,48422,26990,46994,48422,26990,45701,48422,29749,45701,49150,29749,46994,48422,29749,45701,49150,29749,46994,49150,26880],"packedNormals":[127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,216,127,37,216,127,37,216,127,37,216,127,37,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,212,127,220,212,127,220,212,127,220,212,127,220,254,127,127,254,127,127,254,127,127,254,127,127,210,127,31,210,127,31,210,127,31,210,127,31,127,127,0,127,127,0,127,127,0,127,127,0,41,127,33,41,127,33,41,127,33,41,127,33,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,39,127,34,39,127,34,39,127,34,39,127,34,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,127,127,254,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,0,127,127,35,127,214,35,127,214,35,127,214,35,127,214,127,127,254,127,127,254,127,127,254,127,127,254,216,127,216,216,127,216,216,127,216,216,127,216,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,216,127,37,216,127,37,216,127,37,216,127,37,127,0,127,127,0,127,127,0,127,127,0,127,212,127,220,212,127,220,212,127,220,212,127,220,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,39,127,34,39,127,34,39,127,34,39,127,34,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,230,53,127,230,53,127,230,53,127,230,53,127,0,127,127,0,127,127,0,127,127,0,127,127,23,200,127,23,200,127,23,200,127,23,200,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,216,127,37,216,127,37,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,212,127,220,212,127,220,254,127,127,254,127,127,210,127,31,210,127,31,127,127,0,127,127,0,41,127,33,41,127,33,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,39,127,34,39,127,34,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,0,127,127,0,127,127,127,127,254,127,127,254,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,35,127,214,35,127,214,127,127,254,127,127,254,216,127,216,216,127,216,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,216,127,37,216,127,37,127,0,127,127,0,127,212,127,220,212,127,220,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,39,127,34,39,127,34,127,254,127,127,254,127,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,127,0,127,127,0,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,230,53,127,230,53,127,0,127,127,0,127,127,23,200,127,23,200,127,0,127,127,0,127,127,127,254,127,127,254,127,254,127,127,254,127],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1198,0.9538],[0.1202,0.9545],[0.1203,0.9559],[0.1199,0.9548],[0.1186,0.9548],[0.119,0.9538],[0.1186,0.9544],[0.1199,0.9569],[0.1199,0.9559],[0.1199,0.9563],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1216,0.9606],[0.1224,0.9642],[0.1208,0.9603],[0.1203,0.9588],[0.122,0.9649],[0.1203,0.9598],[0.1212,0.9649],[0.1215,0.9642],[0.1206,0.9642],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1142,0.9613],[0.1155,0.9642],[0.1146,0.9642],[0.1142,0.9631],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1149,0.9544],[0.1164,0.9544],[0.1164,0.9548],[0.115,0.9548],[0.115,0.9559],[0.1146,0.9559],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1211,0.9689],[0.1208,0.9674],[0.1208,0.967],[0.1211,0.9682],[0.1216,0.9628],[0.1216,0.9631],[0.1208,0.9689],[0.1211,0.9689],[0.1216,0.9631],[0.1212,0.9631],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1212,0.9628],[0.1216,0.9628],[0.1211,0.9682],[0.1208,0.9682],[0.1211,0.9682],[0.1208,0.967],[0.1207,0.967],[0.1208,0.9682],[0.1207,0.9674],[0.1207,0.967],[0.1208,0.967],[0.1208,0.9674],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1198,0.9538],[0.1198,0.9538],[0.1198,0.9538],[0.1203,0.9559],[0.1203,0.9559],[0.1203,0.9559],[0.1199,0.9548],[0.1199,0.9548],[0.1186,0.9548],[0.1186,0.9548],[0.119,0.9538],[0.1199,0.9569],[0.1199,0.9559],[0.1199,0.9559],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1216,0.9606],[0.1224,0.9642],[0.1208,0.9603],[0.1208,0.9603],[0.1208,0.9603],[0.1208,0.9603],[0.1203,0.9588],[0.122,0.9649],[0.122,0.9649],[0.1212,0.9649],[0.1215,0.9642],[0.1215,0.9642],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1142,0.9613],[0.1146,0.9642],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1149,0.9544],[0.1149,0.9544],[0.1149,0.9544],[0.1164,0.9548],[0.115,0.9548],[0.115,0.9559],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1211,0.9689],[0.1211,0.9689],[0.1211,0.9689],[0.1208,0.967],[0.1211,0.9682],[0.1216,0.9628],[0.1208,0.9689],[0.1216,0.9631],[0.0,0.0],[0.0,0.0],[0.1212,0.9628],[0.1211,0.9682],[0.1211,0.9682],[0.1207,0.967],[0.1207,0.9674],[0.1208,0.967],[0.0,0.0],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,264,3,262,265,4,263,266,5,268,267,6,269,7,8,9,10,11,12,284,273,283,285,13,274,286,270,275,287,14,271,289,276,272,290,15,277,292,16,278,293,280,279,294,17,281,295,18,282,19,291,288,20,21,22,297,23,296,24,25,26,299,27,298,28,29,30,303,31,300,304,32,301,305,33,306,307,34,302,35,308,309,36,37,38,311,39,310,40,41,42,313,43,312,44,45,46,315,47,314,48,49,50,317,51,316,52,53,54,319,55,318,56,57,58,326,59,320,330,60,321,333,61,322,334,62,323,337,63,324,339,64,325,335,65,66,342,338,336,327,67,68,344,69,328,345,331,329,346,340,332,347,343,341,70,71,72,349,73,348,74,75,76,355,77,350,359,78,351,361,79,352,362,80,353,365,81,354,363,82,83,368,366,364,367,84,369,356,85,86,370,87,357,371,360,358,88,89,90,373,91,372,92,93,94,375,95,374,96,97,98,377,99,376,100,101,102,379,103,378,104,105,106,383,107,380,108,109,381,382,384,386,385,110,387,390,111,388,393,112,389,391,113,114,396,394,392,395,115,397,116,117,118,399,119,398,120,121,122,401,123,400,124,125,126,403,127,402,128,129,130,405,131,404,132,133,134,409,135,406,412,136,407,414,137,408,415,138,416,410,139,140,418,413,411,417,141,419,142,143,144,421,145,420,146,147,148,423,149,422,150,151,152,425,153,424,154,155,156,428,157,426,427,158,429,430,159,432,433,160,161,436,431,434,435,162,437,163,164,165,441,166,438,443,167,439,446,168,440,169,170,171,449,172,447,450,173,453,451,444,454,445,442,455,174,452,448,175,176,177,457,178,456,179,180,181,182,183,184,459,185,458,186,187,188,461,189,460,190,191,192,463,193,462,194,195,196,465,197,198,469,199,466,470,200,467,472,464,468,471,201,473,202,203,204,475,205,474,206,207,208,477,209,476,210,211,212,481,213,478,482,214,479,483,215,480,216,217,218,485,219,484,220,221,222,487,223,486,224,225,226,489,227,488,228,229,230,491,231,490,232,233,234,495,235,492,496,236,493,497,237,494,238,239,240,499,241,498,242,243,244,501,245,500,246,247,248,503,249,502,250,251,252,505,253,504,254,255,256,507,257,506,258,259,260,509,261,508]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[1622594793,1226985218,2459851158,468302353],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[0.0,0.0,0.0],"m_extents":[200.0,0.5,200.0]},"packedVertices":[49150,49150,49150,16383,49150,49150,49150,16383,49150,16383,16383,49150,49150,16383,16383,16383,16383,16383,49150,49150,16383,16383,49150,16383,49150,16383,49150,16383,16383,49150,49150,16383,16383,16383,16383,16383,49150,16383,49150,49150,16383,16383,49150,49150,49150,49150,49150,16383,16383,49150,49150,16383,49150,16383,16383,16383,49150,16383,16383,16383,49150,49150,16383,16383,49150,16383,49150,49150,49150,16383,49150,49150,16383,49150,49150,49150,16383,49150,16383,16383,16383,49150,49150,16383,16383,16383,49150,49150,16383,16383,49150,16383,16383,49150,49150,49150,16383,49150,16383,16383,16383,49150,16383,49150,16383,49150,49150,49150],"packedNormals":[127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,0,127,127,0,127,0,127,127,0,127,254,127,127,254,127,127,0,127,127,0,127,127,127,254,127,127,254,127],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,24,3,25,4,5,6,26,7,27,8,9,10,28,11,29,12,13,14,30,15,31,16,17,18,32,19,33,20,21,22,34,23,35]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[1940847020,2248952508,2340679954,660790013],"revisions":[{"type":"kByteStream","name":"internal","revision":-1,"autoGenerated":true,"rawdata":""}]},{"guid":[4185477594,3193324454,3115813353,785158363],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[5.9608,-4.9991,-13.1064],"m_extents":[17.9999,9.0,17.0]},"packedVertices":[27108,48391,49114,40840,44751,49114,40840,48391,49114,27108,48391,47186,27108,44751,49114,27108,48391,49114,40840,48391,47186,27108,44751,47186,27108,48391,47186,40840,48391,49114,40840,44751,47186,40840,48391,47186,27108,48391,47186,40840,48391,49114,40840,48391,47186,27108,44751,49114,40840,44751,47186,40840,44751,49114,27108,38982,49114,40840,35342,49114,40840,38982,49114,27108,38982,47186,27108,35342,49114,27108,38982,49114,40840,38982,47186,27108,35342,47186,27108,38982,47186,40840,38982,49114,40840,35342,47186,40840,38982,47186,27108,38982,47186,40840,38982,49114,40840,38982,47186,27108,35342,49114,40840,35342,47186,40840,35342,49114,37970,45485,47071,39790,37327,49043,39790,45485,49043,26451,45485,47115,27130,37327,49043,27130,45485,49043,27119,45485,47115,26451,37327,47115,26451,45485,47115,39790,45485,49043,40672,37327,47115,40672,45485,47115,39776,45485,47115,39790,45485,49043,40672,45485,47115,39776,37327,47115,40672,37327,47115,39790,37327,49043,27119,37327,47115,28220,37327,47096,27130,37327,49043,27130,37327,49043,28220,45485,47096,27130,45485,49043,27130,45485,49043,27119,45485,47115,26451,45485,47115,39776,37327,47115,39776,45485,47115,40672,37327,47115,40672,45485,47115,28220,45485,47096,39776,45485,47115,27119,45485,47115,28220,37327,47096,37970,45485,47071,28220,45485,47096,27119,37327,47115,37970,37327,47071,28220,37327,47096,28945,45145,47223,28945,38956,47223,37957,38956,47223,37957,45145,47223,37957,45145,47223,39777,45145,49150,27124,45145,49150,28945,45145,47223,37957,38956,47223,39777,38956,49150,39777,45145,49150,37957,45145,47223,27124,38956,49150,39777,38956,49150,37957,38956,47223,28945,38956,47223,27124,45145,49150,27124,38956,49150,28945,38956,47223,28945,45145,47223,49150,49150,18310,49150,16383,18310,28472,16383,18310,28472,38956,18310,24628,38956,18310,36862,48786,18310,36862,49150,18310,24628,49150,18310,32311,48786,18310,32311,49150,18310,28472,38956,18310,28472,16383,18310,26651,16383,16383,26651,38956,16383,18203,16383,19661,21299,16383,16383,20024,16383,26014,18203,16383,24086,28472,16383,18310,49150,16383,18310,49150,16383,49150,24746,16383,49150,26651,16383,16383,20024,16383,45017,20024,16383,36884,17798,16383,36884,18203,16383,45017,16383,16383,43149,16383,16383,38383,49150,49150,18310,49150,49150,49150,49150,45145,49150,49150,16383,49150,49150,16383,18310,36862,49150,49150,49150,49150,49150,49150,49150,18310,36862,49150,18310,36862,48786,18310,36862,48786,49150,36862,49150,49150,36862,49150,18310,20024,48786,36140,32311,48786,36140,32311,48786,31321,20024,48786,31321,32311,48786,49150,36862,48786,49150,36862,48786,18310,32311,48786,18310,32311,49150,18310,32311,49150,31321,32311,48786,31321,32311,48786,18310,20024,49150,31321,32311,49150,31321,32311,49150,18310,24628,49150,18310,20024,49150,23185,24628,38956,18310,20024,38956,23185,20024,49150,23185,24628,49150,18310,18203,38956,24086,20024,38956,26014,20024,38956,23185,24628,38956,18310,28472,38956,18310,26651,38956,16383,21299,38956,16383,18203,38956,19661,26651,38956,16383,26651,16383,16383,21299,16383,16383,21299,38956,16383,18203,38956,45017,18203,16383,45017,20024,16383,45017,20024,38956,45017,20024,38956,45017,20024,16383,45017,24746,16383,49150,24746,46237,49150,20024,46237,45017,24746,16383,49150,49150,16383,49150,27124,38956,49150,24746,46237,49150,27124,45145,49150,39777,45145,49150,20024,49150,49150,20024,46237,49150,32311,48786,49150,32311,49150,49150,49150,45145,49150,39777,38956,49150,49150,49150,49150,36862,48786,49150,36862,49150,49150,21299,16383,16383,18203,16383,19661,18203,38956,19661,21299,38956,16383,18203,16383,19661,18203,16383,24086,18203,38956,24086,18203,38956,19661,18203,38956,24086,18203,16383,24086,20024,16383,26014,20024,38956,26014,20024,38956,36884,20024,38956,45017,20024,46237,45017,20024,16383,26014,20024,16383,36884,20024,48786,36140,20024,48786,31321,20024,49150,31321,20024,38956,26014,20024,49150,23185,20024,38956,23185,20024,46237,49150,20024,49150,49150,20024,49150,36140,20024,38956,36884,20024,16383,36884,17798,16383,36884,17798,38956,36884,17798,16383,36884,16383,16383,38383,16383,38956,38383,17798,38956,36884,16383,16383,38383,16383,16383,43149,16383,38956,43149,16383,38956,38383,16383,38956,43149,16383,16383,43149,18203,16383,45017,18203,38956,45017,32311,49150,36140,32311,49150,49150,32311,48786,49150,32311,48786,36140,32311,49150,36140,32311,48786,36140,20024,48786,36140,20024,49150,36140,20024,49150,31321,20024,48786,31321,32311,48786,31321,32311,49150,31321,18203,38956,45017,20024,38956,45017,20024,38956,36884,17798,38956,36884,16383,38956,43149,16383,38956,38383,20024,46237,49150,20024,46237,45017,24746,46237,49150,20024,49150,49150,32311,49150,49150,32311,49150,36140,20024,49150,36140,18658,49150,46131,20024,49150,46131,20024,38956,38594,18658,38956,38594,18658,49150,49150,20024,49150,46131,18658,49150,46131,18658,48422,46255,18658,48422,49150,18658,49150,49150,18658,49150,46131,18658,38956,39256,18658,38956,38594,18658,38956,38594,20024,38956,38594,20024,38956,39256,18658,38956,39256,18658,49150,49150,18658,48422,49150,20024,48422,49150,18658,38956,39256,20024,38956,39256,20024,48422,46255,18658,48422,46255,18658,48422,46255,20024,48422,46255,20024,48422,49150,18658,48422,49150,27108,44751,49114,27108,44751,47186,40840,44751,47186,40840,44751,49114,27108,48391,49114,27108,44751,47186,27108,35342,49114,27108,35342,47186,40840,35342,47186,40840,35342,49114,27108,38982,49114,27108,35342,47186,37970,37327,47071,26451,37327,47115,27119,37327,47115,39790,37327,49043,37970,45485,47071,37970,37327,47071,26451,37327,47115,28220,37327,47096,28220,45485,47096,37970,45485,47071,37970,37327,47071,39776,37327,47115,27108,48391,49114,40840,44751,49114,27108,48391,47186,27108,44751,49114,40840,48391,47186,27108,44751,47186,40840,48391,49114,40840,44751,47186,27108,48391,47186,40840,48391,49114,27108,44751,49114,40840,44751,47186,27108,38982,49114,40840,35342,49114,27108,38982,47186,27108,35342,49114,40840,38982,47186,27108,35342,47186,40840,38982,49114,40840,35342,47186,27108,38982,47186,40840,38982,49114,27108,35342,49114,40840,35342,47186,37970,45485,47071,39790,37327,49043,26451,45485,47115,27130,37327,49043,27119,45485,47115,27119,45485,47115,27119,45485,47115,26451,37327,47115,39790,45485,49043,40672,37327,47115,39776,45485,47115,39790,45485,49043,39776,37327,47115,39790,37327,49043,27119,37327,47115,27130,37327,49043,27130,37327,49043,28220,45485,47096,27130,45485,49043,27119,45485,47115,39776,37327,47115,39776,37327,47115,39776,45485,47115,39776,45485,47115,40672,37327,47115,28220,45485,47096,39776,45485,47115,28220,37327,47096,37970,45485,47071,27119,37327,47115,37970,37327,47071,28945,45145,47223,37957,38956,47223,37957,45145,47223,27124,45145,49150,37957,38956,47223,39777,45145,49150,27124,38956,49150,37957,38956,47223,27124,45145,49150,28945,38956,47223,49150,49150,18310,49150,49150,18310,49150,49150,18310,49150,49150,18310,28472,16383,18310,28472,38956,18310,24628,38956,18310,24628,38956,18310,24628,38956,18310,36862,48786,18310,36862,48786,18310,24628,49150,18310,32311,48786,18310,32311,48786,18310,28472,38956,18310,26651,16383,16383,18203,16383,19661,21299,16383,16383,21299,16383,16383,21299,16383,16383,20024,16383,26014,20024,16383,26014,20024,16383,26014,28472,16383,18310,28472,16383,18310,49150,16383,49150,24746,16383,49150,24746,16383,49150,24746,16383,49150,26651,16383,16383,20024,16383,45017,20024,16383,45017,20024,16383,45017,20024,16383,45017,20024,16383,36884,17798,16383,36884,17798,16383,36884,17798,16383,36884,18203,16383,45017,16383,16383,43149,49150,49150,18310,49150,45145,49150,49150,45145,49150,49150,16383,18310,36862,49150,49150,49150,49150,18310,36862,48786,18310,36862,49150,49150,20024,48786,36140,32311,48786,36140,32311,48786,36140,32311,48786,31321,32311,48786,31321,32311,48786,49150,32311,48786,49150,36862,48786,18310,32311,48786,18310,32311,48786,18310,32311,49150,18310,32311,48786,31321,20024,49150,31321,20024,49150,31321,32311,49150,18310,24628,49150,18310,24628,38956,18310,20024,49150,23185,18203,38956,24086,20024,38956,23185,20024,38956,23185,20024,38956,23185,24628,38956,18310,24628,38956,18310,26651,38956,16383,21299,38956,16383,21299,38956,16383,18203,38956,19661,26651,38956,16383,21299,16383,16383,18203,38956,45017,20024,16383,45017,20024,38956,45017,20024,38956,45017,24746,16383,49150,24746,46237,49150,24746,16383,49150,49150,16383,49150,49150,16383,49150,27124,38956,49150,27124,38956,49150,27124,38956,49150,24746,46237,49150,24746,46237,49150,24746,46237,49150,24746,46237,49150,24746,46237,49150,24746,46237,49150,24746,46237,49150,27124,45145,49150,39777,45145,49150,39777,45145,49150,39777,45145,49150,20024,49150,49150,20024,49150,49150,20024,49150,49150,32311,48786,49150,32311,48786,49150,49150,45145,49150,49150,45145,49150,39777,38956,49150,39777,38956,49150,49150,49150,49150,49150,49150,49150,49150,49150,49150,36862,48786,49150,36862,48786,49150,21299,16383,16383,18203,38956,19661,18203,16383,19661,18203,38956,24086,18203,38956,24086,20024,16383,26014,20024,38956,36884,20024,38956,36884,20024,38956,36884,20024,38956,36884,20024,46237,45017,20024,46237,45017,20024,46237,45017,20024,16383,26014,20024,16383,26014,20024,16383,26014,20024,16383,26014,20024,48786,36140,20024,48786,36140,20024,48786,31321,20024,49150,31321,20024,49150,31321,20024,38956,26014,20024,38956,26014,20024,49150,23185,20024,49150,49150,20024,49150,36140,20024,49150,36140,20024,38956,36884,17798,16383,36884,17798,16383,36884,16383,38956,38383,16383,16383,38383,16383,38956,43149,16383,38956,43149,18203,16383,45017,32311,49150,36140,32311,48786,49150,32311,49150,36140,20024,48786,36140,20024,49150,31321,32311,48786,31321,18203,38956,45017,18203,38956,45017,20024,38956,36884,17798,38956,36884,17798,38956,36884,16383,38956,43149,20024,49150,49150,20024,49150,49150,32311,49150,36140,18658,49150,46131,20024,38956,38594,18658,49150,49150,20024,49150,46131,18658,48422,46255,18658,48422,46255,18658,49150,49150,18658,49150,46131,18658,49150,46131,18658,38956,39256,18658,38956,38594,20024,38956,39256,18658,49150,49150,20024,48422,49150,18658,38956,39256,20024,48422,46255,18658,48422,46255,20024,48422,49150,27119,37327,47115],"packedNormals":[127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,36,127,215,36,127,215,36,127,215,8,127,171,8,127,171,8,127,171,127,127,0,127,127,0,127,127,0,241,127,182,241,127,182,241,127,182,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,236,127,191,236,127,191,236,127,191,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,127,253,127,127,253,127,127,253,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,37,127,216,37,127,216,37,127,216,37,127,216,127,254,127,127,254,127,127,254,127,127,254,127,216,127,216,216,127,216,216,127,216,216,127,216,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,216,127,37,216,127,37,216,127,37,216,127,37,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,37,127,37,37,127,37,37,127,37,37,127,37,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,46,127,224,46,127,224,46,127,224,46,127,224,46,127,224,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,37,127,37,37,127,37,37,127,37,37,127,37,0,127,127,0,127,127,0,127,127,0,127,127,37,127,216,37,127,216,37,127,216,37,127,216,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,37,127,37,37,127,37,37,127,37,37,127,37,0,127,127,0,127,127,0,127,127,0,127,127,38,127,218,38,127,218,38,127,218,38,127,218,254,127,127,254,127,127,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,127,230,53,127,230,53,127,230,53,127,230,53,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,23,200,127,23,200,127,23,200,127,23,200,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,0,127,127,127,127,0,254,127,127,127,254,127,127,0,127,127,127,254,0,127,127,127,127,0,254,127,127,127,254,127,127,0,127,36,127,215,8,127,171,127,127,0,241,127,182,127,254,127,127,0,127,127,0,127,236,127,191,127,254,127,127,0,127,127,127,253,127,254,127,127,127,254,127,127,254,0,127,127,0,127,127,127,127,0,127,127,0,254,127,127,254,127,127,127,254,127,127,254,127,127,0,127,127,0,127,127,127,254,127,127,254,0,127,127,0,127,127,127,127,0,127,127,0,254,127,127,254,127,127,127,254,127,127,254,127,127,0,127,127,0,127,36,127,215,36,127,215,8,127,171,8,127,171,127,127,0,127,127,0,127,127,0,127,127,0,241,127,182,241,127,182,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,236,127,191,236,127,191,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,127,253,127,127,253,127,254,127,127,254,127,127,127,254,127,127,254,127,0,127,127,0,127,37,127,216,37,127,216,127,254,127,127,254,127,216,127,216,216,127,216,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,216,127,37,216,127,37,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,37,127,37,37,127,37,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,254,127,127,254,46,127,224,46,127,224,46,127,224,46,127,224,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,37,127,37,37,127,37,0,127,127,0,127,127,37,127,216,37,127,216,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,37,127,37,37,127,37,0,127,127,0,127,127,38,127,218,38,127,218,254,127,127,254,127,127,127,127,0,127,127,0,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,230,53,127,230,53,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,127,254,127,127,254,127,23,200,127,23,200,127,0,127,127,0,127,127,127,0],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1171,0.9351],[0.1198,0.9351],[0.1199,0.9351],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1142,0.934],[0.115,0.934],[0.1149,0.9337],[0.1162,0.9333],[0.1172,0.9333],[0.1168,0.9333],[0.115,0.9333],[0.1141,0.9336],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.115,0.935],[0.1155,0.935],[0.1154,0.9347],[0.1149,0.9347],[0.1146,0.935],[0.1146,0.9348],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1154,0.9434],[0.1155,0.9434],[0.1155,0.9348],[0.115,0.9348],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1154,0.9427],[0.1154,0.9426],[0.1154,0.943],[0.1154,0.9434],[0.115,0.9348],[0.115,0.9348],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.115,0.9348],[0.1155,0.9348],[0.1155,0.9427],[0.1154,0.9427],[0.1154,0.9427],[0.1155,0.9427],[0.1155,0.9426],[0.1154,0.9426],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1171,0.9351],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1171,0.9351],[0.1198,0.9351],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1142,0.934],[0.1149,0.9337],[0.1149,0.9337],[0.1149,0.9337],[0.1162,0.9333],[0.1162,0.9333],[0.1168,0.9333],[0.115,0.9333],[0.115,0.9333],[0.1141,0.9336],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.115,0.935],[0.115,0.935],[0.1154,0.9347],[0.1149,0.9347],[0.1149,0.9347],[0.1146,0.935],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1154,0.9434],[0.1155,0.9348],[0.0,0.0],[0.0,0.0],[0.1154,0.9427],[0.1154,0.9427],[0.1154,0.943],[0.1154,0.9434],[0.1154,0.9434],[0.115,0.9348],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.115,0.9348],[0.1155,0.9427],[0.1154,0.9427],[0.1155,0.9426],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,342,64,65,360,66,67,68,69,70,71,72,73,74,75,76,77,78,370,79,369,80,81,82,372,83,371,84,85,86,374,87,373,88,89,90,376,91,375,92,93,94,378,95,377,96,97,98,383,99,379,384,100,380,385,101,381,388,102,382,386,103,104,391,389,387,390,105,392,106,107,108,394,109,393,110,111,112,399,113,395,114,115,116,404,117,402,405,118,403,406,396,408,407,119,397,409,400,398,410,120,401,411,121,413,412,122,414,417,123,415,418,124,416,125,126,127,420,128,129,422,419,421,130,131,132,424,133,423,134,135,136,426,137,425,138,139,140,430,141,427,142,143,144,434,145,432,435,428,433,436,431,429,146,147,148,438,149,437,150,151,152,441,153,439,442,154,440,155,156,157,444,158,443,159,160,161,162,163,164,451,165,449,452,446,450,453,166,447,454,445,448,167,168,169,456,170,455,171,172,173,458,174,457,175,176,177,461,178,459,462,179,460,180,181,182,466,183,463,467,184,469,476,185,470,186,187,471,472,188,480,483,189,481,464,190,191,487,468,465,485,477,488,486,192,478,489,473,479,490,193,474,492,484,475,491,194,493,195,196,197,495,198,494,199,200,201,497,202,496,203,204,205,499,206,498,207,208,209,210,211,500,501,212,507,511,213,508,513,214,509,514,215,510,515,216,516,518,217,517,504,218,219,519,220,505,520,502,506,521,512,503,221,222,223,523,224,522,225,226,227,525,228,524,229,230,231,527,232,526,233,234,235,529,236,528,237,238,239,531,240,530,241,242,243,533,244,532,245,246,247,535,248,534,249,250,251,538,252,536,539,253,537,540,254,541,255,256,257,258,259,260,544,261,542,262,263,264,546,265,545,266,543,267,548,268,547,269,270,271,551,272,549,552,273,550,553,274,554,275,276,277,556,278,555,279,280,281,558,482,557,282,283,284,560,285,559,286,287,288,562,289,561,290,315,314,291,317,316,292,319,318,293,321,320,294,323,322,295,325,324,296,327,326,297,329,328,298,331,330,299,333,332,300,335,334,301,337,336,302,339,338,303,341,340,304,345,343,305,347,346,306,349,348,350,351,307,352,353,308,309,355,354,310,357,356,563,344,358,359,361,362,311,364,363,312,366,365,313,368,367]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[1835886289,2128431897,2192845782,914589970],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[12.9994,-6.0001,14.4994],"m_extents":[18.2499,9.0,19.25]},"packedVertices":[32542,38956,19787,36821,16383,19787,32542,16383,19787,49150,49150,19787,49150,16383,19787,21769,38956,19787,37031,48786,19787,37031,49150,19787,21769,48786,19787,32542,48786,19787,32542,49150,19787,21769,49150,19787,21769,16383,19787,18178,16383,23192,18178,48786,23192,21769,48786,19787,21769,38956,19787,21769,38956,19787,32542,38956,19787,32542,38956,18106,30724,38956,16383,22821,38956,16383,20500,38956,18584,32542,38956,18106,32542,38956,19787,32542,16383,19787,32542,16383,18106,30724,16383,16383,32542,16383,18106,32542,16383,19787,20500,16383,18584,22821,16383,16383,21769,16383,19787,16383,16383,28827,18178,16383,27363,18178,16383,32732,16383,16383,31700,18178,16383,23192,18178,16383,43047,18178,16383,38020,16383,16383,41520,18178,16383,24043,16383,16383,39309,36821,16383,19787,49150,16383,19787,49150,16383,49150,18178,16383,49150,49150,49150,19787,49150,49150,49150,49150,16383,49150,49150,16383,19787,49150,49150,49150,49150,49150,19787,37031,49150,33405,32542,49150,37660,18178,49150,49150,18178,49150,37660,37031,49150,19787,37031,48786,19787,37031,48786,33405,37031,49150,33405,37031,49150,19787,18178,48786,37660,32542,48786,37660,28951,48786,33405,18178,48786,33405,37031,48786,33405,37031,48786,19787,32542,48786,30000,21769,48786,19787,18178,48786,23192,32542,48786,19787,32542,49150,19787,32542,49150,30000,32542,48786,30000,32542,48786,19787,21769,49150,19787,32542,49150,30000,32542,49150,19787,21769,49150,19787,21769,48786,19787,32542,48786,30000,32542,49150,30000,18178,38956,27363,18178,38956,30741,18178,45145,30741,18178,16383,24043,18178,16383,27363,18178,45145,40155,18178,48786,37660,18178,48786,33405,18178,49150,33405,18178,49150,23192,18178,16383,23192,18178,48786,23192,18178,16383,43047,18178,16383,49150,18178,49150,49150,18178,38956,43047,18178,49150,37660,18178,38956,40155,20500,16383,18584,21769,16383,19787,21769,38956,19787,20500,38956,18584,30724,16383,16383,22821,16383,16383,22821,38956,16383,30724,38956,16383,30724,38956,16383,32542,38956,18106,32542,16383,18106,30724,16383,16383,22821,38956,16383,22821,16383,16383,20500,16383,18584,20500,38956,18584,18178,38956,27363,18178,16383,27363,16383,16383,28827,16383,38956,28827,16383,16383,28827,16383,16383,31700,16383,38956,31700,16383,38956,28827,16383,38956,31700,16383,16383,31700,18178,16383,32732,18178,38956,32732,18178,16383,32732,18178,16383,38020,18178,38956,38020,18178,38956,32732,18178,38956,38020,18178,16383,38020,16383,16383,39309,16383,38956,39309,16383,16383,39309,16383,16383,41520,16383,38956,41520,16383,38956,39309,16383,38956,41520,16383,16383,41520,18178,16383,43047,18178,38956,43047,18178,49150,49150,18178,16383,49150,49150,16383,49150,49150,49150,49150,32542,49150,37660,32542,48786,37660,18178,48786,37660,18178,49150,37660,37031,48786,33405,32542,48786,37660,32542,49150,37660,37031,49150,33405,18178,49150,33405,18178,48786,33405,28951,48786,33405,28951,49150,33405,28951,49150,33405,28951,48786,33405,18178,48786,23192,18178,49150,23192,18178,38956,40155,19974,38956,38866,19974,38956,31774,18178,38956,30741,18178,38956,38020,18178,38956,32732,16383,38956,31700,18178,38956,27363,16383,38956,28827,16383,38956,41520,18178,38956,43047,16383,38956,39309,19974,45145,38866,19974,38956,38866,18178,38956,40155,18178,45145,40155,18178,45145,30741,19974,45145,31774,19974,45145,38866,18178,45145,40155,18178,45145,30741,18178,38956,30741,19974,38956,31774,19974,45145,31774,18178,49150,23192,18178,49150,33405,28951,49150,33405,19974,38956,31774,19974,38956,38866,19974,45145,38866,19974,45145,31774,32542,49150,18511,32542,48422,18511,31191,48422,18511,24384,38956,18511,23749,38956,18511,31080,49150,18511,23749,38956,19787,31080,49150,19787,31080,49150,18511,23749,38956,18511,23749,38956,18511,24384,38956,18511,24384,38956,19787,23749,38956,19787,31191,48422,18511,31191,48422,19787,24384,38956,19787,24384,38956,18511,32542,48422,18511,32542,48422,19787,31191,48422,19787,31191,48422,18511,32542,49150,18511,32542,49150,19787,32542,48422,19787,32542,48422,18511,31080,49150,19787,32542,49150,19787,32542,49150,18511,31080,49150,18511,31080,49150,19787,23749,38956,19787,24384,38956,19787,31191,48422,19787,32542,48422,19787,32542,49150,19787,32542,38956,19787,32542,38956,19787,36821,16383,19787,36821,16383,19787,49150,49150,19787,49150,49150,19787,49150,49150,19787,49150,49150,19787,21769,38956,19787,21769,38956,19787,37031,48786,19787,37031,48786,19787,37031,48786,19787,21769,48786,19787,21769,48786,19787,21769,48786,19787,32542,48786,19787,32542,49150,19787,21769,16383,19787,21769,16383,19787,18178,48786,23192,21769,48786,19787,21769,38956,19787,21769,38956,19787,21769,38956,19787,32542,38956,18106,30724,38956,16383,22821,38956,16383,32542,38956,18106,32542,16383,19787,30724,16383,16383,30724,16383,16383,32542,16383,19787,32542,16383,19787,22821,16383,16383,22821,16383,16383,21769,16383,19787,21769,16383,19787,21769,16383,19787,16383,16383,28827,18178,16383,27363,18178,16383,27363,18178,16383,32732,18178,16383,32732,18178,16383,23192,18178,16383,23192,18178,16383,43047,18178,16383,43047,18178,16383,43047,18178,16383,38020,18178,16383,38020,18178,16383,38020,18178,16383,38020,18178,16383,38020,16383,16383,41520,18178,16383,24043,36821,16383,19787,36821,16383,19787,49150,16383,49150,18178,16383,49150,18178,16383,49150,18178,16383,49150,18178,16383,49150,18178,16383,49150,49150,49150,19787,49150,16383,49150,49150,49150,49150,49150,49150,49150,49150,49150,19787,37031,49150,33405,37031,49150,33405,32542,49150,37660,32542,49150,37660,18178,49150,49150,37031,48786,19787,37031,49150,33405,18178,48786,37660,32542,48786,37660,32542,48786,37660,32542,48786,37660,32542,48786,37660,28951,48786,33405,28951,48786,33405,28951,48786,33405,37031,48786,19787,37031,48786,19787,32542,48786,30000,32542,48786,30000,21769,48786,19787,21769,48786,19787,32542,49150,19787,32542,48786,30000,21769,49150,19787,32542,48786,30000,18178,38956,27363,18178,38956,27363,18178,38956,27363,18178,45145,30741,18178,45145,30741,18178,45145,30741,18178,45145,30741,18178,45145,30741,18178,16383,24043,18178,16383,24043,18178,45145,40155,18178,45145,40155,18178,45145,40155,18178,45145,40155,18178,48786,37660,18178,48786,37660,18178,48786,33405,18178,49150,33405,18178,49150,23192,18178,49150,23192,18178,49150,23192,18178,49150,23192,18178,16383,23192,18178,16383,43047,18178,49150,49150,18178,49150,49150,18178,49150,49150,18178,38956,43047,18178,38956,43047,18178,49150,37660,20500,16383,18584,21769,38956,19787,30724,16383,16383,22821,38956,16383,30724,38956,16383,32542,16383,18106,22821,38956,16383,20500,16383,18584,18178,38956,27363,16383,16383,28827,16383,16383,28827,16383,38956,31700,16383,38956,31700,18178,16383,32732,18178,16383,32732,18178,38956,38020,18178,38956,38020,16383,16383,39309,16383,16383,39309,16383,38956,41520,16383,38956,41520,18178,16383,43047,18178,49150,49150,49150,16383,49150,32542,49150,37660,18178,48786,37660,37031,48786,33405,32542,49150,37660,18178,49150,33405,28951,48786,33405,28951,49150,33405,18178,48786,23192,18178,38956,40155,18178,38956,40155,18178,38956,40155,18178,38956,40155,19974,38956,31774,18178,38956,30741,18178,38956,30741,18178,38956,30741,18178,38956,30741,18178,38956,38020,18178,38956,38020,18178,38956,38020,18178,38956,32732,16383,38956,31700,16383,38956,31700,18178,38956,27363,16383,38956,41520,16383,38956,41520,19974,45145,38866,18178,38956,40155,18178,45145,30741,19974,45145,38866,18178,45145,30741,19974,38956,31774,19974,38956,31774,19974,45145,38866,32542,49150,18511,31191,48422,18511,31191,48422,18511,31191,48422,18511,23749,38956,18511,31080,49150,18511,23749,38956,19787,31080,49150,18511,23749,38956,18511,24384,38956,19787,31191,48422,18511,24384,38956,19787,32542,48422,18511,31191,48422,19787,32542,49150,18511,32542,48422,19787,31080,49150,19787,32542,49150,18511,31080,49150,19787,31080,49150,19787,31080,49150,19787,24384,38956,19787,31191,48422,19787,32542,48422,19787],"packedNormals":[127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,37,127,37,37,127,37,37,127,37,37,127,37,37,127,37,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,37,127,216,37,127,216,37,127,216,37,127,216,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,37,127,216,37,127,216,37,127,216,37,127,216,127,127,0,127,127,0,127,127,0,127,127,0,216,127,37,216,127,37,216,127,37,216,127,37,37,127,37,37,127,37,37,127,37,37,127,37,44,127,30,44,127,30,44,127,30,44,127,30,0,127,127,0,127,127,0,127,127,0,127,127,61,127,235,61,127,235,61,127,235,61,127,235,0,127,127,0,127,127,0,127,127,0,127,127,50,127,25,50,127,25,50,127,25,50,127,25,0,127,127,0,127,127,0,127,127,0,127,127,42,127,221,42,127,221,42,127,221,42,127,221,127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,37,127,37,37,127,37,37,127,37,37,127,37,127,127,254,127,127,254,127,127,254,127,127,254,216,127,37,216,127,37,216,127,37,216,127,37,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,50,127,25,50,127,25,50,127,25,50,127,25,127,0,127,127,0,127,127,0,127,127,0,127,61,127,235,61,127,235,61,127,235,61,127,235,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,55,231,127,55,231,127,55,231,127,55,231,127,127,0,127,127,0,127,127,0,127,127,0,127,198,22,127,198,22,127,198,22,127,198,22,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,37,127,37,37,127,37,37,127,37,37,127,37,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,37,127,216,37,127,216,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,37,127,216,37,127,216,127,127,0,127,127,0,216,127,37,216,127,37,37,127,37,37,127,37,44,127,30,44,127,30,0,127,127,0,127,127,61,127,235,61,127,235,0,127,127,0,127,127,50,127,25,50,127,25,0,127,127,0,127,127,42,127,221,42,127,221,127,127,254,127,127,254,127,127,0,127,127,0,37,127,37,37,127,37,127,127,254,127,127,254,216,127,37,216,127,37,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,50,127,25,50,127,25,127,0,127,127,0,127,61,127,235,61,127,235,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,55,231,127,55,231,127,127,0,127,127,0,127,198,22,127,198,22,127,127,0,127,127,0,127,254,127,127,254,127,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1172,0.9337],[0.1194,0.9337],[0.1194,0.9337],[0.119,0.9336],[0.1172,0.9336],[0.1168,0.9337],[0.1194,0.9337],[0.1194,0.9337],[0.1194,0.9161],[0.1194,0.9156],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1167,0.9344],[0.1168,0.9344],[0.1168,0.9343],[0.1164,0.9343],[0.0,0.0],[0.0,0.0],[0.1164,0.9343],[0.1164,0.934],[0.1163,0.934],[0.1164,0.9347],[0.1167,0.9347],[0.1164,0.9344],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1194,0.9416],[0.1194,0.9412],[0.119,0.9412],[0.1177,0.9337],[0.1177,0.9337],[0.119,0.9416],[0.1177,0.9337],[0.119,0.9416],[0.119,0.9416],[0.1177,0.9337],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.119,0.9412],[0.119,0.9411],[0.1177,0.9337],[0.1177,0.9337],[0.1194,0.9412],[0.1194,0.9411],[0.119,0.9411],[0.119,0.9412],[0.1194,0.9416],[0.1194,0.9416],[0.1194,0.9411],[0.1194,0.9412],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1172,0.9337],[0.1172,0.9337],[0.1172,0.9337],[0.1194,0.9337],[0.119,0.9336],[0.1172,0.9336],[0.1194,0.9337],[0.1194,0.9161],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1167,0.9344],[0.0,0.0],[0.1167,0.9344],[0.1167,0.9344],[0.1168,0.9343],[0.0,0.0],[0.0,0.0],[0.1164,0.9343],[0.1164,0.9343],[0.0,0.0],[0.1167,0.9344],[0.1167,0.9344],[0.1167,0.9344],[0.1164,0.9343],[0.1164,0.9343],[0.1164,0.934],[0.1164,0.9347],[0.1164,0.9347],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1194,0.9416],[0.119,0.9412],[0.119,0.9412],[0.119,0.9412],[0.1177,0.9337],[0.119,0.9416],[0.1177,0.9337],[0.119,0.9416],[0.0,0.0],[0.0,0.0],[0.119,0.9412],[0.1177,0.9337],[0.1194,0.9412],[0.119,0.9411],[0.1194,0.9416],[0.1194,0.9411],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,3,4,234,235,232,236,233,5,237,240,6,238,242,7,239,243,241,8,245,9,244,246,10,248,247,11,249,12,13,14,252,15,250,253,16,251,17,18,19,257,20,254,258,21,255,259,22,256,23,24,25,261,26,260,27,28,29,30,31,32,33,34,35,274,36,271,37,268,38,278,39,276,279,40,281,282,41,277,283,272,287,284,275,273,286,42,285,43,44,45,290,46,288,291,264,289,292,262,265,293,266,263,294,269,267,295,280,270,47,48,49,297,50,296,51,52,53,301,54,298,303,55,299,304,56,305,57,302,300,58,59,60,307,61,306,62,63,64,313,65,308,309,66,67,316,68,310,318,69,311,320,314,312,321,70,315,71,319,317,72,73,74,323,75,322,76,77,78,79,80,81,325,82,324,83,84,85,86,87,326,329,88,89,340,90,330,342,91,331,343,92,332,344,327,333,345,334,328,346,93,335,347,94,348,95,96,97,350,98,349,351,336,353,352,99,337,338,100,354,355,341,339,101,102,103,357,104,356,105,106,107,359,108,358,109,110,111,361,112,360,113,114,115,363,116,362,117,118,119,365,120,364,121,122,123,367,124,366,125,126,127,369,128,368,129,130,131,371,132,370,133,134,135,373,136,372,137,138,139,375,140,374,141,142,143,377,144,376,145,146,147,379,148,378,149,150,151,381,152,380,153,154,155,383,156,382,157,158,159,385,160,384,161,162,163,387,164,386,165,166,167,392,168,388,393,169,389,394,170,397,395,171,400,396,172,401,403,173,402,174,175,390,391,398,404,399,176,405,177,178,179,407,180,406,181,182,183,409,184,408,185,186,187,411,188,410,189,190,191,192,193,194,413,195,412,196,197,198,415,199,200,418,201,416,419,414,417,202,203,204,421,205,420,206,207,208,423,209,422,210,211,212,425,213,424,214,215,216,427,217,426,218,219,220,429,221,428,222,223,224,431,225,430,226,227,228,435,229,432,436,230,433,437,231,434]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[3063776885,1494765254,2802000841,1062155964],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[-34.2504,-6.0001,-31.7504],"m_extents":[19.25,9.0,19.25]},"packedVertices":[45746,49150,16383,45746,49150,27873,45746,48786,27873,45746,49150,32128,45746,49150,42341,45746,48786,42341,45746,38956,39419,45746,16383,42341,45746,48786,32128,45746,38956,32128,45746,16383,32128,45746,16383,16383,45746,16383,39419,45746,16383,16383,16383,16383,16383,16383,49150,16383,45746,49150,16383,16383,16383,16383,45746,16383,16383,45746,16383,32128,42341,16383,45746,42341,16383,49150,40639,16383,49150,37630,16383,45746,37630,16383,47448,25463,16383,45746,19897,16383,47448,16383,16383,43934,25463,16383,47448,44043,16383,47448,49150,16383,32128,49150,16383,36396,47448,16383,39419,45746,16383,39419,45746,16383,42341,49150,38956,32128,49150,16383,32128,45746,16383,32128,45746,38956,32128,47448,38956,39419,49150,38956,36396,49150,38956,32128,45746,38956,32128,45746,38956,39419,45746,16383,39419,47448,16383,39419,47448,38956,39419,45746,38956,39419,42341,38956,45746,42341,16383,45746,45746,16383,42341,45746,48786,42341,42341,48786,45746,35533,49150,32128,35533,48786,32128,45746,48786,42341,45746,49150,42341,35533,49150,32128,45746,49150,42341,45746,49150,32128,45746,49150,32128,45746,48786,32128,35533,48786,32128,35533,49150,32128,27873,48786,45746,32128,48786,45746,32128,48786,35533,42341,48786,45746,45746,48786,42341,35533,48786,32128,32128,48786,27873,27873,48786,32128,45746,48786,32128,45746,48786,27873,32128,49150,27873,32128,48786,27873,45746,48786,27873,45746,49150,27873,20602,49150,45746,27873,49150,45746,27873,49150,32128,32128,49150,27873,45746,49150,27873,45746,49150,16383,16383,49150,16383,16383,49150,41527,16383,16383,16383,16383,16383,43934,16383,38956,43934,16383,38956,40323,16383,46237,40323,16383,46237,41527,16383,49150,41527,16383,49150,16383,37630,16383,45746,37630,16383,47448,37630,38956,47448,37630,38956,45746,37630,38956,47448,37630,16383,47448,40639,16383,49150,40639,38956,49150,40639,38956,49150,40639,16383,49150,42341,16383,49150,42341,38956,49150,44043,38956,47448,42341,38956,49150,42341,16383,49150,44043,16383,47448,42341,38956,45746,44043,38956,47448,44043,16383,47448,42341,16383,45746,49150,38956,36396,47448,38956,39419,47448,16383,39419,49150,16383,36396,49150,38956,32128,49150,38956,36396,49150,16383,36396,49150,16383,32128,16383,16383,43934,19897,16383,47448,19897,38956,47448,16383,38956,43934,19897,38956,47448,19897,16383,47448,25463,16383,47448,25463,38956,47448,25463,38956,45746,25463,38956,47448,25463,16383,47448,25463,16383,45746,20602,49150,45746,20602,46237,45746,21806,46237,45746,27873,48786,45746,27873,49150,45746,21806,38956,45746,25463,38956,45746,37630,38956,45746,42341,38956,45746,42341,48786,45746,32128,48786,45746,32128,49150,45746,42341,49150,45746,25463,16383,45746,37630,16383,45746,42341,49150,45746,42341,48786,45746,32128,48786,35533,32128,49150,35533,32128,48786,35533,32128,48786,45746,32128,49150,45746,32128,49150,35533,27873,49150,32128,27873,49150,45746,27873,48786,45746,27873,48786,32128,27873,49150,32128,27873,48786,32128,32128,48786,27873,32128,49150,27873,16383,46237,41527,20602,46237,45746,20602,49150,45746,16383,49150,41527,16383,46237,40323,21806,46237,45746,20602,46237,45746,16383,46237,41527,16383,46237,40323,16383,38956,40323,21806,38956,45746,21806,46237,45746,19897,38956,47448,25463,38956,47448,25463,38956,45746,21806,38956,45746,16383,38956,40323,16383,38956,43934,42341,38956,49150,44043,38956,47448,42341,38956,45746,37630,38956,45746,40639,38956,49150,37630,38956,47448,32128,49150,35533,32128,49150,45746,42341,49150,45746,45746,48422,40491,45746,48422,42341,45746,49150,42341,45746,49150,40383,45746,38956,34214,45746,38956,33624,45746,38956,34214,47022,38956,34214,47022,48422,40491,45746,48422,40491,45746,38956,33624,47022,38956,33624,47022,38956,34214,45746,38956,34214,45746,49150,40383,47022,49150,40383,47022,38956,33624,45746,38956,33624,45746,49150,42341,47022,49150,42341,47022,49150,40383,45746,49150,40383,45746,49150,42341,45746,48422,42341,47022,48422,42341,47022,49150,42341,45746,48422,40491,47022,48422,40491,47022,48422,42341,45746,48422,42341,47022,49150,40383,47022,49150,42341,47022,48422,42341,47022,48422,40491,47022,38956,34214,47022,38956,33624,45746,49150,16383,45746,48786,27873,45746,48786,27873,45746,48786,27873,45746,48786,27873,45746,49150,32128,45746,49150,32128,45746,48786,42341,45746,48786,42341,45746,38956,39419,45746,38956,39419,45746,38956,39419,45746,38956,39419,45746,16383,42341,45746,48786,32128,45746,48786,32128,45746,38956,32128,45746,38956,32128,45746,16383,32128,45746,16383,16383,45746,16383,16383,16383,49150,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,45746,16383,32128,45746,16383,32128,45746,16383,32128,45746,16383,32128,45746,16383,32128,45746,16383,32128,42341,16383,45746,42341,16383,45746,42341,16383,45746,42341,16383,49150,42341,16383,49150,40639,16383,49150,40639,16383,49150,37630,16383,45746,37630,16383,45746,25463,16383,45746,25463,16383,45746,19897,16383,47448,19897,16383,47448,49150,16383,36396,47448,16383,39419,45746,16383,39419,45746,16383,42341,49150,38956,32128,45746,16383,32128,47448,38956,39419,47448,38956,39419,49150,38956,32128,45746,38956,32128,45746,16383,39419,47448,38956,39419,42341,38956,45746,42341,38956,45746,45746,16383,42341,45746,48786,42341,35533,49150,32128,45746,48786,42341,45746,49150,32128,35533,48786,32128,27873,48786,45746,32128,48786,35533,32128,48786,35533,32128,48786,35533,32128,48786,35533,42341,48786,45746,35533,48786,32128,35533,48786,32128,35533,48786,32128,35533,48786,32128,32128,48786,27873,32128,48786,27873,27873,48786,32128,45746,48786,27873,32128,49150,27873,45746,48786,27873,20602,49150,45746,20602,49150,45746,27873,49150,32128,27873,49150,32128,32128,49150,27873,32128,49150,27873,45746,49150,16383,16383,49150,16383,16383,49150,16383,16383,49150,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,16383,38956,43934,16383,38956,40323,16383,46237,40323,16383,46237,40323,16383,46237,40323,16383,49150,41527,16383,49150,16383,37630,16383,45746,37630,38956,47448,37630,38956,47448,40639,16383,49150,40639,38956,49150,42341,16383,49150,44043,38956,47448,42341,16383,49150,42341,38956,45746,44043,16383,47448,49150,38956,36396,47448,16383,39419,49150,38956,32128,49150,16383,36396,16383,16383,43934,19897,38956,47448,19897,38956,47448,25463,16383,47448,25463,38956,45746,25463,16383,47448,20602,49150,45746,20602,49150,45746,21806,46237,45746,21806,46237,45746,21806,46237,45746,21806,46237,45746,21806,46237,45746,21806,46237,45746,27873,48786,45746,27873,48786,45746,27873,48786,45746,25463,38956,45746,25463,38956,45746,25463,38956,45746,37630,38956,45746,37630,38956,45746,42341,38956,45746,42341,48786,45746,42341,48786,45746,42341,48786,45746,42341,48786,45746,32128,48786,45746,32128,49150,45746,37630,16383,45746,42341,49150,45746,32128,48786,35533,32128,48786,35533,32128,49150,45746,27873,49150,32128,27873,48786,45746,27873,49150,32128,32128,48786,27873,16383,46237,41527,20602,49150,45746,16383,46237,40323,20602,46237,45746,16383,46237,40323,21806,38956,45746,19897,38956,47448,19897,38956,47448,19897,38956,47448,25463,38956,45746,21806,38956,45746,16383,38956,40323,42341,38956,49150,42341,38956,49150,42341,38956,45746,37630,38956,45746,37630,38956,45746,40639,38956,49150,45746,48422,40491,45746,48422,40491,45746,49150,42341,45746,49150,40383,45746,49150,40383,45746,38956,34214,45746,38956,34214,47022,48422,40491,45746,38956,33624,47022,38956,34214,45746,49150,40383,47022,38956,33624,45746,49150,42341,47022,49150,40383,45746,49150,42341,47022,48422,42341,45746,48422,40491,47022,48422,42341,47022,49150,40383,47022,49150,40383,47022,49150,40383,47022,48422,42341,47022,48422,40491,47022,38956,34214],"packedNormalsm_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1155,0.929],[0.1155,0.929],[0.1155,0.9289],[0.1155,0.9289],[0.1155,0.929],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.115,0.929],[0.115,0.929],[0.115,0.929],[0.115,0.929],[0.1149,0.929],[0.1149,0.929],[0.1155,0.929],[0.1155,0.929],[0.1155,0.929],[0.1154,0.929],[0.1155,0.929],[0.1154,0.929],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1155,0.929],[0.1155,0.929],[0.1155,0.9297],[0.1155,0.9297],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1155,0.9297],[0.1155,0.9297],[0.1155,0.929],[0.1155,0.929],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1155,0.9297],[0.1155,0.9297],[0.1155,0.9297],[0.1155,0.9297],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1155,0.9297],[0.1155,0.9297],[0.1155,0.9297],[0.1155,0.9297],[0.1155,0.929],[0.1155,0.929],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1155,0.929],[0.1155,0.929],[0.1155,0.9289],[0.1155,0.9289],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.115,0.929],[0.115,0.929],[0.115,0.929],[0.115,0.929],[0.115,0.929],[0.1149,0.929],[0.1155,0.929],[0.1155,0.929],[0.1155,0.929],[0.1154,0.929],[0.1154,0.929],[0.1155,0.929],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1155,0.929],[0.1155,0.9297],[0.0,0.0],[0.0,0.0],[0.1155,0.9297],[0.1155,0.929],[0.0,0.0],[0.0,0.0],[0.1155,0.9297],[0.1155,0.9297],[0.0,0.0],[0.0,0.0],[0.1155,0.9297],[0.1155,0.9297],[0.1155,0.9297],[0.1155,0.9297],[0.1155,0.9297],[0.1155,0.929]],"packedWeights":[],"packedIndices":[[0,1,2,3,4,5,235,6,233,236,7,237,238,8,234,239,9,242,244,229,243,245,10,230,246,11,231,247,228,232,12,240,241,13,14,15,249,16,248,17,18,19,257,20,250,263,21,251,266,22,252,268,23,253,269,24,270,271,25,254,272,26,255,274,27,256,275,273,28,267,264,29,258,30,31,276,32,259,277,33,260,278,34,261,279,265,262,35,36,37,281,38,280,39,40,41,284,42,282,285,43,283,44,45,46,287,47,286,48,49,50,290,51,288,291,52,289,53,54,55,293,56,292,57,58,59,60,61,62,295,63,294,64,65,66,67,68,69,302,297,301,303,70,298,306,71,299,308,296,300,304,72,73,309,307,305,74,75,76,311,77,310,78,79,80,81,82,83,318,84,316,319,314,317,320,312,315,321,85,313,86,87,88,325,89,322,326,90,323,327,91,92,330,93,328,331,324,329,94,95,96,333,97,332,98,99,100,335,101,334,102,103,104,337,105,336,106,107,108,339,109,338,110,111,112,341,113,340,114,115,116,343,117,342,118,119,120,345,121,344,122,123,124,347,125,346,126,127,128,349,129,348,130,131,132,351,133,350,134,135,136,354,137,352,360,138,353,355,139,140,363,141,356,366,142,357,368,143,358,369,361,359,370,144,362,371,145,373,372,146,374,364,147,148,375,367,365,149,150,151,377,152,376,153,154,155,379,156,378,157,158,159,381,160,380,161,162,163,383,164,382,165,166,167,385,168,384,169,170,171,387,172,386,173,174,175,389,176,388,177,178,179,393,180,390,394,181,391,395,182,392,183,184,185,398,186,396,399,187,397,400,188,401,189,190,191,192,193,194,404,195,402,405,196,403,406,197,407,198,199,200,409,201,408,202,203,204,411,205,410,206,207,208,413,209,412,210,211,212,415,213,414,214,215,216,417,217,416,218,219,220,419,221,418,222,223,224,423,225,420,424,226,421,425,227,422]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[1532365178,229722377,2653122640,1098096099],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[0.0,0.0,0.0],"m_extents":[4.5144,2.091,0.1611]},"packedVertices":[49150,49150,49149,16383,49150,49149,49150,16383,49149,16383,16383,49149,49150,16383,16381,16383,16383,16381,49150,49150,16381,16383,49150,16381,49150,16383,49149,16383,16383,49149,49150,16383,16381,16383,16383,16381,49150,16383,49149,49150,16383,16381,49150,49150,49149,49150,49150,16381,16383,49150,49149,16383,49150,16381,16383,16383,49149,16383,16383,16381,49150,49150,16381,16383,49150,16381,49150,49150,49149,16383,49150,49149,16383,49150,49149,49150,16383,49149,16383,16383,16381,49150,49150,16381,16383,16383,49149,49150,16383,16381,49150,16383,16381,49150,49150,49149,16383,49150,16381,16383,16383,49149,16383,49150,16381,49150,49150,49149],"packedNormals":[127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,0,127,127,0,127,0,127,127,0,127,254,127,127,254,127,127,0,127,127,0,127,127,127,254,127,127,254,127],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,24,3,25,4,5,6,26,7,27,8,9,10,28,11,29,12,13,14,30,15,31,16,17,18,32,19,33,20,21,22,34,23,35]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[2896065380,3843705948,2645856480,1113501019],"revisions":[{"type":"kByteStream","name":"internal","revision":-1,"autoGenerated":true,"rawdata":""}]},{"guid":[1604140918,3148500635,3086060019,1214717293],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[-9.2503,-6.0001,15.2494],"m_extents":[18.0,9.0,18.0]},"packedVertices":[38392,16383,16383,49150,16383,16383,49150,16383,25704,47330,16383,25704,47330,16383,41415,42779,16383,47330,38392,16383,18203,18203,16383,47330,18203,16383,18203,18203,16383,27818,18203,16383,37193,18203,16383,29309,16383,16383,27818,16383,16383,29309,16383,16383,37193,18203,16383,35042,16383,16383,35042,49150,16383,41415,49150,16383,49150,42779,16383,49150,18203,16383,27818,16383,16383,27818,16383,38956,27818,18203,38956,27818,16383,16383,27818,16383,16383,29309,16383,38956,29309,16383,38956,27818,16383,38956,29309,16383,16383,29309,18203,16383,29309,18203,38956,29309,18203,16383,29309,18203,16383,35042,18203,38956,35042,18203,38956,29309,18203,38956,35042,18203,16383,35042,16383,16383,35042,16383,38956,35042,16383,16383,35042,16383,16383,37193,16383,38956,37193,16383,38956,35042,16383,38956,37193,16383,16383,37193,18203,16383,37193,18203,38956,37193,18203,16383,18203,18203,16383,27818,18203,38956,27818,18203,45145,27818,18203,38956,21844,18203,38956,18203,18203,45145,36310,18203,48786,35042,18203,48786,30491,18203,49150,30491,18203,49150,21844,18203,16383,37193,18203,16383,47330,18203,49150,47330,18203,38956,37193,18203,49150,35042,18203,38956,36310,18203,49150,47330,18203,16383,47330,42779,16383,47330,42779,38956,47330,42779,46237,47330,47330,46237,47330,47330,49150,47330,42779,16383,47330,42779,16383,49150,42779,38956,49150,42779,38956,47330,42779,38956,49150,42779,16383,49150,49150,16383,49150,49150,38956,49150,49150,38956,41415,49150,38956,49150,49150,16383,49150,49150,16383,41415,49150,38956,41415,49150,16383,41415,47330,16383,41415,47330,38956,41415,47330,49150,18203,47330,49150,30491,47330,48786,30491,47330,38956,25704,47330,38956,18203,47330,49150,35042,47330,49150,47330,47330,46237,47330,47330,46237,41415,47330,38956,41415,47330,16383,41415,47330,48786,35042,47330,16383,25704,47330,16383,25704,49150,16383,25704,49150,38956,25704,47330,38956,25704,49150,38956,16383,49150,38956,25704,49150,16383,25704,49150,16383,16383,49150,38956,16383,49150,16383,16383,38392,16383,16383,38392,38956,16383,38392,16383,16383,38392,16383,18203,38392,30946,18203,38392,38956,18203,38392,38956,16383,38392,30946,18203,38392,16383,18203,18203,16383,18203,18203,38956,18203,38392,38956,18203,21844,38956,18203,47330,49150,18203,47330,38956,18203,35042,48786,18203,35042,49150,18203,21844,49150,18203,30491,48786,18203,30491,49150,18203,18203,38956,36310,20024,38956,36310,20024,38956,27818,18203,38956,27818,16383,38956,37193,18203,38956,37193,18203,38956,35042,16383,38956,35042,16383,38956,27818,18203,38956,29309,16383,38956,29309,20024,38956,36310,18203,38956,36310,18203,45145,36310,20024,45145,36310,18203,45145,27818,20024,45145,27818,20024,45145,36310,18203,45145,36310,18203,45145,27818,18203,38956,27818,20024,38956,27818,20024,45145,27818,18203,38956,18203,18203,38956,21844,21844,38956,18203,21844,38956,18203,18203,38956,21844,18203,49150,21844,21844,49150,18203,18203,49150,30491,30491,49150,30491,30491,49150,18203,21844,49150,18203,18203,49150,21844,18203,49150,30491,18203,48786,30491,30491,48786,30491,30491,49150,30491,18203,48786,35042,47330,48786,35042,47330,48786,30491,35042,48786,30491,30491,48786,30491,35042,48786,18203,18203,48786,30491,30491,48786,18203,47330,49150,35042,47330,48786,35042,18203,48786,35042,18203,49150,35042,18203,49150,47330,47330,49150,47330,47330,49150,35042,18203,49150,35042,42779,46237,47330,47330,46237,41415,47330,46237,47330,47330,46237,41415,42779,46237,47330,42779,38956,47330,47330,38956,41415,42779,38956,49150,49150,38956,49150,49150,38956,41415,47330,38956,41415,42779,38956,47330,35042,49150,30491,35042,48786,30491,47330,48786,30491,47330,49150,30491,35042,49150,30491,47330,49150,30491,47330,49150,18203,35042,49150,18203,47330,38956,25704,49150,38956,25704,49150,38956,16383,47330,38956,18203,38392,38956,16383,38392,38956,18203,47330,30946,18203,35042,48786,18203,35042,48786,30491,35042,49150,30491,35042,49150,18203,30491,49150,18203,30491,49150,30491,30491,48786,30491,30491,48786,18203,20024,38956,27818,20024,38956,36310,20024,45145,36310,20024,45145,27818,18203,49150,44776,18203,49150,47330,18203,48422,47330,18203,48422,44877,18203,38956,37016,18203,38956,36310,16838,49150,44776,18203,49150,44776,18203,38956,36310,16838,38956,36310,16838,38956,36310,18203,38956,36310,18203,38956,37016,16838,38956,37016,18203,38956,37016,18203,48422,44877,16838,48422,44877,16838,38956,37016,16838,48422,44877,18203,48422,44877,18203,48422,47330,16838,48422,47330,16838,48422,47330,18203,48422,47330,18203,49150,47330,16838,49150,47330,16838,49150,47330,18203,49150,47330,18203,49150,44776,16838,49150,44776,16838,48422,44877,16838,48422,47330,16838,49150,47330,16838,49150,44776,16838,38956,37016,16838,38956,36310,38392,16383,16383,38392,16383,16383,38392,16383,16383,38392,16383,16383,49150,16383,25704,47330,16383,25704,47330,16383,41415,47330,16383,41415,47330,16383,41415,47330,16383,41415,42779,16383,47330,42779,16383,47330,42779,16383,47330,38392,16383,18203,38392,16383,18203,18203,16383,47330,18203,16383,47330,18203,16383,47330,18203,16383,18203,18203,16383,27818,18203,16383,27818,18203,16383,27818,18203,16383,37193,18203,16383,37193,18203,16383,37193,18203,16383,29309,18203,16383,29309,18203,16383,29309,16383,16383,27818,16383,16383,37193,18203,16383,35042,18203,16383,35042,49150,16383,49150,42779,16383,49150,18203,16383,27818,16383,38956,27818,16383,16383,27818,16383,38956,29309,16383,38956,29309,18203,16383,29309,18203,16383,29309,18203,38956,35042,18203,38956,35042,16383,16383,35042,16383,16383,35042,16383,38956,37193,16383,38956,37193,18203,16383,37193,18203,16383,18203,18203,16383,18203,18203,16383,18203,18203,38956,27818,18203,45145,27818,18203,45145,27818,18203,45145,27818,18203,45145,27818,18203,45145,27818,18203,45145,27818,18203,38956,21844,18203,38956,21844,18203,45145,36310,18203,45145,36310,18203,45145,36310,18203,45145,36310,18203,48786,35042,18203,48786,35042,18203,48786,30491,18203,49150,30491,18203,49150,21844,18203,16383,37193,18203,49150,47330,18203,49150,47330,18203,49150,47330,18203,38956,37193,18203,38956,37193,18203,49150,35042,18203,49150,47330,18203,49150,47330,18203,49150,47330,18203,49150,47330,42779,16383,47330,42779,38956,47330,42779,46237,47330,47330,46237,47330,42779,16383,47330,42779,38956,49150,42779,38956,49150,49150,16383,49150,49150,38956,41415,49150,16383,49150,49150,38956,41415,47330,16383,41415,47330,49150,18203,47330,49150,18203,47330,48786,30491,47330,48786,30491,47330,48786,30491,47330,38956,25704,47330,38956,25704,47330,49150,35042,47330,49150,35042,47330,49150,35042,47330,49150,35042,47330,46237,47330,47330,46237,41415,47330,38956,41415,47330,16383,41415,47330,16383,41415,47330,48786,35042,47330,48786,35042,47330,16383,25704,47330,16383,25704,47330,16383,25704,49150,38956,25704,49150,38956,16383,49150,16383,25704,49150,38956,16383,38392,16383,16383,38392,16383,16383,38392,16383,16383,38392,30946,18203,38392,38956,18203,38392,30946,18203,38392,30946,18203,38392,30946,18203,18203,16383,18203,18203,38956,18203,18203,38956,18203,38392,38956,18203,38392,38956,18203,38392,38956,18203,38392,38956,18203,38392,38956,18203,21844,38956,18203,21844,38956,18203,21844,38956,18203,21844,38956,18203,47330,49150,18203,47330,49150,18203,47330,49150,18203,47330,38956,18203,35042,48786,18203,35042,48786,18203,21844,49150,18203,30491,48786,18203,30491,48786,18203,18203,38956,36310,18203,38956,36310,18203,38956,36310,18203,38956,36310,20024,38956,27818,18203,38956,27818,18203,38956,27818,18203,38956,27818,16383,38956,37193,16383,38956,37193,18203,38956,35042,18203,38956,35042,18203,38956,35042,16383,38956,27818,18203,38956,29309,18203,38956,29309,20024,38956,36310,18203,45145,36310,18203,45145,27818,20024,45145,36310,18203,45145,27818,20024,38956,27818,21844,38956,18203,18203,49150,21844,18203,49150,30491,18203,49150,30491,30491,49150,18203,21844,49150,18203,18203,49150,30491,30491,48786,30491,18203,48786,35042,18203,48786,35042,18203,48786,35042,47330,48786,30491,35042,48786,30491,35042,48786,30491,30491,48786,30491,30491,48786,30491,30491,48786,30491,35042,48786,18203,47330,49150,35042,18203,48786,35042,18203,49150,47330,47330,49150,35042,47330,46237,41415,42779,38956,47330,42779,38956,49150,42779,38956,49150,49150,38956,41415,47330,38956,41415,35042,49150,30491,47330,48786,30491,35042,49150,30491,47330,49150,18203,47330,38956,25704,49150,38956,16383,49150,38956,16383,47330,38956,18203,47330,38956,18203,38392,38956,16383,47330,30946,18203,35042,48786,18203,35042,49150,30491,30491,49150,18203,30491,48786,30491,20024,38956,27818,20024,45145,36310,18203,49150,44776,18203,49150,44776,18203,49150,44776,18203,48422,47330,18203,48422,44877,18203,38956,37016,16838,49150,44776,18203,38956,36310,16838,38956,36310,18203,38956,37016,18203,38956,37016,16838,48422,44877,16838,48422,44877,18203,48422,47330,16838,48422,47330,18203,49150,47330,16838,49150,47330,18203,49150,44776,16838,48422,44877,16838,48422,44877,16838,49150,47330,16838,49150,44776,16838,49150,44776,16838,38956,37016],"packedNormals":[127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,0,127,127,127,127,254,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,37,127,37,37,127,37,37,127,37,37,127,37,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,227,127,204,227,127,204,227,127,204,227,127,204,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,235,61,127,235,61,127,235,61,127,235,61,127,0,127,127,0,127,127,0,127,127,0,127,127,18,192,127,18,192,127,18,192,127,18,192,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,0,127,127,0,127,127,127,127,254,127,127,254,0,127,127,0,127,127,127,127,0,127,127,0,0,127,127,0,127,127,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,127,127,254,127,127,254,254,127,127,254,127,127,127,127,0,127,127,0,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,127,254,127,127,254,254,127,127,254,127,127,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,0,127,127,0,127,127,127,254,127,127,254,37,127,37,37,127,37,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,254,127,127,254,127,227,127,204,227,127,204,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,0,127,127,0,127,127,254,127,127,254,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,235,61,127,235,61,127,0,127,127,0,127,127,18,192,127,18,192,127,0,127,127,0,127,127,127,254,127,127,254,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1133,0.9344],[0.1137,0.9344],[0.1133,0.934],[0.1128,0.934],[0.1128,0.9344],[0.1133,0.9344],[0.1133,0.9343],[0.1128,0.9343],[0.1124,0.934],[0.1128,0.934],[0.1127,0.934],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1123,0.9333],[0.1124,0.9337],[0.1128,0.9333],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1172,0.9348],[0.1181,0.9348],[0.1184,0.9344],[0.1181,0.9344],[0.1172,0.9347],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1181,0.9337],[0.1186,0.9337],[0.1186,0.9333],[0.1184,0.9333],[0.1164,0.9333],[0.1164,0.9333],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1133,0.9405],[0.1137,0.9405],[0.1133,0.9344],[0.1132,0.9344],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1133,0.9344],[0.1137,0.9401],[0.1133,0.9401],[0.1132,0.9344],[0.1133,0.9401],[0.1137,0.9401],[0.1137,0.9401],[0.1136,0.9401],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1133,0.9401],[0.1136,0.9401],[0.1136,0.9405],[0.1133,0.9405],[0.1132,0.9344],[0.1132,0.9344],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1133,0.9344],[0.1133,0.9344],[0.1133,0.9344],[0.0,0.0],[0.1133,0.934],[0.0,0.0],[0.1128,0.934],[0.0,0.0],[0.1128,0.9344],[0.1128,0.9344],[0.0,0.0],[0.1133,0.9343],[0.0,0.0],[0.1124,0.934],[0.0,0.0],[0.1128,0.934],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1172,0.9348],[0.1172,0.9348],[0.1184,0.9344],[0.1181,0.9344],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1181,0.9337],[0.1186,0.9333],[0.1186,0.9333],[0.1184,0.9333],[0.1184,0.9333],[0.1164,0.9333],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1133,0.9405],[0.1133,0.9344],[0.0,0.0],[0.0,0.0],[0.1133,0.9344],[0.1133,0.9401],[0.1133,0.9401],[0.1137,0.9401],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1133,0.9401],[0.1133,0.9401],[0.1136,0.9405],[0.1133,0.9405],[0.1133,0.9405],[0.1132,0.9344]],"packedWeights":[],"packedIndices":[[0,1,2,265,3,261,266,4,262,267,5,263,271,6,264,272,7,274,276,8,275,277,9,279,278,10,280,281,283,11,286,12,282,287,13,289,284,14,15,291,288,285,290,16,292,268,17,18,293,19,269,294,273,270,20,21,22,296,23,295,24,25,26,298,27,297,28,29,30,300,31,299,32,33,34,302,35,301,36,37,38,304,39,303,40,41,42,306,43,305,44,45,46,308,47,307,48,49,50,312,51,309,313,52,310,319,53,311,314,54,55,325,56,315,327,57,316,328,58,317,329,320,318,59,60,61,331,62,330,332,321,334,333,63,322,323,64,335,336,326,324,65,66,67,341,68,337,342,69,338,343,70,339,344,71,340,72,73,74,346,75,345,76,77,78,348,79,347,80,81,82,350,83,349,84,85,86,352,87,351,88,89,90,355,91,353,358,92,354,93,94,95,364,96,360,365,97,361,366,98,362,367,99,363,368,100,369,371,356,370,372,359,357,101,102,103,374,104,373,105,106,107,376,108,375,109,110,111,378,112,377,113,114,115,381,116,379,382,117,380,118,119,120,386,121,383,387,122,384,388,123,389,124,125,390,391,394,398,395,126,399,402,127,400,396,128,129,405,403,397,404,130,406,131,132,133,411,134,407,135,136,408,409,137,415,410,412,417,418,138,416,413,139,140,421,419,414,420,141,422,142,143,144,424,145,423,146,147,148,426,149,425,150,151,152,428,153,427,154,155,156,157,158,159,430,160,429,161,162,163,433,164,431,434,165,432,166,167,168,436,169,435,170,171,172,440,173,437,441,174,438,442,175,443,444,176,439,177,445,446,178,179,180,448,181,447,182,183,184,450,185,449,186,187,188,189,190,191,452,192,451,193,194,195,455,196,453,456,197,454,198,199,200,458,201,457,202,203,204,460,205,459,206,207,208,462,209,461,463,210,464,466,211,465,212,385,392,393,401,467,213,214,215,469,216,468,217,218,219,471,220,470,221,222,223,473,224,472,225,226,227,477,228,474,478,229,475,479,230,476,231,232,233,481,234,480,235,236,237,483,238,482,239,240,241,485,242,484,243,244,245,487,246,486,247,248,249,489,250,488,251,252,253,491,254,490,255,256,257,494,258,492,495,259,493,496,260,497]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[2618668925,1870547570,2994204697,1443365969],"revisions":[{"type":"kMesh","name":"PrimitiveMesh","revision":-1,"autoGenerated":true,"meshdata":{"name":"PrimitiveMesh","m_bound":{"m_center":[0.0,0.0,0.0],"m_extents":[4.5144,2.091,0.1611]},"packedVertices":[49150,49150,49149,16383,49150,49149,49150,16383,49149,16383,16383,49149,49150,16383,16381,16383,16383,16381,49150,49150,16381,16383,49150,16381,49150,16383,49149,16383,16383,49149,49150,16383,16381,16383,16383,16381,49150,16383,49149,49150,16383,16381,49150,49150,49149,49150,49150,16381,16383,49150,49149,16383,49150,16381,16383,16383,49149,16383,16383,16381,49150,49150,16381,16383,49150,16381,49150,49150,49149,16383,49150,49149],"packedNormals":[127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127],"m_uvs":[[0.0,1.0],[1.0,1.0],[0.0,0.0],[1.0,0.0],[1.0,0.0],[0.0,0.0],[1.0,1.0],[0.0,1.0],[1.0,0.0],[0.0,0.0],[1.0,1.0],[0.0,1.0],[1.0,0.0],[0.0,0.0],[1.0,1.0],[0.0,1.0],[0.0,1.0],[1.0,1.0],[0.0,0.0],[1.0,0.0],[1.0,0.0],[0.0,0.0],[1.0,1.0],[0.0,1.0]],"packedWeights":[],"packedIndices":[[0,1,2,1,3,2,4,5,6,5,7,6,8,9,10,9,11,10,12,13,14,13,15,14,16,17,18,17,19,18,20,21,22,21,23,22]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[2252372395,3607971072,3029451571,1444505551],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[0.0,0.0,0.0],"m_extents":[500.0,16.0,500.0]},"packedVertices":[49150,49150,49150,16383,49150,49150,49150,16383,49150,16383,16383,49150,49150,16383,16383,16383,16383,16383,49150,49150,16383,16383,49150,16383,49150,16383,49150,16383,16383,49150,49150,16383,16383,16383,16383,16383,49150,16383,49150,49150,16383,16383,49150,49150,49150,49150,49150,16383,16383,49150,49150,16383,49150,16383,16383,16383,49150,16383,16383,16383,49150,49150,16383,16383,49150,16383,49150,49150,49150,16383,49150,49150,16383,49150,49150,49150,16383,49150,16383,16383,16383,49150,49150,16383,16383,16383,49150,49150,16383,16383,49150,16383,16383,49150,49150,49150,16383,49150,16383,16383,16383,49150,16383,49150,16383,49150,49150,49150],"packedNormals":[127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,0,127,127,0,127,0,127,127,0,127,254,127,127,254,127,127,0,127,127,0,127,127,127,254,127,127,254,127],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,24,3,25,4,5,6,26,7,27,8,9,10,28,11,29,12,13,14,30,15,31,16,17,18,32,19,33,20,21,22,34,23,35]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[1624928220,3179235055,2752232454,2588701877],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[-32.7671,-6.0001,-8.2503],"m_extents":[17.0165,9.0,19.0]},"packedVertices":[47225,16383,35237,49150,16383,35237,49150,16383,42018,47225,16383,42018,38626,16383,16383,49150,16383,16383,49150,16383,21586,47225,16383,21586,47225,16383,45701,42443,16383,45701,42443,16383,47425,40136,16383,49150,38626,16383,18108,35961,16383,49150,34227,16383,43976,16383,16383,18108,28724,16383,43976,28724,16383,45701,27114,16383,47425,22322,16383,47425,20924,16383,45701,16383,16383,45701,34227,16383,47597,49150,38956,16383,49150,16383,16383,38626,16383,16383,38626,38956,16383,38626,16383,16383,38626,16383,18108,38626,38956,18108,38626,38956,16383,47225,49150,18108,47225,38956,18108,38626,38956,18108,34227,48786,18108,34227,49150,18108,38626,16383,18108,16383,16383,18108,16383,49150,18108,29411,48786,18108,29411,49150,18108,16383,16383,18108,16383,16383,45701,16383,49150,45701,16383,49150,18108,16383,49150,45701,16383,16383,45701,20924,16383,45701,20924,38956,45701,24655,45145,45701,37101,45145,45701,29411,48786,45701,29411,49150,45701,42443,38956,45701,42443,16383,45701,47225,16383,45701,47225,49150,45701,37101,38956,45701,34227,48786,45701,34227,49150,45701,24655,38956,45701,20924,16383,45701,22322,16383,47425,22322,38956,47425,20924,38956,45701,22322,38956,47425,22322,16383,47425,27114,16383,47425,27114,38956,47425,28724,38956,45701,27114,38956,47425,27114,16383,47425,28724,16383,45701,28724,38956,43976,28724,38956,45701,28724,16383,45701,28724,16383,43976,28724,16383,43976,34227,16383,43976,34227,38956,43976,28724,38956,43976,26579,38956,43976,37101,38956,43976,26579,45145,43976,37101,45145,43976,34227,16383,43976,34227,16383,47597,34227,38956,47597,34227,38956,43976,34227,16383,47597,35961,16383,49150,35961,38956,49150,34227,38956,47597,35961,16383,49150,40136,16383,49150,40136,38956,49150,35961,38956,49150,40136,38956,49150,40136,16383,49150,42443,16383,47425,42443,38956,47425,42443,38956,45701,42443,38956,47425,42443,16383,47425,42443,16383,45701,47225,49150,18108,47225,49150,29748,47225,48786,29748,47225,38956,21586,47225,38956,18108,47225,49150,34060,47225,49150,45701,47225,38956,42018,47225,38956,35237,47225,16383,35237,47225,48786,34060,47225,16383,21586,47225,16383,45701,47225,16383,42018,47225,38956,42018,47225,16383,42018,49150,16383,42018,49150,38956,42018,49150,38956,35237,49150,38956,42018,49150,16383,42018,49150,16383,35237,49150,38956,35237,49150,16383,35237,47225,16383,35237,47225,38956,35237,47225,38956,21586,47225,16383,21586,49150,16383,21586,49150,38956,21586,49150,38956,16383,49150,38956,21586,49150,16383,21586,49150,16383,16383,47225,38956,21586,49150,38956,21586,49150,38956,16383,47225,38956,18108,38626,38956,16383,38626,38956,18108,34227,49150,29748,47225,49150,29748,47225,49150,18108,34227,49150,18108,34227,48786,18108,34227,48786,29748,34227,49150,29748,34227,49150,18108,29411,48786,45701,34227,48786,45701,34227,48786,34060,34227,48786,29748,34227,48786,18108,29411,48786,18108,47225,48786,34060,47225,48786,29748,29411,49150,18108,29411,49150,45701,29411,48786,45701,29411,48786,18108,16383,49150,45701,29411,49150,45701,29411,49150,18108,16383,49150,18108,34227,48786,34060,34227,48786,45701,34227,49150,45701,34227,49150,34060,34227,49150,45701,47225,49150,45701,47225,49150,34060,34227,49150,34060,40136,38956,49150,42443,38956,47425,42443,38956,45701,37101,38956,45701,35961,38956,49150,37101,38956,43976,34227,38956,43976,34227,38956,47597,37101,38956,43976,37101,38956,45701,37101,45145,45701,37101,45145,43976,26579,45145,43976,37101,45145,43976,37101,45145,45701,24655,45145,45701,26579,45145,43976,24655,45145,45701,24655,38956,45701,26579,38956,43976,27114,38956,47425,28724,38956,45701,28724,38956,43976,26579,38956,43976,24655,38956,45701,22322,38956,47425,20924,38956,45701,47225,38956,42018,49150,38956,42018,49150,38956,35237,47225,38956,35237,47225,49150,34060,47225,48786,34060,34227,48786,34060,34227,49150,34060,34227,49150,29748,34227,48786,29748,47225,48786,29748,47225,49150,29748,47225,49150,45701,47225,48422,45701,45175,48422,45701,37787,38956,45701,37101,38956,45701,45057,49150,45701,37101,38956,46994,45057,49150,46994,45057,49150,45701,37101,38956,45701,37101,38956,45701,37787,38956,45701,37787,38956,46994,37101,38956,46994,37787,38956,45701,45175,48422,45701,45175,48422,46994,37787,38956,46994,45175,48422,45701,47225,48422,45701,47225,48422,46994,45175,48422,46994,47225,49150,46994,47225,48422,46994,47225,48422,45701,45057,49150,46994,47225,49150,46994,45057,49150,45701,45057,49150,46994,37101,38956,46994,37787,38956,46994,45175,48422,46994,47225,48422,46994,47225,49150,46994,47225,16383,35237,47225,16383,35237,47225,16383,35237,49150,16383,42018,47225,16383,42018,47225,16383,42018,38626,16383,16383,38626,16383,16383,38626,16383,16383,38626,16383,16383,38626,16383,16383,38626,16383,16383,38626,16383,16383,38626,16383,16383,49150,16383,21586,47225,16383,21586,47225,16383,45701,42443,16383,45701,42443,16383,47425,40136,16383,49150,40136,16383,49150,38626,16383,18108,38626,16383,18108,38626,16383,18108,35961,16383,49150,35961,16383,49150,34227,16383,43976,34227,16383,43976,34227,16383,43976,16383,16383,18108,16383,16383,18108,16383,16383,18108,16383,16383,18108,16383,16383,18108,16383,16383,18108,28724,16383,43976,28724,16383,45701,27114,16383,47425,22322,16383,47425,20924,16383,45701,49150,38956,16383,38626,16383,16383,38626,16383,16383,38626,38956,18108,47225,49150,18108,47225,49150,18108,38626,38956,18108,38626,38956,18108,38626,38956,18108,38626,38956,18108,38626,38956,18108,34227,48786,18108,34227,48786,18108,16383,16383,18108,16383,49150,18108,16383,49150,18108,29411,48786,18108,29411,48786,18108,16383,16383,18108,16383,49150,45701,16383,49150,45701,16383,49150,45701,16383,49150,45701,16383,49150,45701,16383,49150,45701,20924,16383,45701,20924,38956,45701,20924,38956,45701,24655,45145,45701,24655,45145,45701,37101,45145,45701,37101,45145,45701,37101,45145,45701,37101,45145,45701,29411,48786,45701,29411,48786,45701,42443,38956,45701,42443,38956,45701,47225,16383,45701,47225,49150,45701,47225,49150,45701,47225,49150,45701,47225,49150,45701,37101,38956,45701,34227,48786,45701,34227,48786,45701,20924,16383,45701,22322,38956,47425,22322,38956,47425,27114,16383,47425,28724,38956,45701,27114,16383,47425,28724,38956,43976,28724,16383,45701,28724,16383,43976,34227,38956,43976,34227,38956,43976,34227,38956,43976,28724,38956,43976,26579,38956,43976,26579,38956,43976,37101,38956,43976,37101,38956,43976,26579,45145,43976,34227,16383,43976,34227,38956,47597,34227,16383,47597,35961,38956,49150,35961,16383,49150,40136,38956,49150,40136,38956,49150,42443,16383,47425,42443,38956,45701,42443,16383,47425,47225,49150,18108,47225,49150,18108,47225,48786,29748,47225,48786,29748,47225,48786,29748,47225,38956,21586,47225,38956,21586,47225,49150,34060,47225,49150,34060,47225,49150,34060,47225,49150,45701,47225,49150,45701,47225,49150,45701,47225,38956,42018,47225,38956,42018,47225,38956,35237,47225,16383,35237,47225,16383,35237,47225,48786,34060,47225,48786,34060,47225,16383,21586,47225,16383,21586,47225,16383,42018,47225,38956,42018,49150,16383,42018,49150,38956,35237,49150,16383,42018,49150,38956,35237,47225,16383,35237,47225,38956,21586,49150,16383,21586,49150,38956,16383,49150,16383,21586,47225,38956,21586,49150,38956,16383,49150,38956,16383,47225,38956,18108,47225,38956,18108,38626,38956,16383,34227,49150,29748,47225,49150,18108,34227,48786,18108,34227,49150,29748,29411,48786,45701,29411,48786,45701,29411,48786,45701,34227,48786,34060,34227,48786,34060,34227,48786,34060,34227,48786,29748,34227,48786,29748,34227,48786,18108,47225,48786,29748,29411,49150,18108,29411,48786,45701,16383,49150,45701,29411,49150,18108,34227,48786,34060,34227,49150,45701,34227,49150,45701,47225,49150,45701,47225,49150,45701,47225,49150,34060,40136,38956,49150,40136,38956,49150,42443,38956,45701,37101,38956,45701,37101,38956,45701,35961,38956,49150,35961,38956,49150,35961,38956,49150,37101,38956,43976,34227,38956,43976,37101,38956,43976,37101,45145,45701,26579,45145,43976,37101,45145,45701,26579,45145,43976,24655,38956,45701,27114,38956,47425,27114,38956,47425,27114,38956,47425,28724,38956,43976,26579,38956,43976,24655,38956,45701,24655,38956,45701,22322,38956,47425,47225,38956,42018,49150,38956,35237,47225,49150,34060,34227,48786,34060,34227,49150,29748,47225,48786,29748,47225,49150,45701,45175,48422,45701,45175,48422,45701,45175,48422,45701,37101,38956,45701,45057,49150,45701,37101,38956,46994,45057,49150,45701,37101,38956,45701,37787,38956,46994,37787,38956,45701,45175,48422,46994,45175,48422,45701,47225,48422,46994,47225,49150,46994,47225,48422,45701,45057,49150,46994,45057,49150,46994,45057,49150,46994,45057,49150,46994,37787,38956,46994,45175,48422,46994,47225,48422,46994],"packedNormals":[127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,24,127,201,24,127,201,24,127,201,24,127,201,127,127,254,127,127,254,127,127,254,127,127,254,224,127,207,224,127,207,224,127,207,224,127,207,254,127,127,254,127,127,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,0,127,127,37,127,216,37,127,216,37,127,216,37,127,216,127,127,254,127,127,254,127,127,254,127,127,254,208,127,224,208,127,224,208,127,224,208,127,224,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,127,127,0,127,216,127,216,216,127,216,216,127,216,216,127,216,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,55,232,127,55,232,127,55,232,127,55,232,127,127,0,127,127,0,127,127,0,127,127,0,127,198,21,127,198,21,127,198,21,127,198,21,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,24,127,201,24,127,201,127,127,254,127,127,254,224,127,207,224,127,207,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,37,127,216,37,127,216,127,127,254,127,127,254,208,127,224,208,127,224,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,127,254,127,127,254,254,127,127,254,127,127,127,127,0,127,127,0,127,127,254,127,127,254,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,127,254,127,127,254,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,127,0,127,127,0,127,216,127,216,216,127,216,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,55,232,127,55,232,127,127,0,127,127,0,127,198,21,127,198,21,127,127,0,127,127,0,127,254,127,127,254,127,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1146,0.943],[0.115,0.943],[0.115,0.9437],[0.1146,0.9434],[0.1128,0.9437],[0.1128,0.9434],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1146,0.9415],[0.1146,0.9416],[0.1146,0.9416],[0.1141,0.9416],[0.114,0.9415],[0.114,0.9416],[0.1136,0.9416],[0.1137,0.9416],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1128,0.9416],[0.1128,0.9416],[0.1128,0.9416],[0.1124,0.9416],[0.1123,0.9416],[0.112,0.9416],[0.1118,0.9416],[0.1154,0.9416],[0.1155,0.9416],[0.1155,0.9422],[0.115,0.9422],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1141,0.9416],[0.115,0.9473],[0.115,0.9476],[0.1141,0.9416],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1141,0.9416],[0.115,0.9472],[0.115,0.947],[0.1142,0.9416],[0.115,0.9472],[0.1154,0.9472],[0.1155,0.947],[0.115,0.947],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.115,0.9473],[0.1141,0.9416],[0.1142,0.9416],[0.115,0.947],[0.1155,0.947],[0.1155,0.9473],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1146,0.943],[0.115,0.9437],[0.115,0.9437],[0.1146,0.9434],[0.1146,0.9434],[0.1128,0.9437],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1146,0.9415],[0.1146,0.9415],[0.1146,0.9416],[0.1141,0.9416],[0.1141,0.9416],[0.114,0.9415],[0.114,0.9415],[0.114,0.9415],[0.114,0.9416],[0.1136,0.9416],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1128,0.9416],[0.1128,0.9416],[0.1128,0.9416],[0.1128,0.9416],[0.1124,0.9416],[0.1123,0.9416],[0.1123,0.9416],[0.112,0.9416],[0.1154,0.9416],[0.1155,0.9422],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1141,0.9416],[0.115,0.9476],[0.0,0.0],[0.0,0.0],[0.1141,0.9416],[0.115,0.947],[0.115,0.9472],[0.1155,0.947],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.115,0.9473],[0.115,0.9473],[0.115,0.9473],[0.1142,0.9416],[0.115,0.947],[0.1155,0.947]],"packedWeights":[],"packedIndices":[[0,1,2,253,3,250,4,5,6,264,7,256,265,251,257,252,254,258,255,8,259,266,9,260,267,10,261,268,11,262,269,12,263,270,13,271,274,14,272,276,15,273,277,16,279,285,17,280,286,18,281,287,19,282,288,20,283,289,21,284,22,278,275,23,24,25,291,26,290,27,28,29,293,30,292,31,32,33,296,34,294,301,35,295,297,36,37,303,38,298,304,39,299,306,302,300,305,40,307,41,42,43,309,44,308,45,46,47,315,48,310,316,49,311,318,50,312,320,51,313,324,52,314,53,54,55,328,56,326,329,57,327,330,321,333,331,58,322,334,325,323,332,59,335,319,317,60,61,62,63,337,64,336,65,66,67,339,68,338,69,70,71,341,72,340,73,74,75,343,76,342,77,78,79,345,80,344,346,81,348,347,82,349,351,83,350,352,84,353,85,86,87,355,88,354,89,90,91,357,92,356,93,94,95,359,96,358,97,98,99,361,100,360,101,102,103,363,104,362,105,106,107,366,108,364,369,109,365,110,111,112,377,113,371,379,114,372,380,115,373,381,116,382,384,367,383,385,370,368,374,117,118,386,378,375,119,120,121,388,122,387,123,124,125,390,126,389,127,128,129,392,130,391,131,132,133,394,134,393,135,136,137,396,138,395,139,140,141,398,142,397,399,143,400,402,144,401,145,146,147,404,148,403,149,150,151,406,152,405,153,154,155,410,156,407,413,157,408,415,158,409,411,159,160,416,414,412,161,162,163,418,164,417,165,166,167,420,168,419,169,170,171,422,172,421,173,174,175,426,176,423,177,178,179,429,180,427,430,181,428,431,182,432,435,183,433,436,184,434,185,186,187,438,188,437,189,190,191,440,192,439,193,194,195,442,196,441,197,198,199,446,200,443,447,201,444,448,202,445,449,203,450,204,205,206,452,207,451,208,209,210,454,211,453,212,213,214,456,215,455,216,217,218,458,219,220,461,221,459,462,457,460,222,223,224,464,225,463,226,227,228,466,229,465,230,231,232,468,233,467,234,235,236,470,237,469,238,239,240,472,376,471,241,242,424,425,243,473,244,245,246,477,247,474,478,248,475,479,249,476]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[3096744268,1889881536,2295635813,2735756022],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[-0.3501,-3.3403,-0.2799],"m_extents":[18.5,11.4603,20.0]},"packedVertices":[45608,44689,17612,45608,36969,17612,37637,44975,17612,45608,44975,17612,45608,44975,17612,37637,44975,17612,42065,44975,19250,42951,44975,20069,34980,44975,19250,37637,44975,16383,34980,44975,16383,37637,44975,17612,45608,36969,17612,45608,36969,16383,37637,44975,16383,49150,36969,20888,49150,16382,20888,45608,16382,17612,45608,36969,17612,49150,44689,20888,45608,44689,17612,42951,44975,20069,42951,44689,20069,45608,44689,17612,45608,44975,17612,34980,44689,17612,34980,44689,19250,34980,44975,19250,34980,44975,16383,34980,44689,16383,37637,44975,16383,45608,36969,16383,44937,36969,16383,37536,44403,16383,34980,44403,16383,34980,44689,16383,34980,44975,16383,42065,44975,19250,42065,44689,19250,42951,44689,20069,42951,44975,20069,34980,44975,19250,34980,44689,19250,42065,44689,19250,42065,44975,19250,44937,36969,16383,45608,36969,16383,45608,36969,17612,44937,36969,17612,34980,44689,17612,34980,44403,17612,30553,44403,17612,30553,44689,17612,44937,36969,17612,20596,36969,17612,27997,44403,17612,37536,44403,17612,45608,16382,17612,19925,16382,17612,19925,36969,17612,45608,16382,17612,49150,16382,20888,49150,16382,44645,45608,16382,47921,19925,16382,17612,19925,16382,47921,16383,16382,20888,16383,16382,44645,49150,44975,20888,49150,44975,30719,49150,44689,30719,49150,44975,34814,49150,44975,44645,49150,44689,44645,49150,16382,44645,49150,44689,34814,49150,16382,20888,49150,44689,20888,49150,36969,20888,46493,44689,42187,47379,44689,41368,47379,44689,34814,47379,44689,30719,47379,44689,24165,46493,44689,23346,45608,44689,47921,49150,44689,44645,30553,44689,47921,34980,44689,47921,34980,44689,46283,49150,44689,34814,49150,44689,30719,49150,44689,20888,45608,44689,17612,42951,44689,45464,42951,44689,20069,42951,44689,26623,42065,44689,19250,39408,44689,23346,34980,44689,19250,26125,44689,23346,34980,44689,17612,30553,44689,19250,23468,44689,19250,22582,44689,26623,22582,44689,20069,42951,44689,38910,42065,44689,46283,39408,44689,42187,26125,44689,42187,30553,44689,46283,23468,44689,46283,22582,44689,38910,22582,44689,45464,19925,44689,17612,19925,44689,47921,19040,44689,42187,16383,44689,44645,16383,44689,34814,18154,44689,34814,18154,44689,30719,16383,44689,30719,18154,44689,41368,19040,44689,23346,18154,44689,24165,16383,44689,20888,30553,44689,17612,34980,44403,16383,34980,44403,17612,37536,44403,16383,44937,36969,16383,44937,36969,17612,37536,44403,17612,34980,44403,16383,37536,44403,16383,37536,44403,17612,34980,44403,17612,20596,36969,16383,27997,44403,16383,27997,44403,17612,20596,36969,17612,19925,36969,16383,20596,36969,16383,20596,36969,17612,19925,36969,17612,19925,16382,17612,16383,16382,20888,16383,36969,20888,16383,44689,20888,19925,44689,17612,19925,36969,17612,30553,44689,16383,30553,44689,17612,30553,44403,17612,30553,44403,16383,27997,44403,16383,30553,44403,16383,30553,44403,17612,27997,44403,17612,16383,16382,20888,16383,16382,44645,16383,36969,44645,16383,44689,34814,16383,44689,30719,16383,44975,30719,16383,44975,20888,16383,36969,20888,16383,44689,20888,16383,44689,44645,16383,44975,44645,16383,44975,34814,16383,16382,44645,19925,16382,47921,19925,36969,47921,19925,44689,47921,16383,44689,44645,16383,36969,44645,19925,36969,47921,19925,16382,47921,45608,16382,47921,20596,36969,47921,27997,44403,47921,44937,36969,47921,37536,44403,47921,34980,44403,47921,30553,44403,47921,30553,44689,47921,34980,44689,47921,45608,36969,47921,49150,44689,44645,45608,44689,47921,45608,36969,47921,45608,16382,47921,49150,16382,44645,46493,44689,42187,49150,44689,44645,49150,44975,44645,46493,44975,42187,49150,44975,44645,49150,44975,34814,47379,44975,41368,46493,44975,42187,47379,44975,34814,49150,44975,34814,49150,44689,34814,47379,44689,34814,47379,44975,34814,47379,44975,30719,47379,44689,30719,49150,44689,30719,49150,44975,30719,47379,44975,30719,49150,44975,30719,49150,44975,20888,47379,44975,24165,46493,44975,23346,49150,44689,20888,46493,44689,23346,46493,44975,23346,49150,44975,20888,46493,44975,23346,46493,44689,23346,47379,44689,24165,47379,44975,24165,47379,44689,24165,47379,44689,30719,47379,44975,30719,47379,44975,24165,47379,44689,34814,47379,44689,41368,47379,44975,41368,47379,44975,34814,47379,44689,41368,46493,44689,42187,46493,44975,42187,47379,44975,41368,42951,44975,45464,45608,44975,47921,45608,44689,47921,42951,44689,45464,42951,44975,45464,42951,44689,45464,42065,44689,46283,42065,44975,46283,42065,44975,46283,42065,44689,46283,34980,44689,46283,34980,44975,46283,34980,44689,47921,34980,44689,49150,34980,44975,49150,34980,44975,46283,34980,44689,46283,30553,44975,46283,30553,44975,49150,30553,44689,49150,30553,44689,47921,30553,44689,46283,30553,44975,46283,30553,44689,46283,23468,44689,46283,23468,44975,46283,23468,44975,46283,23468,44689,46283,22582,44689,45464,22582,44975,45464,22582,44689,45464,19925,44689,47921,19925,44975,47921,22582,44975,45464,19040,44975,42187,16383,44975,44645,16383,44689,44645,19040,44689,42187,19040,44975,42187,19040,44689,42187,18154,44689,41368,18154,44975,41368,18154,44975,34814,18154,44975,41368,18154,44689,41368,18154,44689,34814,18154,44975,34814,18154,44689,34814,16383,44689,34814,16383,44975,34814,16383,44975,30719,16383,44689,30719,18154,44689,30719,18154,44975,30719,18154,44975,24165,18154,44975,30719,18154,44689,30719,18154,44689,24165,19040,44975,23346,18154,44975,24165,18154,44689,24165,19040,44689,23346,16383,44975,20888,19040,44975,23346,19040,44689,23346,16383,44689,20888,19925,44689,17612,22582,44689,20069,22582,44975,20069,19925,44975,17612,22582,44975,20069,22582,44689,20069,23468,44689,19250,23468,44975,19250,23468,44975,19250,23468,44689,19250,30553,44689,19250,30553,44975,19250,30553,44975,16383,30553,44975,19250,30553,44689,19250,30553,44689,16383,30553,44403,16383,27997,44403,16383,20596,36969,16383,19925,36969,16383,27896,44975,16383,30553,44975,16383,19925,36969,17612,27896,44975,17612,27896,44975,16383,19925,36969,16383,27896,44975,17612,19925,44689,17612,19925,44975,17612,16383,44975,30719,18154,44975,30719,18154,44975,24165,19040,44975,23346,16383,44975,20888,16383,44975,44645,19040,44975,42187,18154,44975,41368,18154,44975,34814,16383,44975,34814,19925,44689,47921,27896,44975,47921,19925,44975,47921,37536,44403,47921,44937,36969,47921,44937,36969,49150,37536,44403,49150,44937,36969,47921,45608,36969,47921,45608,36969,49150,44937,36969,49150,19925,36969,47921,20596,36969,47921,20596,36969,49150,19925,36969,49150,20596,36969,47921,27997,44403,47921,27997,44403,49150,20596,36969,49150,27997,44403,47921,30553,44403,47921,30553,44403,49150,27997,44403,49150,30553,44403,49150,30553,44403,47921,34980,44403,47921,34980,44403,49150,34980,44403,47921,37536,44403,47921,37536,44403,49150,34980,44403,49150,37637,44975,47921,45608,44689,47921,45608,44975,47921,34980,44975,49150,37637,44975,49150,37637,44975,47921,45608,44975,47921,42951,44975,45464,42065,44975,46283,34980,44975,46283,37536,44403,49150,44937,36969,49150,45608,36969,49150,37637,44975,49150,34980,44403,49150,34980,44689,49150,34980,44975,49150,27896,44975,49150,30553,44975,49150,30553,44975,46283,27896,44975,47921,23468,44975,46283,19925,44975,47921,22582,44975,45464,19925,36969,49150,20596,36969,49150,27997,44403,49150,27896,44975,49150,30553,44403,49150,30553,44689,49150,30553,44975,49150,30553,44975,19250,30553,44975,16383,27896,44975,17612,23468,44975,19250,19925,44975,17612,22582,44975,20069,27896,44975,16383,19925,36969,49150,27896,44975,49150,27896,44975,47921,19925,36969,47921,37637,44975,49150,45608,36969,49150,45608,36969,47921,37637,44975,47921,42951,44975,38910,42951,44975,26623,39408,44975,23346,39408,44975,42187,26125,44975,23346,26125,44975,42187,22582,44975,26623,22582,44975,38910,22582,44689,26623,22582,44689,38910,22582,44975,38910,22582,44975,26623,26125,44975,23346,26125,44689,23346,22582,44689,26623,22582,44975,26623,39408,44975,23346,39408,44689,23346,26125,44689,23346,26125,44975,23346,39408,44975,23346,42951,44975,26623,42951,44689,26623,39408,44689,23346,42951,44975,26623,42951,44975,38910,42951,44689,38910,42951,44689,26623,42951,44975,38910,39408,44975,42187,39408,44689,42187,42951,44689,38910,26125,44975,42187,26125,44689,42187,39408,44689,42187,39408,44975,42187,22582,44689,38910,26125,44689,42187,26125,44975,42187,22582,44975,38910,28185,44975,26261,29401,45330,26261,29401,44975,25505,27629,45609,27900,29401,45330,26261,27629,44975,26595,28185,44975,26261,29401,44975,25505,29401,45330,26261,30461,44975,25280,32943,44975,40769,33245,44975,40727,31524,44975,40680,34714,44975,40627,31172,44975,40627,30011,44975,40442,35424,44975,40349,36485,44975,40124,29401,44975,40124,28713,44975,40004,37701,44975,39368,28185,44975,39368,27799,44975,39211,38256,44975,39034,27629,44975,39034,26659,44975,38627,39667,44975,37730,26219,44975,37730,26028,44975,37573,40028,44975,37216,25858,44975,37216,25170,44975,36727,40845,44975,36091,25041,44975,36091,24697,44975,35527,41089,44975,35110,41389,44975,34453,24497,44975,34453,24440,44975,34127,41497,44975,33094,41542,44975,32815,24344,44975,32815,24389,44975,32535,41446,44975,31502,41389,44975,31176,24497,44975,31176,24797,44975,30519,41189,44975,30102,40845,44975,29538,25041,44975,29538,40715,44975,28902,25858,44975,28413,40028,44975,28413,39858,44975,28056,39667,44975,27900,26219,44975,27900,39227,44975,27002,27629,44975,26595,38256,44975,26595,38087,44975,26418,37701,44975,26261,28185,44975,26261,37173,44975,25625,29401,44975,25505,36485,44975,25505,30461,44975,25280,35875,44975,25187,34714,44975,25002,31172,44975,25002,34361,44975,24949,32641,44975,24902,32943,44975,24860,26219,44975,27900,27629,45609,27900,27629,44975,26595,29401,46507,27900,31172,45764,26261,31172,44975,25002,31524,44975,40680,32943,45932,39368,31172,44975,40627,31172,45764,39368,32943,44975,40769,33245,44975,40727,34714,45764,39368,32943,44975,40769,32943,45932,39368,34714,44975,40627,35424,44975,40349,36485,45330,39368,34714,44975,40627,34714,45764,39368,36485,44975,40124,36485,45330,39368,36485,44975,40124,37701,44975,39368,37701,44975,39368,38256,44975,39034,36485,45330,39368,38256,45609,37730,38256,45609,37730,38256,44975,39034,39667,44975,37730,39667,44975,37730,40028,44975,37216,38256,45609,37730,40028,45330,36091,40028,45330,36091,40028,44975,37216,40845,44975,36091,40028,45330,36091,40845,44975,36091,41089,44975,35110,41389,44975,34453,40028,45764,34453,40028,45764,34453,41389,44975,34453,41497,44975,33094,41542,44975,32815,40028,45932,32815,40028,45932,32815,41542,44975,32815,41446,44975,31502,41389,44975,31176,40028,45764,31176,40028,45764,31176,41389,44975,31176,41189,44975,30102,40845,44975,29538,40028,45330,29538,40028,45330,29538,40845,44975,29538,40715,44975,28902,40028,44975,28413,40028,45330,29538,40028,44975,28413,38256,46507,29538,39858,44975,28056,39667,44975,27900,38256,45609,27900,38256,45609,27900,39667,44975,27900,39227,44975,27002,38256,44975,26595,38256,45609,27900,38256,44975,26595,36485,46507,27900,38087,44975,26418,37701,44975,26261,36485,45330,26261,36485,45330,26261,37701,44975,26261,37173,44975,25625,36485,44975,25505,36485,45330,26261,36485,44975,25505,34714,45764,26261,35875,44975,25187,34714,44975,25002,34714,45764,26261,34714,44975,25002,32943,45932,26261,34361,44975,24949,32943,44975,24860,31172,45764,26261,32943,45932,26261,32641,44975,24902,32943,44975,24860,31172,44975,25002,25858,45330,29538,27629,45609,27900,25858,44975,28413,26219,44975,27900,25041,44975,29538,25858,45330,29538,25858,44975,28413,25041,44975,29538,24797,44975,30519,25858,45330,29538,24497,44975,31176,25858,45764,31176,24497,44975,31176,24389,44975,32535,25858,45764,31176,24344,44975,32815,25858,45932,32815,24344,44975,32815,24440,44975,34127,25858,45932,32815,24497,44975,34453,25858,45764,34453,24497,44975,34453,24697,44975,35527,25858,45764,34453,25041,44975,36091,25858,45330,36091,25041,44975,36091,25170,44975,36727,25858,45330,36091,25858,44975,37216,26028,44975,37573,27629,46507,36091,25858,44975,37216,25858,45330,36091,26219,44975,37730,27629,45609,37730,26219,44975,37730,26659,44975,38627,27629,45609,37730,27629,44975,39034,27799,44975,39211,29401,46507,37730,27629,44975,39034,27629,45609,37730,28185,44975,39368,29401,45330,39368,28185,44975,39368,28713,44975,40004,29401,45330,39368,29401,44975,40124,30011,44975,40442,31172,45764,39368,29401,44975,40124,29401,45330,39368,31172,44975,40627,27629,45609,27900,27629,46507,29538,29401,46507,27900,29401,45330,26261,29401,46507,27900,31172,45764,26261,31172,45764,39368,32943,45932,39368,32943,47461,37730,32943,45932,39368,34714,45764,39368,34714,47201,37730,34714,45764,39368,36485,45330,39368,36485,46507,37730,36485,46507,37730,38256,46507,36091,38256,46507,36091,40028,45330,36091,40028,45764,34453,38256,47201,34453,40028,45764,34453,40028,45932,32815,38256,47461,32815,40028,45932,32815,40028,45764,31176,38256,47201,31176,40028,45764,31176,40028,45330,29538,38256,46507,29538,36485,47735,29538,38256,46507,29538,38256,45609,27900,36485,46507,27900,34714,47201,27900,36485,46507,27900,36485,45330,26261,34714,45764,26261,32943,45932,26261,32943,47461,27900,34714,45764,26261,31172,45764,26261,31172,47201,27900,32943,45932,26261,27629,46507,29538,25858,45330,29538,25858,45764,31176,27629,46507,29538,25858,45764,31176,25858,45932,32815,27629,47201,31176,25858,45932,32815,25858,45764,34453,27629,47461,32815,25858,45764,34453,25858,45330,36091,27629,47201,34453,27629,46507,36091,27629,46507,36091,27629,45609,37730,29401,47735,36091,29401,46507,37730,29401,46507,37730,29401,45330,39368,31172,47201,37730,31172,45764,39368,29401,47735,29538,31172,47201,27900,31172,47201,37730,32943,47461,37730,34714,47201,37730,36485,46507,37730,38256,45609,37730,38256,46507,36091,38256,47201,34453,38256,47461,32815,38256,47201,31176,36485,48652,31176,38256,47201,31176,38256,46507,29538,36485,47735,29538,34714,48652,29538,36485,47735,29538,36485,46507,27900,34714,47201,27900,34714,47201,27900,32943,47461,27900,27629,47201,31176,27629,47461,32815,27629,47201,34453,27629,47201,34453,27629,46507,36091,29401,48652,34453,29401,47735,36091,29401,47735,36091,29401,46507,37730,31172,48652,36091,31172,47201,37730,27629,46507,29538,27629,47201,31176,29401,47735,29538,29401,46507,27900,29401,47735,29538,31172,47201,27900,31172,47201,37730,32943,47461,37730,32943,48991,36091,32943,47461,37730,34714,47201,37730,34714,48652,36091,34714,47201,37730,36485,46507,37730,36485,47735,36091,36485,47735,36091,36485,47735,36091,38256,46507,36091,38256,47201,34453,36485,48652,34453,38256,47201,34453,38256,47461,32815,36485,48991,32815,38256,47461,32815,38256,47201,31176,36485,48652,31176,34714,49150,31176,36485,48652,31176,36485,47735,29538,34714,48652,29538,32943,48991,29538,34714,48652,29538,34714,47201,27900,32943,47461,27900,31172,47201,27900,31172,48652,29538,32943,47461,27900,27629,47201,31176,27629,47461,32815,29401,48652,31176,27629,47461,32815,27629,47201,34453,29401,48991,32815,29401,48652,34453,29401,48652,34453,29401,47735,36091,31172,49150,34453,31172,48652,36091,31172,48652,36091,29401,48652,31176,31172,48652,29538,32943,48991,36091,34714,48652,36091,36485,48652,34453,36485,48991,32815,34714,48667,32815,36485,48991,32815,36485,48652,31176,34714,49150,31176,32943,48667,31176,34714,49150,31176,34714,48652,29538,32943,48991,29538,32943,48991,29538,29401,48991,32815,29401,48991,32815,29401,48652,34453,31172,48667,32815,31172,49150,34453,31172,49150,34453,31172,48652,36091,32943,48667,34453,32943,48991,36091,29401,47735,29538,29401,48652,31176,31172,48652,29538,32943,48991,36091,34714,48652,36091,34714,49150,34453,34714,48652,36091,36485,47735,36091,36485,48652,34453,34714,49150,34453,36485,48652,34453,36485,48991,32815,34714,48667,32815,32943,48844,32815,34714,48667,32815,34714,49150,31176,32943,48667,31176,31172,49150,31176,32943,48667,31176,32943,48991,29538,31172,48652,29538,29401,48652,31176,29401,48991,32815,31172,49150,31176,31172,48667,32815,31172,48667,32815,31172,49150,34453,32943,48844,32815,32943,48667,34453,32943,48667,34453,31172,49150,31176,34714,49150,34453,32943,48667,34453,34714,49150,34453,34714,48667,32815,32943,48844,32815,31172,48667,32815,32943,48844,32815,32943,48667,31176,31172,49150,31176,45608,44689,17612,45608,36969,17612,45608,36969,17612,45608,36969,17612,45608,36969,17612,37637,44975,17612,45608,44975,17612,37637,44975,17612,37637,44975,17612,42065,44975,19250,42065,44975,19250,34980,44975,19250,34980,44975,19250,37637,44975,16383,37637,44975,17612,45608,36969,16383,49150,36969,20888,49150,36969,20888,45608,16382,17612,45608,36969,17612,45608,36969,17612,49150,44689,20888,42951,44975,20069,45608,44689,17612,34980,44689,17612,34980,44689,17612,34980,44689,17612,34980,44689,17612,34980,44975,19250,34980,44975,16383,34980,44689,16383,37637,44975,16383,37637,44975,16383,37637,44975,16383,37637,44975,16383,44937,36969,16383,37536,44403,16383,34980,44403,16383,34980,44689,16383,42065,44975,19250,42951,44689,20069,34980,44975,19250,42065,44689,19250,44937,36969,16383,45608,36969,17612,34980,44689,17612,34980,44403,17612,34980,44403,17612,34980,44403,17612,30553,44403,17612,30553,44403,17612,44937,36969,17612,44937,36969,17612,44937,36969,17612,20596,36969,17612,20596,36969,17612,27997,44403,17612,27997,44403,17612,19925,16382,17612,19925,36969,17612,19925,36969,17612,45608,16382,17612,45608,16382,17612,49150,16382,44645,45608,16382,47921,45608,16382,47921,19925,16382,17612,19925,16382,17612,19925,16382,47921,19925,16382,47921,16383,16382,20888,49150,44975,20888,49150,44975,20888,49150,44689,30719,49150,44689,30719,49150,44975,34814,49150,44975,34814,49150,44689,44645,49150,16382,44645,49150,16382,44645,49150,44689,34814,49150,44689,34814,49150,16382,20888,49150,16382,20888,49150,16382,20888,49150,16382,20888,49150,44689,20888,46493,44689,42187,46493,44689,42187,46493,44689,42187,46493,44689,42187,46493,44689,42187,46493,44689,42187,47379,44689,34814,47379,44689,34814,47379,44689,34814,47379,44689,30719,47379,44689,30719,47379,44689,24165,46493,44689,23346,46493,44689,23346,45608,44689,47921,45608,44689,47921,30553,44689,47921,34980,44689,46283,34980,44689,46283,34980,44689,46283,34980,44689,46283,49150,44689,30719,45608,44689,17612,45608,44689,17612,45608,44689,17612,45608,44689,17612,42951,44689,45464,42951,44689,45464,42951,44689,45464,42951,44689,45464,42951,44689,20069,42951,44689,20069,42951,44689,26623,42951,44689,26623,42951,44689,26623,42065,44689,19250,42065,44689,19250,39408,44689,23346,39408,44689,23346,34980,44689,19250,34980,44689,19250,26125,44689,23346,26125,44689,23346,26125,44689,23346,26125,44689,23346,34980,44689,17612,34980,44689,17612,30553,44689,19250,30553,44689,19250,23468,44689,19250,23468,44689,19250,22582,44689,26623,22582,44689,26623,22582,44689,26623,22582,44689,20069,22582,44689,20069,42951,44689,38910,42951,44689,38910,42065,44689,46283,42065,44689,46283,39408,44689,42187,39408,44689,42187,26125,44689,42187,26125,44689,42187,26125,44689,42187,30553,44689,46283,30553,44689,46283,23468,44689,46283,23468,44689,46283,22582,44689,38910,22582,44689,38910,22582,44689,45464,22582,44689,45464,22582,44689,45464,22582,44689,45464,19925,44689,17612,19925,44689,17612,19925,44689,17612,19925,44689,17612,19925,44689,47921,19925,44689,47921,19040,44689,42187,19040,44689,42187,19040,44689,42187,16383,44689,34814,18154,44689,34814,18154,44689,34814,18154,44689,30719,18154,44689,30719,18154,44689,41368,18154,44689,41368,19040,44689,23346,19040,44689,23346,19040,44689,23346,18154,44689,24165,18154,44689,24165,34980,44403,16383,37536,44403,16383,44937,36969,17612,34980,44403,16383,37536,44403,17612,20596,36969,16383,27997,44403,17612,19925,36969,16383,20596,36969,17612,19925,16382,17612,19925,16382,17612,19925,16382,17612,16383,36969,20888,16383,44689,20888,19925,44689,17612,30553,44689,16383,30553,44689,16383,30553,44689,17612,30553,44689,17612,30553,44403,17612,27997,44403,16383,30553,44403,17612,16383,16382,20888,16383,16382,20888,16383,16382,20888,16383,16382,20888,16383,16382,20888,16383,36969,44645,16383,36969,44645,16383,36969,44645,16383,36969,44645,16383,44689,34814,16383,44689,34814,16383,44689,30719,16383,44975,30719,16383,44975,20888,16383,44975,20888,16383,36969,20888,16383,44975,44645,16383,44975,34814,16383,16382,44645,16383,16382,44645,16383,16382,44645,19925,36969,47921,19925,44689,47921,16383,44689,44645,19925,36969,47921,19925,36969,47921,45608,16382,47921,45608,16382,47921,20596,36969,47921,20596,36969,47921,20596,36969,47921,27997,44403,47921,27997,44403,47921,27997,44403,47921,44937,36969,47921,44937,36969,47921,37536,44403,47921,34980,44403,47921,34980,44403,47921,34980,44403,47921,30553,44403,47921,30553,44689,47921,45608,36969,47921,45608,36969,47921,49150,44689,44645,49150,44689,44645,45608,36969,47921,45608,16382,47921,46493,44689,42187,49150,44975,44645,49150,44975,44645,49150,44975,34814,47379,44975,41368,47379,44975,41368,49150,44975,34814,47379,44689,34814,47379,44975,30719,49150,44689,30719,47379,44975,30719,49150,44975,20888,49150,44975,20888,47379,44975,24165,49150,44689,20888,46493,44975,23346,46493,44975,23346,47379,44689,24165,47379,44689,24165,47379,44975,30719,47379,44689,34814,47379,44975,41368,47379,44689,41368,46493,44975,42187,42951,44975,45464,45608,44689,47921,42951,44975,45464,42065,44689,46283,42065,44975,46283,34980,44689,46283,34980,44689,47921,34980,44689,47921,34980,44689,47921,34980,44689,49150,34980,44689,49150,34980,44975,49150,34980,44975,46283,30553,44975,46283,30553,44975,46283,30553,44689,49150,30553,44689,49150,30553,44689,47921,30553,44689,47921,30553,44689,47921,30553,44975,46283,23468,44689,46283,23468,44975,46283,22582,44689,45464,22582,44689,45464,19925,44975,47921,19040,44975,42187,16383,44689,44645,19040,44975,42187,18154,44689,41368,18154,44975,34814,18154,44689,41368,18154,44975,34814,16383,44689,34814,16383,44975,30719,18154,44689,30719,18154,44975,24165,18154,44689,30719,19040,44975,23346,18154,44689,24165,16383,44975,20888,19040,44689,23346,19925,44689,17612,22582,44975,20069,22582,44975,20069,23468,44689,19250,23468,44975,19250,30553,44689,19250,30553,44975,16383,30553,44975,16383,30553,44689,19250,30553,44689,16383,30553,44689,16383,27997,44403,16383,27997,44403,16383,27997,44403,16383,19925,36969,16383,27896,44975,16383,27896,44975,16383,19925,36969,17612,27896,44975,16383,27896,44975,17612,19925,44689,17612,16383,44975,30719,18154,44975,24165,18154,44975,24165,16383,44975,20888,16383,44975,44645,16383,44975,44645,18154,44975,41368,18154,44975,34814,19925,44689,47921,27896,44975,47921,37536,44403,47921,44937,36969,49150,44937,36969,47921,45608,36969,49150,19925,36969,47921,20596,36969,49150,20596,36969,47921,27997,44403,49150,27997,44403,47921,30553,44403,49150,30553,44403,49150,34980,44403,47921,34980,44403,47921,37536,44403,49150,37637,44975,47921,45608,44689,47921,34980,44975,49150,37637,44975,47921,37637,44975,47921,37637,44975,47921,45608,44975,47921,42065,44975,46283,42065,44975,46283,34980,44975,46283,37536,44403,49150,37536,44403,49150,45608,36969,49150,37637,44975,49150,37637,44975,49150,37637,44975,49150,34980,44403,49150,34980,44689,49150,27896,44975,49150,30553,44975,46283,30553,44975,46283,27896,44975,47921,27896,44975,47921,23468,44975,46283,23468,44975,46283,19925,44975,47921,19925,36969,49150,27997,44403,49150,27997,44403,49150,27896,44975,49150,27896,44975,49150,27896,44975,49150,30553,44403,49150,30553,44689,49150,30553,44975,19250,30553,44975,16383,27896,44975,17612,27896,44975,17612,27896,44975,17612,23468,44975,19250,23468,44975,19250,19925,44975,17612,19925,36969,49150,27896,44975,47921,37637,44975,49150,45608,36969,47921,42951,44975,38910,39408,44975,23346,39408,44975,23346,39408,44975,42187,39408,44975,42187,26125,44975,23346,26125,44975,23346,26125,44975,42187,26125,44975,42187,22582,44975,26623,22582,44689,26623,22582,44975,38910,26125,44975,23346,22582,44689,26623,39408,44975,23346,26125,44689,23346,39408,44975,23346,42951,44689,26623,42951,44975,26623,42951,44689,38910,42951,44975,38910,39408,44689,42187,26125,44975,42187,39408,44689,42187,22582,44689,38910,26125,44975,42187,27629,45609,27900,29401,45330,26261,29401,45330,26261,27629,44975,26595,29401,45330,26261,30461,44975,25280,30461,44975,25280,33245,44975,40727,31524,44975,40680,31524,44975,40680,34714,44975,40627,34714,44975,40627,34714,44975,40627,31172,44975,40627,30011,44975,40442,30011,44975,40442,30011,44975,40442,35424,44975,40349,36485,44975,40124,36485,44975,40124,36485,44975,40124,29401,44975,40124,28713,44975,40004,28713,44975,40004,37701,44975,39368,37701,44975,39368,37701,44975,39368,28185,44975,39368,27799,44975,39211,27799,44975,39211,38256,44975,39034,38256,44975,39034,38256,44975,39034,27629,44975,39034,26659,44975,38627,26659,44975,38627,39667,44975,37730,39667,44975,37730,39667,44975,37730,26219,44975,37730,26028,44975,37573,26028,44975,37573,40028,44975,37216,40028,44975,37216,40028,44975,37216,25858,44975,37216,25170,44975,36727,25170,44975,36727,40845,44975,36091,40845,44975,36091,40845,44975,36091,25041,44975,36091,24697,44975,35527,24697,44975,35527,24697,44975,35527,41089,44975,35110,41389,44975,34453,41389,44975,34453,41389,44975,34453,24497,44975,34453,24440,44975,34127,24440,44975,34127,24440,44975,34127,41497,44975,33094,41542,44975,32815,41542,44975,32815,41542,44975,32815,24344,44975,32815,24389,44975,32535,24389,44975,32535,24389,44975,32535,41446,44975,31502,41389,44975,31176,41389,44975,31176,41389,44975,31176,24497,44975,31176,24797,44975,30519,24797,44975,30519,24797,44975,30519,41189,44975,30102,40845,44975,29538,40845,44975,29538,25041,44975,29538,25041,44975,29538,40715,44975,28902,40715,44975,28902,25858,44975,28413,25858,44975,28413,25858,44975,28413,25858,44975,28413,40028,44975,28413,39858,44975,28056,39667,44975,27900,39667,44975,27900,26219,44975,27900,26219,44975,27900,39227,44975,27002,39227,44975,27002,27629,44975,26595,27629,44975,26595,27629,44975,26595,27629,44975,26595,38256,44975,26595,38087,44975,26418,37701,44975,26261,37701,44975,26261,28185,44975,26261,28185,44975,26261,37173,44975,25625,37173,44975,25625,29401,44975,25505,29401,44975,25505,36485,44975,25505,36485,44975,25505,30461,44975,25280,30461,44975,25280,30461,44975,25280,35875,44975,25187,34714,44975,25002,34714,44975,25002,31172,44975,25002,31172,44975,25002,34361,44975,24949,34361,44975,24949,32641,44975,24902,31172,45764,26261,31524,44975,40680,32943,45932,39368,32943,45932,39368,31172,44975,40627,33245,44975,40727,34714,45764,39368,34714,45764,39368,32943,44975,40769,35424,44975,40349,36485,45330,39368,36485,45330,39368,34714,44975,40627,38256,44975,39034,36485,45330,39368,36485,45330,39368,38256,45609,37730,40028,44975,37216,38256,45609,37730,38256,45609,37730,40028,45330,36091,40028,45330,36091,40028,45330,36091,41089,44975,35110,41389,44975,34453,40028,45764,34453,40028,45764,34453,41497,44975,33094,41542,44975,32815,40028,45932,32815,40028,45932,32815,41446,44975,31502,41389,44975,31176,40028,45764,31176,40028,45764,31176,41189,44975,30102,40845,44975,29538,40028,45330,29538,40715,44975,28902,40028,44975,28413,38256,46507,29538,38256,46507,29538,38256,46507,29538,39858,44975,28056,39667,44975,27900,38256,45609,27900,39227,44975,27002,38256,44975,26595,36485,46507,27900,36485,46507,27900,36485,46507,27900,38087,44975,26418,37701,44975,26261,36485,45330,26261,37173,44975,25625,36485,44975,25505,34714,45764,26261,34714,45764,26261,35875,44975,25187,34714,44975,25002,32943,45932,26261,32943,45932,26261,34361,44975,24949,31172,45764,26261,32943,45932,26261,32641,44975,24902,32641,44975,24902,25858,45330,29538,27629,45609,27900,27629,45609,27900,25858,44975,28413,24797,44975,30519,24797,44975,30519,25858,45330,29538,25858,45764,31176,24389,44975,32535,24389,44975,32535,25858,45764,31176,25858,45932,32815,24440,44975,34127,24440,44975,34127,25858,45932,32815,25858,45764,34453,24697,44975,35527,24697,44975,35527,25858,45764,34453,25858,45330,36091,25170,44975,36727,25858,45330,36091,26028,44975,37573,26028,44975,37573,27629,46507,36091,27629,46507,36091,25858,44975,37216,27629,45609,37730,26659,44975,38627,27629,45609,37730,27799,44975,39211,27799,44975,39211,29401,46507,37730,29401,46507,37730,27629,44975,39034,29401,45330,39368,28713,44975,40004,29401,45330,39368,30011,44975,40442,31172,45764,39368,31172,45764,39368,29401,44975,40124,27629,46507,29538,29401,46507,27900,29401,46507,27900,31172,45764,26261,31172,45764,39368,32943,47461,37730,32943,45932,39368,34714,47201,37730,34714,45764,39368,36485,46507,37730,38256,46507,36091,40028,45764,34453,38256,47201,34453,40028,45932,32815,38256,47461,32815,40028,45764,31176,38256,47201,31176,40028,45330,29538,36485,47735,29538,38256,45609,27900,34714,47201,27900,36485,45330,26261,32943,47461,27900,34714,45764,26261,31172,47201,27900,32943,45932,26261,25858,45764,31176,27629,46507,29538,25858,45932,32815,27629,47201,31176,25858,45764,34453,27629,47461,32815,25858,45330,36091,27629,47201,34453,27629,45609,37730,29401,47735,36091,29401,45330,39368,31172,47201,37730,36485,46507,37730,38256,46507,36091,36485,48652,31176,38256,46507,29538,34714,48652,29538,36485,46507,27900,27629,46507,36091,29401,48652,34453,29401,46507,37730,31172,48652,36091,27629,47201,31176,29401,47735,29538,29401,47735,29538,31172,47201,27900,31172,47201,37730,32943,48991,36091,32943,47461,37730,34714,48652,36091,34714,47201,37730,36485,47735,36091,36485,47735,36091,38256,47201,34453,36485,48652,34453,38256,47461,32815,36485,48991,32815,38256,47201,31176,34714,49150,31176,36485,47735,29538,32943,48991,29538,34714,47201,27900,31172,48652,29538,32943,47461,27900,27629,47461,32815,29401,48652,31176,27629,47201,34453,29401,48991,32815,29401,47735,36091,31172,49150,34453,34714,48667,32815,36485,48652,31176,32943,48667,31176,34714,48652,29538,29401,48652,34453,31172,48667,32815,31172,48652,36091,32943,48667,34453,29401,48652,31176,31172,48652,29538,32943,48991,36091,34714,49150,34453,34714,48652,36091,36485,48652,34453,34714,49150,34453,36485,48991,32815,32943,48844,32815,34714,49150,31176,31172,49150,31176,32943,48991,29538,29401,48991,32815,31172,49150,31176,31172,49150,34453,32943,48844,32815,32943,48667,34453,34714,48667,32815,31172,48667,32815,32943,48667,31176],"packedNormals":[127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,194,234,127,194,234,127,194,234,127,194,234,127,216,127,37,216,127,37,216,127,37,216,127,37,216,127,37,216,127,37,216,127,216,216,127,216,216,127,216,216,127,216,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,37,127,216,37,127,216,37,127,216,37,127,216,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,59,19,127,59,19,127,59,19,127,59,19,127,127,0,127,127,0,127,127,0,127,127,0,127,194,19,127,194,19,127,194,19,127,194,19,127,127,0,127,127,0,127,127,0,127,127,0,127,37,127,37,37,127,37,37,127,37,37,127,37,37,127,37,37,127,37,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,37,127,216,37,127,216,37,127,216,37,127,216,37,127,216,37,127,216,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,216,127,216,216,127,216,216,127,216,216,127,216,216,127,216,37,127,216,37,127,216,37,127,216,37,127,216,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,37,127,37,37,127,37,37,127,37,37,127,37,37,127,216,37,127,216,37,127,216,37,127,216,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,37,127,37,37,127,37,37,127,37,37,127,37,216,127,37,216,127,37,216,127,37,216,127,37,37,127,37,37,127,37,37,127,37,37,127,37,127,127,0,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,216,127,37,216,127,37,216,127,37,216,127,37,37,127,37,37,127,37,37,127,37,37,127,37,216,127,216,216,127,216,216,127,216,216,127,216,216,127,37,216,127,37,216,127,37,216,127,37,254,127,127,254,127,127,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,254,127,127,216,127,216,216,127,216,216,127,216,216,127,216,216,127,37,216,127,37,216,127,37,216,127,37,37,127,216,37,127,216,37,127,216,37,127,216,216,127,216,216,127,216,216,127,216,216,127,216,127,127,254,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,59,234,127,59,234,127,59,234,127,59,234,127,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,59,19,127,59,19,127,59,19,127,59,19,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,194,19,127,194,19,127,194,19,127,194,19,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,59,234,127,59,234,127,59,234,127,59,234,127,194,234,127,194,234,127,194,234,127,194,234,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,37,127,37,37,127,37,37,127,37,37,127,37,127,127,0,127,127,0,127,127,0,127,127,0,216,127,37,216,127,37,216,127,37,216,127,37,254,127,127,254,127,127,254,127,127,254,127,127,216,127,216,216,127,216,216,127,216,216,127,216,127,127,254,127,127,254,127,127,254,127,127,254,37,127,216,37,127,216,37,127,216,37,127,216,148,6,159,148,6,159,148,6,159,155,10,167,155,9,167,148,6,160,148,6,160,134,4,159,139,6,164,143,7,167,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,159,8,159,159,8,159,159,8,159,162,14,173,144,8,169,144,8,169,132,7,83,132,8,82,133,7,84,133,7,84,130,8,80,120,8,81,121,8,82,120,8,80,120,8,80,123,7,84,110,7,86,114,6,89,109,8,84,109,8,84,119,4,94,105,6,94,105,6,94,105,6,94,105,6,93,105,6,93,98,9,86,98,10,86,94,8,94,94,8,94,94,8,94,93,6,105,93,6,105,86,10,98,86,9,98,94,6,105,94,6,105,94,6,105,89,6,114,94,4,119,86,7,110,84,8,109,84,8,109,82,8,121,84,7,123,81,8,120,80,8,120,80,8,120,82,8,132,80,8,130,83,7,132,84,7,133,84,7,133,89,6,140,84,7,134,90,6,141,94,5,145,94,5,145,101,3,141,94,4,133,103,3,142,109,3,149,79,11,147,79,11,147,86,10,156,87,10,156,94,9,163,94,9,163,102,4,151,93,5,142,102,4,151,111,5,160,90,9,159,90,9,159,97,10,167,97,10,166,106,11,174,106,11,174,112,3,152,104,3,144,111,3,150,120,4,159,108,5,159,108,5,159,113,6,164,112,6,163,119,7,169,120,7,169,120,7,169,121,8,171,121,7,170,123,8,173,132,8,171,133,8,173,133,8,172,133,8,173,130,7,169,167,9,155,167,10,155,160,6,148,160,6,148,159,6,148,159,6,148,159,6,148,159,4,134,167,7,143,164,6,139,169,8,144,169,8,144,169,7,130,172,8,133,171,8,132,173,8,133,173,8,133,173,8,123,170,7,121,171,8,121,169,7,120,169,7,120,169,7,119,163,6,112,164,6,113,159,5,108,159,5,108,159,4,120,150,3,111,152,3,112,144,3,104,166,10,97,167,10,97,174,11,106,174,11,106,159,9,90,159,9,90,160,5,111,151,4,102,151,4,102,142,5,93,156,10,87,156,10,86,163,9,94,163,9,94,147,11,79,147,11,79,149,3,109,142,3,103,141,3,101,133,4,94,141,6,90,140,6,89,145,5,94,145,5,94,134,7,84,163,10,163,168,14,168,168,14,168,144,10,174,149,13,179,149,13,178,135,14,68,133,15,67,135,14,68,118,14,68,120,13,70,118,14,68,104,13,75,109,10,79,104,13,74,91,14,80,80,14,91,74,13,104,79,10,109,75,13,104,68,14,118,70,13,120,68,14,118,68,14,135,67,15,133,68,14,135,75,13,149,70,14,144,74,13,149,79,12,154,85,14,168,78,14,162,85,14,168,91,14,175,104,13,178,99,12,174,104,13,179,109,14,183,120,15,186,118,14,185,118,14,185,133,13,183,135,14,185,135,14,185,173,14,162,174,10,144,178,13,149,179,13,149,183,13,133,185,14,135,185,14,135,186,15,120,185,14,118,185,14,118,183,14,109,179,13,104,178,13,104,174,12,99,175,14,91,168,14,85,168,14,85,162,14,78,154,12,79,149,13,74,149,13,75,144,14,70,173,18,173,153,16,182,137,13,70,116,15,67,100,16,71,85,14,85,90,10,90,85,14,85,71,16,100,67,15,116,70,13,137,74,15,158,70,16,153,74,15,158,78,15,162,95,15,179,91,15,175,95,15,179,100,16,183,116,13,183,137,15,186,182,16,153,186,15,137,183,13,116,183,16,100,179,15,95,179,15,95,175,15,91,162,15,78,158,15,74,158,15,74,153,16,70,175,13,154,179,15,158,179,15,158,154,13,175,158,15,179,158,15,179,138,14,68,137,15,67,138,14,68,115,14,68,116,14,69,115,14,68,95,15,74,99,13,78,95,15,74,80,18,80,74,15,95,78,13,99,74,15,95,68,14,115,69,14,116,68,14,115,68,14,138,67,15,137,68,14,138,69,14,140,97,7,156,106,7,165,97,7,156,88,7,147,115,14,185,113,14,184,115,14,185,116,15,186,137,14,184,138,14,185,138,14,185,184,14,137,185,14,138,185,14,138,186,15,116,185,14,115,185,14,115,184,14,113,147,7,88,156,7,97,156,7,97,165,7,106,140,14,69,182,18,161,161,18,182,113,15,67,92,18,71,71,18,92,67,15,113,123,0,123,141,1,141,123,0,123,105,3,106,130,0,130,147,3,148,130,0,130,112,1,112,140,15,186,186,15,140,112,1,112,130,0,130,130,0,130,148,3,147,106,3,105,123,0,123,123,0,123,141,1,141,164,11,164,156,7,156,156,7,156,130,0,123,112,2,105,130,0,123,97,7,97,89,11,89,97,7,97,123,0,130,105,2,112,123,0,130,141,2,148,133,0,120,119,2,105,133,0,120,148,2,134,123,0,130,105,2,112,123,0,130,141,2,148,148,2,141,130,0,123,130,0,123,112,2,105,134,2,148,120,0,133,120,0,133,105,2,119,148,2,141,148,3,148,105,3,105,133,0,133,147,3,147,133,0,133,119,0,119,120,0,120,134,0,134,120,0,120,106,3,106,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,194,234,127,194,234,127,216,127,37,216,127,37,216,127,37,216,127,37,216,127,37,216,127,37,216,127,216,216,127,216,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,37,127,216,37,127,216,127,127,254,127,127,254,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,59,19,127,59,19,127,127,0,127,127,0,127,194,19,127,194,19,127,127,0,127,127,0,127,37,127,37,37,127,37,37,127,37,37,127,37,37,127,37,37,127,37,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,37,127,216,37,127,216,37,127,216,37,127,216,37,127,216,37,127,216,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,216,127,216,216,127,216,216,127,216,216,127,216,37,127,216,37,127,216,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,37,127,37,37,127,37,37,127,216,37,127,216,0,127,127,0,127,127,0,127,127,0,127,127,37,127,37,37,127,37,216,127,37,216,127,37,37,127,37,37,127,37,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,127,0,127,127,0,216,127,37,216,127,37,37,127,37,37,127,37,216,127,216,216,127,216,216,127,37,216,127,37,254,127,127,254,127,127,127,127,0,127,127,0,127,127,254,127,127,254,254,127,127,254,127,127,216,127,216,216,127,216,216,127,37,216,127,37,37,127,216,37,127,216,216,127,216,216,127,216,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,59,234,127,59,234,127,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,59,19,127,59,19,127,127,0,127,127,0,127,127,0,127,127,0,127,194,19,127,194,19,127,127,0,127,127,0,127,254,127,127,0,127,127,127,0,127,127,0,127,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,59,234,127,59,234,127,194,234,127,194,234,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,37,127,37,37,127,37,127,127,0,127,127,0,216,127,37,216,127,37,254,127,127,254,127,127,216,127,216,216,127,216,127,127,254,127,127,254,37,127,216,37,127,216,155,10,167,155,9,167,155,9,167,148,6,160,139,6,164,143,7,167,143,7,167,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,144,8,169,132,7,83,132,8,82,132,8,82,133,7,84,120,8,81,121,8,82,121,8,82,120,8,80,110,7,86,114,6,89,114,6,89,109,8,84,105,6,93,98,9,86,98,9,86,98,10,86,93,6,105,86,10,98,86,10,98,86,9,98,89,6,114,89,6,114,86,7,110,84,8,109,82,8,121,82,8,121,81,8,120,80,8,120,82,8,132,82,8,132,83,7,132,84,7,133,89,6,140,89,6,140,90,6,141,94,5,145,101,3,141,103,3,142,79,11,147,86,10,156,86,10,156,86,10,156,87,10,156,94,9,163,102,4,151,102,4,151,90,9,159,97,10,167,97,10,167,97,10,167,97,10,166,106,11,174,112,3,152,111,3,150,108,5,159,113,6,164,113,6,164,112,6,163,120,7,169,121,8,171,121,8,171,121,7,170,132,8,171,133,8,173,133,8,172,133,8,172,167,9,155,167,10,155,167,10,155,160,6,148,167,7,143,167,7,143,164,6,139,169,8,144,172,8,133,172,8,133,171,8,132,173,8,133,170,7,121,170,7,121,171,8,121,169,7,120,163,6,112,163,6,112,164,6,113,159,5,108,150,3,111,152,3,112,166,10,97,166,10,97,167,10,97,167,10,97,174,11,106,159,9,90,151,4,102,151,4,102,156,10,87,156,10,87,156,10,86,156,10,86,163,9,94,147,11,79,142,3,103,141,3,101,141,6,90,140,6,89,140,6,89,145,5,94,168,14,168,168,14,168,149,13,179,149,13,178,135,14,68,135,14,68,118,14,68,118,14,68,104,13,75,104,13,74,74,13,104,75,13,104,68,14,118,68,14,118,68,14,135,68,14,135,75,13,149,74,13,149,85,14,168,85,14,168,104,13,178,104,13,179,118,14,185,118,14,185,135,14,185,135,14,185,178,13,149,179,13,149,185,14,135,185,14,135,185,14,118,185,14,118,179,13,104,178,13,104,168,14,85,168,14,85,149,13,74,149,13,75,85,14,85,85,14,85,74,15,158,74,15,158,95,15,179,95,15,179,179,15,95,179,15,95,158,15,74,158,15,74,179,15,158,179,15,158,158,15,179,158,15,179,138,14,68,138,14,68,115,14,68,115,14,68,95,15,74,95,15,74,74,15,95,74,15,95,68,14,115,68,14,115,68,14,138,68,14,138,97,7,156,97,7,156,115,14,185,115,14,185,138,14,185,138,14,185,185,14,138,185,14,138,185,14,115,185,14,115,156,7,97,156,7,97,123,0,123,123,0,123,130,0,130,130,0,130,130,0,130,130,0,130,123,0,123,123,0,123,156,7,156,156,7,156,130,0,123,130,0,123,97,7,97,97,7,97,123,0,130,123,0,130,133,0,120,133,0,120,123,0,130,123,0,130,130,0,123,130,0,123,120,0,133,120,0,133,133,0,133,133,0,133,120,0,120,120,0,120],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0401,0.3215],[0.0421,0.3115],[0.0421,0.3115],[0.0401,0.3219],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0395,0.3212],[0.0395,0.321],[0.0395,0.3212],[0.0395,0.3219],[0.0395,0.3215],[0.0401,0.3219],[0.0421,0.3115],[0.0419,0.3115],[0.0401,0.3212],[0.0395,0.3212],[0.0395,0.3215],[0.0395,0.3219],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0395,0.3212],[0.0395,0.3208],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0384,0.3215],[0.0384,0.3212],[0.0384,0.3208],[0.0384,0.3212],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0392,0.3179],[0.0392,0.3179],[0.0392,0.3181],[0.0392,0.3183],[0.0392,0.3181],[0.0386,0.3183],[0.0386,0.3181],[0.0386,0.3179],[0.0386,0.3179],[0.0386,0.3181],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0384,0.3219],[0.0384,0.3212],[0.0384,0.321],[0.0384,0.3215],[0.0384,0.3212],[0.0377,0.3212],[0.0357,0.3115],[0.0355,0.3115],[0.0377,0.3219],[0.0384,0.3219],[0.0357,0.3115],[0.0377,0.3215],[0.0377,0.3219],[0.0355,0.3115],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0386,0.3176],[0.0386,0.3176],[0.0392,0.3176],[0.0392,0.3176],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0397,0.3176],[0.0408,0.312],[0.0408,0.312],[0.0397,0.3181],[0.0392,0.3176],[0.0392,0.3179],[0.0392,0.3181],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.037,0.312],[0.037,0.312],[0.0381,0.3176],[0.0381,0.3181],[0.0386,0.3176],[0.0386,0.3179],[0.0386,0.3181],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.037,0.312],[0.0381,0.3181],[0.0381,0.3181],[0.037,0.312],[0.0397,0.3181],[0.0408,0.312],[0.041,0.312],[0.0397,0.3181],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0401,0.3215],[0.0421,0.3115],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0395,0.3212],[0.0395,0.3212],[0.0395,0.3212],[0.0395,0.3212],[0.0395,0.3212],[0.0395,0.3219],[0.0395,0.3215],[0.0401,0.3219],[0.0401,0.3219],[0.0401,0.3219],[0.0401,0.3219],[0.0419,0.3115],[0.0401,0.3212],[0.0395,0.3212],[0.0395,0.3215],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0395,0.3212],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0384,0.3215],[0.0384,0.3215],[0.0384,0.3212],[0.0384,0.3212],[0.0384,0.3208],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0392,0.3179],[0.0392,0.3179],[0.0392,0.3179],[0.0392,0.3179],[0.0392,0.3179],[0.0392,0.3181],[0.0392,0.3183],[0.0386,0.3183],[0.0386,0.3183],[0.0386,0.3179],[0.0386,0.3179],[0.0386,0.3179],[0.0386,0.3179],[0.0386,0.3179],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0384,0.3219],[0.0384,0.3219],[0.0384,0.321],[0.0384,0.3215],[0.0384,0.3215],[0.0377,0.3212],[0.0377,0.3212],[0.0377,0.3212],[0.0355,0.3115],[0.0377,0.3219],[0.0377,0.3219],[0.0357,0.3115],[0.0377,0.3219],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0386,0.3176],[0.0392,0.3176],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0397,0.3176],[0.0397,0.3176],[0.0408,0.312],[0.0397,0.3181],[0.0397,0.3181],[0.0397,0.3181],[0.0392,0.3176],[0.0392,0.3179],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.037,0.312],[0.0381,0.3176],[0.0381,0.3176],[0.0381,0.3181],[0.0381,0.3181],[0.0381,0.3181],[0.0386,0.3176],[0.0386,0.3179],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.037,0.312],[0.0381,0.3181],[0.0397,0.3181],[0.041,0.312],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,899,3,894,4,5,6,903,7,900,901,8,904,902,9,905,907,10,906,11,12,13,909,14,908,15,16,17,912,18,910,913,19,911,914,20,915,21,22,23,917,24,916,25,26,27,922,28,918,923,29,919,30,31,32,929,33,925,930,34,926,931,35,927,932,36,928,37,38,39,934,40,933,41,42,43,936,44,935,45,46,47,938,48,937,49,50,51,943,52,939,53,895,54,948,55,945,950,940,946,941,56,947,951,944,942,896,57,58,952,59,897,953,949,898,60,61,62,957,63,955,958,64,956,959,65,960,962,66,961,963,67,964,68,69,70,71,72,73,971,74,969,972,75,970,973,76,974,976,967,975,977,965,968,978,77,966,979,78,980,79,80,81,987,82,981,990,83,982,992,84,983,85,86,984,87,88,89,988,90,91,1002,991,989,993,92,93,1003,985,994,1004,995,986,1005,94,996,1006,95,1007,1011,96,1008,1012,97,1013,1016,98,1014,1017,99,1018,1020,100,1019,1021,101,1022,1026,102,1023,1028,103,1024,1030,104,1025,1031,105,1032,1009,1015,106,1037,107,1010,1038,108,1039,1041,998,1040,1042,109,999,1043,110,1000,1046,997,1001,1044,111,1047,1045,112,1048,1050,113,1049,1051,1033,1052,1034,1035,1053,1036,114,1054,1056,115,1055,1057,116,1060,1062,117,1061,118,119,120,1068,121,1065,122,1063,123,1072,124,1070,1075,1066,1071,1076,1069,1067,1058,125,1073,1074,1064,1059,126,1029,1027,127,128,920,921,924,1077,129,130,131,1079,132,1078,133,134,135,1081,136,1080,137,138,139,1083,140,1082,141,142,143,1085,144,1084,145,146,147,1089,148,1086,1090,149,1087,1091,150,1088,151,152,153,1096,154,1092,155,156,157,1098,158,1097,159,160,161,1104,162,1099,1108,163,1100,1110,164,1101,1111,165,1102,1112,166,1103,1113,167,1114,1105,168,169,1115,170,1106,1116,1109,1107,171,172,173,1120,174,1117,1121,175,1118,1122,176,1119,177,178,179,1125,180,1123,181,1127,182,1133,183,1130,1135,184,1131,1136,185,1132,1137,186,1139,1138,187,1140,1128,1126,188,1141,1134,1129,189,190,191,1145,192,1143,1146,193,1144,194,195,196,1148,197,1147,198,199,200,1151,201,1149,202,1152,1150,203,204,205,1154,206,1153,207,208,209,1156,210,1155,211,212,213,1158,214,1157,1159,215,1160,216,217,218,1162,219,1161,220,221,222,1164,223,1163,224,225,226,1166,227,1165,228,229,230,1168,231,1167,232,233,234,1170,235,1169,236,237,238,1172,239,1171,240,241,242,1174,243,1173,244,245,246,1176,247,1175,248,249,250,1182,251,1177,1183,252,1178,253,254,255,1186,256,1184,1188,257,1185,258,259,260,1192,261,1191,262,263,264,1194,265,1193,266,267,268,1196,269,1195,270,271,272,1198,273,1197,274,275,276,1200,277,1199,278,279,280,1202,281,1201,282,283,284,1204,285,1203,286,287,288,1206,289,1205,290,291,292,1208,293,1207,294,295,296,1210,297,1209,298,299,300,1212,301,1211,302,303,304,1214,305,1213,306,307,308,1216,309,1215,310,311,312,1218,313,1217,314,315,316,1221,1094,1219,1095,1093,1220,317,318,319,1224,320,321,1227,322,1225,1228,1222,1226,1229,323,1223,324,325,326,1231,327,1230,328,954,329,1233,330,1232,331,332,333,1235,334,335,1237,1234,1236,336,337,338,1240,339,1238,1241,340,1239,341,1124,342,1243,343,1242,344,345,346,1245,347,1244,348,349,350,1247,351,1246,352,353,354,1249,355,1248,356,357,358,1251,359,1250,360,361,362,1253,363,1252,1189,1187,364,1254,365,1190,366,367,1180,1181,1179,1255,368,369,370,1257,371,1256,372,1142,373,1259,374,1258,375,376,377,378,379,380,1265,1261,1264,1266,381,1262,1267,1260,1263,382,383,384,1270,385,1268,1271,386,1269,1272,387,1274,1273,388,1275,389,390,391,1277,392,1276,1278,393,1279,1281,394,1280,1282,395,1283,396,397,398,1285,399,1284,1286,400,1287,1290,401,1288,1291,402,1289,403,404,405,1294,406,1292,1295,407,1297,1299,408,1298,409,1296,1293,410,411,412,1301,413,1300,414,415,416,1303,417,1302,418,419,420,1305,421,1304,1306,422,1307,1309,423,1308,1310,424,1311,1313,425,1312,426,427,428,1315,429,1314,430,431,432,1317,433,1316,434,435,436,1319,437,1318,438,439,440,1321,441,1320,442,443,444,1323,445,1322,446,447,448,1325,449,1324,450,451,452,1327,453,1326,454,455,456,1329,457,1328,458,459,460,461,462,463,464,1333,1331,465,466,467,468,469,470,1337,471,1338,1339,1340,472,1343,1341,473,1342,474,1344,1347,475,1345,1346,1348,476,1351,1349,477,1350,478,1352,1353,1354,479,1357,1355,480,1356,481,1358,1359,1360,482,1363,1361,483,1362,484,1364,1365,1366,485,1369,1367,486,1368,487,1370,1371,1372,488,1375,1373,489,1374,490,1376,1377,1378,491,1381,1379,492,1380,493,1382,1385,494,1383,1384,1386,495,1389,1387,496,1388,497,1390,1393,498,1391,1392,1394,499,1397,1395,500,1396,501,1398,1401,502,1399,1400,1402,503,1405,1403,504,1404,505,1406,1409,506,1407,1408,1410,507,1411,508,1412,1413,1414,509,1415,510,1416,1420,511,1417,1421,512,1418,1419,1422,513,1423,514,1424,1425,1426,515,1427,516,1428,1432,517,1429,1433,518,1430,1431,1434,519,1435,520,1436,1437,1438,521,1439,522,1440,1441,1442,523,1443,524,1444,1447,525,1445,1446,1448,526,1449,527,1450,1451,1452,528,529,1454,1453,530,531,532,1330,533,1332,1334,534,1335,535,1336,1455,536,537,538,539,1459,1457,1456,540,1458,541,542,543,544,1463,1461,1462,1460,545,546,547,548,549,1467,1465,1466,1464,550,551,552,553,554,555,556,557,1469,1468,558,559,560,561,562,563,564,1473,1472,565,566,567,568,569,570,1478,571,1476,572,1477,1479,573,574,575,1482,576,1480,577,1481,1483,578,579,580,1486,581,1484,582,1485,1487,583,584,585,1490,586,1488,587,1489,1491,588,589,590,591,1492,1493,592,593,594,595,1495,1494,1498,596,1496,597,1497,1499,598,599,600,601,1500,1501,602,603,604,605,1503,1502,1506,606,1504,607,1505,1507,608,609,610,611,1508,1509,612,613,614,615,1511,1510,616,1512,1513,617,618,619,620,1515,1514,621,1516,1517,622,623,624,625,1520,1519,626,1518,1521,627,628,629,630,1525,1523,631,632,633,634,635,636,637,638,1526,1528,1527,1529,639,640,641,642,643,1530,1532,1531,1533,644,645,646,647,648,1534,1536,1535,1537,649,650,651,652,653,1538,1540,1539,1541,654,655,656,1542,657,1543,658,659,660,661,1548,1546,662,663,1544,1547,1545,1549,664,665,666,1550,667,1551,668,669,670,671,1556,1554,672,673,1552,1555,1553,1557,674,675,676,1558,677,1559,678,679,680,681,1563,1561,1560,682,1562,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,1470,1471,699,1474,1475,700,701,702,703,704,705,706,707,708,709,710,711,712,1580,1581,713,714,715,716,1582,1583,717,718,719,720,1584,1585,721,722,723,724,725,726,1522,727,1524,728,729,730,731,732,733,734,735,736,737,738,739,1596,740,1597,741,742,743,1598,744,1599,745,746,747,1600,748,1601,1564,749,1565,1566,750,1567,751,1568,1569,752,1570,1571,753,1572,1573,754,755,756,757,1574,1575,758,1576,1577,759,1578,1579,760,761,762,763,1604,1605,764,765,766,767,1606,1607,1586,768,1587,1588,769,1589,1590,770,1591,1592,771,1593,1594,772,1595,773,774,775,1608,776,1609,777,778,779,1610,780,1611,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,1602,1603,797,798,799,800,801,802,803,804,805,806,1626,1627,807,808,809,810,1628,1629,811,812,813,814,1630,1631,815,816,817,818,819,820,821,822,823,1636,824,1637,825,826,827,1638,828,1639,829,1616,1617,1612,830,1613,1614,831,1615,832,1618,1619,833,1620,1621,834,1622,1623,835,1624,1625,836,837,838,839,1640,1641,840,841,842,843,1642,1643,1632,844,1633,1634,845,1635,846,847,848,1644,849,1645,850,851,852,1646,853,1647,854,855,856,857,858,859,860,861,862,863,864,865,866,1654,1655,867,868,869,870,1656,1657,871,872,873,874,1658,1659,875,876,877,1660,878,1661,879,880,881,1662,882,1663,883,1650,1651,1648,884,1649,885,1652,1653,886,887,888,889,1664,1665,890,891,892,893,1666,1667]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[3718837045,2738375213,2736379504,3330149903],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[0.2935,1.4723,-0.0527],"m_extents":[1.626,1.7661,1.9938]},"packedVertices":[39721,20886,45954,42553,17330,45954,42553,17870,45954,36889,20886,44859,39721,17330,44859,34056,20886,44859,36889,17330,44859,31224,20886,44859,34056,17330,44859,28392,20886,45954,31224,17330,45954,25560,20886,44697,28392,17330,45954,22728,20886,44697,25560,17330,44697,19896,20886,44697,22728,17330,44697,18216,18968,45013,19896,17330,44697,18230,18968,43635,17064,17330,45013,18216,18968,45013,18230,18968,41316,17064,17330,43635,18230,18968,38997,17064,17330,41316,18230,18968,36678,17064,17330,38997,17689,18968,34360,17064,17330,36678,17064,18968,32041,17064,17330,34360,17064,18968,29722,16383,16383,32041,18780,20819,27403,16383,16383,29722,17064,20886,25084,17064,17330,27403,17064,20886,22765,17064,17330,25084,17064,20886,20446,17064,17330,22765,19896,20886,20446,17064,17330,21863,17064,20886,20446,22728,20886,20446,19896,17330,22254,25560,37950,16383,22728,26007,20446,22728,29562,20446,28392,37950,16383,25560,26007,20446,25560,37950,16383,31224,29562,20446,28392,26007,20446,34056,30242,20446,31224,26007,21035,36889,28732,20446,34056,26007,21035,43811,20886,20446,36889,17330,21035,36889,20886,18280,42553,20886,20446,39721,17330,20446,43811,20886,20446,42553,20886,22765,42553,17330,20446,42553,20886,20446,49150,18435,25084,42553,17330,22765,42553,20886,22765,49150,18435,27403,42553,17330,25084,49150,18435,25084,49150,18435,29722,42553,17330,27403,48499,18999,32041,48068,17330,31355,49150,18435,29722,42553,18999,34360,42553,17330,32041,48499,18999,32041,42553,18999,36678,42553,17330,34360,42553,18999,34360,42553,18999,38997,42553,17330,36678,42553,18999,41316,42553,17330,38997,42553,18999,43635,42553,17330,41316,42553,17870,45954,42553,17330,43635,39721,20886,43635,42553,17870,45954,42553,18999,43635,36889,32921,46589,39721,20886,45954,34056,32921,46589,36889,20886,44859,36889,32921,46589,31224,32921,46589,34056,20886,44859,28392,20886,43635,31224,20886,44859,25560,20886,43635,28392,20886,45954,28392,20886,43635,22728,20886,43635,25560,20886,44697,19896,20886,43635,22728,20886,44697,18230,18968,43635,19896,20886,44697,19896,20886,43635,39721,20886,41316,42553,18999,41316,36889,32921,44270,39721,20886,41316,34056,49150,48784,36435,39242,48779,36889,42662,46831,31224,42662,46831,34056,42662,49150,34056,49150,48784,28392,20886,41316,31224,32921,46589,31224,32921,44270,25560,42543,43175,28392,27799,43635,28392,29565,41316,22728,42543,43175,25560,29565,43635,25560,42543,43175,19896,29565,41316,22728,29565,43635,22728,42543,43175,18230,18968,41316,19896,20886,41316,39721,20886,38997,42553,18999,38997,36889,32921,41952,39721,20886,38997,34056,42662,44512,36889,42662,46831,36435,39242,44883,31677,39242,44883,34056,49150,48784,34056,42662,44512,28392,20886,38997,31224,32921,41952,25560,42543,40856,28392,29565,38997,22728,42543,40856,25560,42543,43175,25560,42543,40856,19896,29565,38997,22728,42543,43175,22728,42543,40856,18230,18968,38997,19896,20886,38997,39721,20886,36678,42553,18999,36678,36889,20886,36678,34056,20886,36678,36889,32921,41952,36889,20886,36678,31224,20886,36678,34056,32921,41952,28392,20886,36678,31224,32921,41952,25560,29565,36678,28392,29565,38997,28392,27799,36678,22728,29565,36678,25560,42543,40856,25560,29565,36678,19896,27799,36678,22728,42543,40856,18230,18968,36678,19896,24984,36678,39721,20886,34360,42553,18999,34360,40979,38971,34360,39721,30694,36678,39721,30694,34360,34056,30694,34360,36889,30694,36678,40979,38971,34360,31224,46773,31620,34056,37431,34679,34056,39974,32152,28392,46773,31620,31224,40205,34462,31224,46773,31620,25560,39974,32152,28392,40205,34462,28392,46773,31620,22728,20886,34360,25560,20886,36678,25560,20886,34360,19896,22655,34360,22728,20886,36678,17689,18968,34360,19896,22655,34360,39721,20886,33461,48499,18999,32041,36889,30694,27288,39721,24827,32041,34056,30694,32041,36889,30694,27288,31224,46542,29310,34056,39744,29842,28392,46542,29310,31224,46773,31620,31224,46542,29310,25560,39744,29842,28392,46773,31620,28392,46542,29310,22728,20886,32041,25560,20886,32041,19896,22655,32041,17064,18968,32041,19896,22655,32041,39721,20886,29722,49150,18435,29722,36889,20886,29722,34056,20886,29722,36889,20886,32041,31224,39513,27532,34056,39744,29842,34056,36739,27749,28392,39513,27532,31224,46542,29310,31224,39513,27532,25560,36739,27749,28392,46542,29310,22728,28228,29722,25560,20886,32041,25560,28228,29722,19896,29997,29722,22728,20886,32041,17064,18968,29722,19896,29997,29722,39721,20886,27403,49150,18435,27403,36889,28029,27403,39721,20886,29722,39721,20886,27403,34056,28029,27403,36889,20886,29722,36889,28029,27403,31224,20886,27403,34056,20886,29722,34056,28029,27403,28392,20886,27403,31224,20886,29722,31224,20886,27403,25560,28228,27403,28392,20886,29722,28392,20886,27403,22728,37023,27403,25560,28228,29722,22728,37023,27403,18780,20819,27403,19896,29997,29722,19896,28228,27403,39721,20886,25084,49150,18435,25084,36889,37842,25084,39721,20886,27403,39721,20886,25084,34056,28029,25084,36889,28029,27403,36889,37842,25084,31224,20886,25084,34056,28029,27403,34056,28029,25084,28392,20886,25084,31224,20886,25084,25560,24783,25084,28392,20886,25084,22728,28228,25084,19896,28228,25084,22728,37023,27403,22728,28228,25084,17064,20886,25084,19896,28228,25084,39721,20886,22765,49150,18435,25084,42553,20886,22765,36889,20886,22765,39721,20886,22765,34056,20886,22765,36889,37842,25084,36889,20886,22765,31224,20886,22765,34056,28029,25084,34056,20886,22765,28392,20886,22765,31224,20886,22765,25560,20886,22765,22728,20886,22765,25560,20886,22765,19896,41076,17605,22728,34612,22069,22728,36835,18922,17064,36835,18922,19896,37701,21110,19896,41076,17605,43811,20886,20446,42553,20886,22765,42553,20886,20446,36889,20886,18280,43811,20886,20446,34056,30242,20446,36889,28732,22765,36889,28732,20446,31224,29562,20446,34056,30242,22765,34056,30242,20446,28392,37950,16383,31224,29562,22765,31224,29562,20446,25560,37950,16383,28392,36142,18702,28392,37950,16383,22728,29562,20446,25560,36142,18702,25560,37950,16383,19896,35970,16734,22728,36835,18922,22728,33442,17703,17064,32881,17693,19896,41076,17605,19896,35970,16734,39721,17330,22765,42553,17330,20446,42553,17330,22765,36889,17330,22765,39721,17330,20446,34056,17330,22765,36889,17330,21035,31224,17330,22765,34056,17330,21035,28392,17330,22765,31224,17330,21035,25560,17330,22765,28442,17330,21799,22728,17330,22765,25560,17330,22254,19896,17330,22765,22728,17330,22254,17064,17330,22765,19896,17330,22254,39721,17330,25084,42553,17330,25084,36889,17330,25084,34056,17330,25084,31224,17330,25084,28392,17330,25084,25560,17330,25084,22728,17330,25084,19896,17330,25084,17064,17330,25084,39721,17330,27403,42553,17330,27403,36889,17330,27403,34056,17330,27403,31224,17330,27403,28392,17330,27403,25560,17330,27403,22728,17330,27403,19896,17330,27403,17064,17330,27403,39721,17330,29722,48068,17330,31355,36889,17330,29722,34056,17330,29722,31224,17330,29722,28392,17330,29722,25560,17330,29722,22728,17330,29722,19896,17330,29722,16383,16383,29722,39721,17330,32041,42553,17330,32041,36889,17330,32041,34056,17330,32041,31224,17330,32041,28392,17330,32041,25560,17330,32041,22728,17330,32041,19896,17330,32041,16383,16383,32041,39721,17330,34360,42553,17330,34360,36889,17330,34360,34056,17330,34360,31224,17330,34360,28392,17330,34360,25560,17330,34360,22728,17330,34360,19896,17330,34360,17064,17330,34360,39721,17330,36678,42553,17330,36678,36889,17330,36678,34056,17330,36678,31224,17330,36678,28392,17330,36678,25560,17330,36678,22728,17330,36678,19896,17330,36678,17064,17330,36678,39721,17330,38997,42553,17330,38997,36889,17330,38997,34056,17330,38997,31224,17330,38997,28392,17330,38997,25560,17330,38997,22728,17330,38997,19896,17330,38997,17064,17330,38997,39721,17330,41316,42553,17330,41316,36889,17330,41316,34056,17330,41316,31224,17330,41316,28392,17330,41316,25560,17330,41316,22728,17330,41316,19896,17330,41316,17064,17330,41316,39721,17330,43635,42553,17330,43635,36889,17330,43635,34056,17330,43635,31224,17330,43635,28392,17330,43635,25560,17330,43635,22728,17330,43635,19896,17330,43635,17064,17330,43635,39721,17330,44859,42553,17330,45954,36889,17330,44859,34056,17330,44859,31224,17330,45954,28392,17330,45954,25560,17330,44697,22728,17330,44697,19896,17330,44697,17064,17330,45013,22728,20886,22765,22728,34612,22069,22728,28228,25084,22728,28228,25084,19896,37701,21110,19896,28228,25084,17064,36835,18922,17064,20886,22765,17064,35173,22080,17064,20886,25084,22728,20886,20446,22728,36835,18922,19896,20886,20446,22728,33442,17703,22728,20886,20446,17064,20886,20446,17064,32881,17693,34056,20886,34360,34056,20886,36678,34056,20886,36678,31224,20886,36678,28392,40205,34462,28392,20886,36678,25560,20886,36678,25560,39974,32152,25560,20886,34360,25560,37431,34679,25560,20886,36678,34056,20886,32041,25560,20886,32041,34056,20886,29722,31224,20886,29722,34056,36739,27749,34056,20886,29722,28392,20886,29722,25560,28228,29722,25560,36739,27749,25560,28228,29722,34056,42662,49150,31677,39242,48779,31677,39242,44883,39721,20886,34360,39721,20886,36678,39721,20886,36678,36889,30694,36678,36889,20886,36678,34056,20886,36678,34056,20886,34360,34056,24827,36678,34056,20886,36678,39721,20886,33461,36889,20886,32041,39721,24827,32041,39721,20886,33461,34056,20886,32041,36889,30694,27288,34056,20886,32041,28392,20886,41316,28392,20886,43635,28392,20886,43635,25560,20886,43635,22728,29565,43635,22728,20886,43635,19896,29565,41316,19896,27799,43635,19896,20886,43635,28392,20886,38997,28392,20886,36678,25560,20886,36678,28392,27799,36678,28392,20886,36678,22728,20886,36678,19896,24984,36678,19896,27799,36678,22728,17330,22254,22728,17330,22254,25560,17330,22254,28442,17330,21799,31224,17330,21035,34056,17330,21035,36889,17330,21035,36889,28732,20446,36889,20886,18280,36889,26007,21035,36889,17330,21035,36889,20886,18280,36889,28732,22765,36889,20886,22765,36889,20886,22765,34056,30242,22765,34056,20886,22765,31224,29562,22765,31224,20886,22765,31224,20886,22765,28392,20886,22765,25560,36142,18702,25560,20886,22765,22728,20886,22765,22728,20886,20446,25560,20886,22765,22728,29562,22765,22728,20886,22765,17064,17330,45013,17064,17330,21863,22728,17330,22254,22728,26007,20446,39721,17330,20446,36889,17330,21035,43811,20886,20446,42553,17330,20446,39721,17330,20446,42553,20886,20446,42553,17330,22765,42553,17330,22765,48068,17330,31355,48068,17330,31355,42553,17330,32041,42553,17330,45954,39721,20886,45954,31224,20886,44859,19896,20886,44697,18216,18968,45013,34056,42662,49150,36435,39242,48779,34056,49150,48784,31677,39242,48779,28392,20886,43635,28392,27799,43635,19896,27799,43635,22728,29565,43635,19896,29565,41316,34056,49150,48784,31224,42662,46831,22728,42543,43175,36889,32921,41952,39721,20886,38997,36889,20886,36678,28392,20886,36678,25560,42543,40856,39721,30694,36678,40979,38971,34360,34056,24827,36678,34056,37431,34679,25560,37431,34679,19896,24984,36678,28392,46773,31620,34056,20886,32041,31224,46542,29310,19896,22655,32041,39721,20886,29722,34056,20886,29722,28392,20886,29722,22728,37023,27403,36889,28029,27403,39721,20886,27403,36889,37842,25084,34056,28029,27403,36889,28029,27403,34056,28029,25084,31224,20886,27403,22728,37023,27403,36889,37842,25084,39721,20886,25084,36889,20886,22765,34056,28029,25084,36889,37842,25084,34056,20886,22765,31224,20886,22765,17064,35173,22080,42553,20886,22765,34056,30242,22765,31224,29562,22765,28392,36142,18702,22728,29562,22765,19896,41076,17605,17064,36835,18922,17064,17330,21863,17064,35173,22080,22728,33442,17703,25560,37431,34679,34056,36739,27749,25560,36739,27749,36435,39242,48779,31224,32921,41952,34056,24827,36678,19896,27799,43635,28392,27799,36678,22728,29562,20446,22728,17330,22254,22728,20886,20446,36889,26007,21035,36889,28732,20446,36889,28732,22765,31224,29562,22765,28392,36142,18702,31224,20886,22765,25560,36142,18702,22728,29562,22765,25560,20886,22765,39721,20886,45954,39721,20886,45954,42553,17330,45954,36889,20886,44859,36889,20886,44859,39721,17330,44859,39721,17330,44859,34056,20886,44859,34056,20886,44859,36889,17330,44859,36889,17330,44859,31224,20886,44859,31224,20886,44859,34056,17330,44859,34056,17330,44859,28392,20886,45954,28392,20886,45954,31224,17330,45954,31224,17330,45954,25560,20886,44697,25560,20886,44697,28392,17330,45954,28392,17330,45954,22728,20886,44697,22728,20886,44697,25560,17330,44697,25560,17330,44697,19896,20886,44697,19896,20886,44697,22728,17330,44697,22728,17330,44697,18216,18968,45013,19896,17330,44697,19896,17330,44697,18230,18968,43635,18230,18968,43635,17064,17330,45013,18230,18968,41316,18230,18968,41316,17064,17330,43635,17064,17330,43635,18230,18968,38997,18230,18968,38997,17064,17330,41316,17064,17330,41316,18230,18968,36678,18230,18968,36678,17064,17330,38997,17064,17330,38997,17689,18968,34360,17689,18968,34360,17064,17330,36678,17064,17330,36678,17064,18968,32041,17064,18968,32041,17064,17330,34360,17064,17330,34360,17064,18968,29722,17064,18968,29722,16383,16383,32041,16383,16383,32041,18780,20819,27403,18780,20819,27403,16383,16383,29722,16383,16383,29722,17064,20886,25084,17064,20886,25084,17064,17330,27403,17064,17330,27403,17064,20886,22765,17064,20886,22765,17064,17330,25084,17064,17330,25084,17064,20886,20446,17064,20886,20446,17064,17330,22765,17064,17330,22765,19896,20886,20446,19896,20886,20446,17064,17330,21863,22728,20886,20446,19896,17330,22254,19896,17330,22254,22728,26007,20446,22728,29562,20446,28392,37950,16383,28392,37950,16383,25560,26007,20446,25560,26007,20446,25560,26007,20446,25560,26007,20446,25560,26007,20446,25560,37950,16383,31224,29562,20446,31224,29562,20446,28392,26007,20446,28392,26007,20446,28392,26007,20446,28392,26007,20446,28392,26007,20446,34056,30242,20446,34056,30242,20446,31224,26007,21035,31224,26007,21035,31224,26007,21035,31224,26007,21035,31224,26007,21035,36889,28732,20446,34056,26007,21035,34056,26007,21035,34056,26007,21035,34056,26007,21035,34056,26007,21035,42553,20886,22765,42553,17330,20446,49150,18435,27403,49150,18435,27403,42553,17330,25084,42553,17330,25084,49150,18435,25084,49150,18435,29722,42553,17330,27403,42553,17330,27403,42553,17330,32041,48499,18999,32041,42553,18999,36678,42553,18999,36678,42553,17330,34360,42553,17330,34360,42553,18999,34360,42553,18999,38997,42553,18999,38997,42553,17330,36678,42553,17330,36678,42553,18999,41316,42553,18999,41316,42553,17330,38997,42553,17330,38997,42553,18999,43635,42553,18999,43635,42553,17330,41316,42553,17330,41316,42553,17870,45954,42553,17330,43635,42553,17330,43635,39721,20886,43635,39721,20886,43635,39721,20886,43635,39721,20886,43635,39721,20886,43635,42553,17870,45954,42553,18999,43635,42553,18999,43635,36889,32921,46589,36889,32921,46589,39721,20886,45954,34056,32921,46589,34056,32921,46589,34056,32921,46589,34056,32921,46589,34056,32921,46589,36889,20886,44859,36889,20886,44859,36889,32921,46589,36889,32921,46589,36889,32921,46589,31224,32921,46589,31224,32921,46589,31224,32921,46589,34056,20886,44859,34056,20886,44859,31224,20886,44859,25560,20886,43635,25560,20886,43635,28392,20886,45954,28392,20886,45954,28392,20886,43635,22728,20886,43635,22728,20886,43635,25560,20886,44697,25560,20886,44697,19896,20886,43635,22728,20886,44697,22728,20886,44697,18230,18968,43635,18230,18968,43635,19896,20886,44697,19896,20886,43635,19896,20886,43635,19896,20886,43635,19896,20886,43635,39721,20886,41316,39721,20886,41316,42553,18999,41316,42553,18999,41316,36889,32921,44270,36889,32921,44270,36889,32921,44270,36889,32921,44270,36889,32921,44270,39721,20886,41316,39721,20886,41316,36435,39242,48779,36435,39242,48779,36889,42662,46831,36889,42662,46831,31224,42662,46831,31224,42662,46831,31224,42662,46831,31224,42662,46831,34056,42662,49150,28392,20886,41316,28392,20886,41316,31224,32921,46589,31224,32921,46589,31224,32921,46589,31224,32921,44270,31224,32921,44270,31224,32921,44270,31224,32921,44270,31224,32921,44270,25560,42543,43175,28392,27799,43635,28392,27799,43635,28392,29565,41316,28392,29565,41316,28392,29565,41316,28392,29565,41316,28392,29565,41316,22728,42543,43175,25560,29565,43635,25560,29565,43635,25560,29565,43635,25560,29565,43635,25560,29565,43635,25560,42543,43175,18230,18968,41316,18230,18968,41316,19896,20886,41316,19896,20886,41316,19896,20886,41316,19896,20886,41316,19896,20886,41316,39721,20886,38997,39721,20886,38997,39721,20886,38997,42553,18999,38997,42553,18999,38997,36889,32921,41952,36889,32921,41952,34056,42662,44512,34056,42662,44512,34056,42662,44512,36889,42662,46831,36889,42662,46831,36435,39242,44883,36435,39242,44883,36435,39242,44883,31677,39242,44883,31677,39242,44883,34056,49150,48784,34056,42662,44512,28392,20886,38997,28392,20886,38997,31224,32921,41952,31224,32921,41952,25560,42543,40856,28392,29565,38997,28392,29565,38997,28392,29565,38997,22728,42543,40856,25560,42543,43175,19896,29565,38997,19896,29565,38997,19896,29565,38997,19896,29565,38997,19896,29565,38997,22728,42543,43175,22728,42543,40856,18230,18968,38997,18230,18968,38997,19896,20886,38997,19896,20886,38997,19896,20886,38997,19896,20886,38997,19896,20886,38997,39721,20886,36678,39721,20886,36678,39721,20886,36678,42553,18999,36678,42553,18999,36678,34056,20886,36678,34056,20886,36678,36889,32921,41952,36889,32921,41952,36889,32921,41952,31224,20886,36678,31224,20886,36678,34056,32921,41952,34056,32921,41952,34056,32921,41952,34056,32921,41952,34056,32921,41952,31224,32921,41952,31224,32921,41952,25560,29565,36678,28392,29565,38997,22728,29565,36678,22728,29565,36678,22728,29565,36678,22728,29565,36678,22728,29565,36678,25560,42543,40856,25560,29565,36678,25560,29565,36678,25560,29565,36678,19896,27799,36678,22728,42543,40856,18230,18968,36678,18230,18968,36678,19896,24984,36678,19896,24984,36678,19896,24984,36678,39721,20886,34360,39721,20886,34360,42553,18999,34360,42553,18999,34360,40979,38971,34360,39721,30694,36678,39721,30694,36678,39721,30694,34360,39721,30694,34360,39721,30694,34360,39721,30694,34360,39721,30694,34360,34056,30694,34360,34056,30694,34360,34056,30694,34360,34056,30694,34360,34056,30694,34360,36889,30694,36678,40979,38971,34360,40979,38971,34360,31224,46773,31620,34056,37431,34679,34056,37431,34679,34056,39974,32152,34056,39974,32152,34056,39974,32152,34056,39974,32152,34056,39974,32152,28392,46773,31620,31224,40205,34462,31224,40205,34462,31224,40205,34462,31224,40205,34462,31224,40205,34462,31224,46773,31620,25560,39974,32152,28392,40205,34462,22728,20886,34360,22728,20886,34360,22728,20886,34360,22728,20886,34360,22728,20886,34360,25560,20886,36678,25560,20886,34360,25560,20886,34360,19896,22655,34360,19896,22655,34360,22728,20886,36678,22728,20886,36678,17689,18968,34360,17689,18968,34360,19896,22655,34360,19896,22655,34360,39721,20886,33461,39721,20886,33461,39721,20886,33461,39721,20886,33461,48499,18999,32041,48499,18999,32041,36889,30694,27288,39721,24827,32041,34056,30694,32041,34056,30694,32041,34056,30694,32041,34056,30694,32041,36889,30694,27288,31224,46542,29310,34056,39744,29842,34056,39744,29842,34056,39744,29842,28392,46542,29310,31224,46773,31620,25560,39744,29842,25560,39744,29842,25560,39744,29842,25560,39744,29842,25560,39744,29842,28392,46773,31620,28392,46542,29310,22728,20886,32041,22728,20886,32041,19896,22655,32041,17064,18968,32041,17064,18968,32041,19896,22655,32041,19896,22655,32041,39721,20886,29722,39721,20886,29722,39721,20886,29722,49150,18435,29722,49150,18435,29722,36889,20886,29722,36889,20886,29722,34056,20886,29722,34056,20886,29722,36889,20886,32041,36889,20886,32041,31224,39513,27532,34056,39744,29842,28392,39513,27532,28392,39513,27532,28392,39513,27532,28392,39513,27532,28392,39513,27532,31224,46542,29310,31224,39513,27532,31224,39513,27532,31224,39513,27532,28392,46542,29310,22728,28228,29722,22728,28228,29722,22728,28228,29722,22728,28228,29722,25560,20886,32041,25560,28228,29722,19896,29997,29722,19896,29997,29722,22728,20886,32041,22728,20886,32041,17064,18968,29722,17064,18968,29722,39721,20886,27403,39721,20886,27403,49150,18435,27403,49150,18435,27403,34056,28029,27403,36889,20886,29722,36889,20886,29722,36889,28029,27403,28392,20886,27403,28392,20886,27403,31224,20886,29722,31224,20886,29722,31224,20886,27403,31224,20886,27403,31224,20886,27403,25560,28228,27403,25560,28228,27403,25560,28228,27403,25560,28228,27403,25560,28228,27403,28392,20886,29722,28392,20886,27403,28392,20886,27403,25560,28228,29722,22728,37023,27403,18780,20819,27403,18780,20819,27403,19896,29997,29722,19896,29997,29722,19896,28228,27403,19896,28228,27403,19896,28228,27403,19896,28228,27403,39721,20886,25084,39721,20886,25084,39721,20886,25084,49150,18435,25084,31224,20886,25084,31224,20886,25084,34056,28029,27403,34056,28029,25084,28392,20886,25084,28392,20886,25084,28392,20886,25084,31224,20886,25084,31224,20886,25084,25560,24783,25084,25560,24783,25084,25560,24783,25084,25560,24783,25084,25560,24783,25084,28392,20886,25084,22728,28228,25084,22728,28228,25084,17064,20886,25084,17064,20886,25084,17064,20886,25084,19896,28228,25084,36889,20886,22765,39721,20886,22765,39721,20886,22765,39721,20886,22765,39721,20886,22765,28392,20886,22765,28392,20886,22765,22728,20886,22765,25560,20886,22765,19896,41076,17605,22728,34612,22069,22728,34612,22069,17064,36835,18922,19896,37701,21110,36889,20886,18280,43811,20886,20446,34056,30242,20446,36889,28732,22765,31224,29562,20446,34056,30242,22765,28392,37950,16383,31224,29562,22765,25560,37950,16383,28392,36142,18702,28392,36142,18702,28392,36142,18702,22728,29562,20446,22728,29562,20446,22728,29562,20446,25560,36142,18702,19896,35970,16734,22728,36835,18922,17064,32881,17693,17064,32881,17693,19896,41076,17605,19896,35970,16734,19896,35970,16734,19896,35970,16734,39721,17330,22765,39721,17330,22765,39721,17330,22765,39721,17330,22765,39721,17330,22765,42553,17330,20446,42553,17330,22765,42553,17330,22765,36889,17330,22765,36889,17330,22765,36889,17330,22765,36889,17330,22765,36889,17330,22765,39721,17330,20446,39721,17330,20446,34056,17330,22765,34056,17330,22765,34056,17330,22765,34056,17330,22765,34056,17330,22765,36889,17330,21035,36889,17330,21035,31224,17330,22765,31224,17330,22765,31224,17330,22765,31224,17330,22765,31224,17330,22765,34056,17330,21035,34056,17330,21035,28392,17330,22765,28392,17330,22765,28392,17330,22765,28392,17330,22765,28392,17330,22765,31224,17330,21035,31224,17330,21035,25560,17330,22765,25560,17330,22765,25560,17330,22765,25560,17330,22765,25560,17330,22765,28442,17330,21799,28442,17330,21799,22728,17330,22765,22728,17330,22765,22728,17330,22765,22728,17330,22765,22728,17330,22765,25560,17330,22254,25560,17330,22254,19896,17330,22765,19896,17330,22765,19896,17330,22765,19896,17330,22765,19896,17330,22765,22728,17330,22254,22728,17330,22254,17064,17330,22765,17064,17330,22765,19896,17330,22254,19896,17330,22254,39721,17330,25084,39721,17330,25084,39721,17330,25084,39721,17330,25084,39721,17330,25084,42553,17330,25084,42553,17330,25084,36889,17330,25084,36889,17330,25084,36889,17330,25084,36889,17330,25084,36889,17330,25084,34056,17330,25084,34056,17330,25084,34056,17330,25084,34056,17330,25084,34056,17330,25084,31224,17330,25084,31224,17330,25084,31224,17330,25084,31224,17330,25084,31224,17330,25084,28392,17330,25084,28392,17330,25084,28392,17330,25084,28392,17330,25084,28392,17330,25084,25560,17330,25084,25560,17330,25084,25560,17330,25084,25560,17330,25084,25560,17330,25084,22728,17330,25084,22728,17330,25084,22728,17330,25084,22728,17330,25084,22728,17330,25084,19896,17330,25084,19896,17330,25084,19896,17330,25084,19896,17330,25084,19896,17330,25084,17064,17330,25084,17064,17330,25084,39721,17330,27403,39721,17330,27403,39721,17330,27403,39721,17330,27403,39721,17330,27403,42553,17330,27403,42553,17330,27403,36889,17330,27403,36889,17330,27403,36889,17330,27403,36889,17330,27403,36889,17330,27403,34056,17330,27403,34056,17330,27403,34056,17330,27403,34056,17330,27403,34056,17330,27403,31224,17330,27403,31224,17330,27403,31224,17330,27403,31224,17330,27403,31224,17330,27403,28392,17330,27403,28392,17330,27403,28392,17330,27403,28392,17330,27403,28392,17330,27403,25560,17330,27403,25560,17330,27403,25560,17330,27403,25560,17330,27403,25560,17330,27403,22728,17330,27403,22728,17330,27403,22728,17330,27403,22728,17330,27403,22728,17330,27403,19896,17330,27403,19896,17330,27403,19896,17330,27403,19896,17330,27403,19896,17330,27403,17064,17330,27403,17064,17330,27403,39721,17330,29722,39721,17330,29722,39721,17330,29722,39721,17330,29722,39721,17330,29722,48068,17330,31355,48068,17330,31355,36889,17330,29722,36889,17330,29722,36889,17330,29722,36889,17330,29722,36889,17330,29722,34056,17330,29722,34056,17330,29722,34056,17330,29722,34056,17330,29722,34056,17330,29722,31224,17330,29722,31224,17330,29722,31224,17330,29722,31224,17330,29722,31224,17330,29722,28392,17330,29722,28392,17330,29722,28392,17330,29722,28392,17330,29722,28392,17330,29722,25560,17330,29722,25560,17330,29722,25560,17330,29722,25560,17330,29722,25560,17330,29722,22728,17330,29722,22728,17330,29722,22728,17330,29722,22728,17330,29722,22728,17330,29722,19896,17330,29722,19896,17330,29722,19896,17330,29722,19896,17330,29722,19896,17330,29722,16383,16383,29722,16383,16383,29722,39721,17330,32041,39721,17330,32041,39721,17330,32041,39721,17330,32041,39721,17330,32041,42553,17330,32041,42553,17330,32041,36889,17330,32041,36889,17330,32041,36889,17330,32041,36889,17330,32041,36889,17330,32041,34056,17330,32041,34056,17330,32041,34056,17330,32041,34056,17330,32041,34056,17330,32041,31224,17330,32041,31224,17330,32041,31224,17330,32041,31224,17330,32041,31224,17330,32041,28392,17330,32041,28392,17330,32041,28392,17330,32041,28392,17330,32041,28392,17330,32041,25560,17330,32041,25560,17330,32041,25560,17330,32041,25560,17330,32041,25560,17330,32041,22728,17330,32041,22728,17330,32041,22728,17330,32041,22728,17330,32041,22728,17330,32041,19896,17330,32041,19896,17330,32041,19896,17330,32041,19896,17330,32041,19896,17330,32041,16383,16383,32041,16383,16383,32041,39721,17330,34360,39721,17330,34360,39721,17330,34360,39721,17330,34360,39721,17330,34360,42553,17330,34360,42553,17330,34360,36889,17330,34360,36889,17330,34360,36889,17330,34360,36889,17330,34360,36889,17330,34360,34056,17330,34360,34056,17330,34360,34056,17330,34360,34056,17330,34360,34056,17330,34360,31224,17330,34360,31224,17330,34360,31224,17330,34360,31224,17330,34360,31224,17330,34360,28392,17330,34360,28392,17330,34360,28392,17330,34360,28392,17330,34360,28392,17330,34360,25560,17330,34360,25560,17330,34360,25560,17330,34360,25560,17330,34360,25560,17330,34360,22728,17330,34360,22728,17330,34360,22728,17330,34360,22728,17330,34360,22728,17330,34360,19896,17330,34360,19896,17330,34360,19896,17330,34360,19896,17330,34360,19896,17330,34360,17064,17330,34360,17064,17330,34360,39721,17330,36678,39721,17330,36678,39721,17330,36678,39721,17330,36678,39721,17330,36678,42553,17330,36678,42553,17330,36678,36889,17330,36678,36889,17330,36678,36889,17330,36678,36889,17330,36678,36889,17330,36678,34056,17330,36678,34056,17330,36678,34056,17330,36678,34056,17330,36678,34056,17330,36678,31224,17330,36678,31224,17330,36678,31224,17330,36678,31224,17330,36678,31224,17330,36678,28392,17330,36678,28392,17330,36678,28392,17330,36678,28392,17330,36678,28392,17330,36678,25560,17330,36678,25560,17330,36678,25560,17330,36678,25560,17330,36678,25560,17330,36678,22728,17330,36678,22728,17330,36678,22728,17330,36678,22728,17330,36678,22728,17330,36678,19896,17330,36678,19896,17330,36678,19896,17330,36678,19896,17330,36678,19896,17330,36678,17064,17330,36678,17064,17330,36678,39721,17330,38997,39721,17330,38997,39721,17330,38997,39721,17330,38997,39721,17330,38997,42553,17330,38997,42553,17330,38997,36889,17330,38997,36889,17330,38997,36889,17330,38997,36889,17330,38997,36889,17330,38997,34056,17330,38997,34056,17330,38997,34056,17330,38997,34056,17330,38997,34056,17330,38997,31224,17330,38997,31224,17330,38997,31224,17330,38997,31224,17330,38997,31224,17330,38997,28392,17330,38997,28392,17330,38997,28392,17330,38997,28392,17330,38997,28392,17330,38997,25560,17330,38997,25560,17330,38997,25560,17330,38997,25560,17330,38997,25560,17330,38997,22728,17330,38997,22728,17330,38997,22728,17330,38997,22728,17330,38997,22728,17330,38997,19896,17330,38997,19896,17330,38997,19896,17330,38997,19896,17330,38997,19896,17330,38997,17064,17330,38997,17064,17330,38997,39721,17330,41316,39721,17330,41316,39721,17330,41316,39721,17330,41316,39721,17330,41316,42553,17330,41316,42553,17330,41316,36889,17330,41316,36889,17330,41316,36889,17330,41316,36889,17330,41316,36889,17330,41316,34056,17330,41316,34056,17330,41316,34056,17330,41316,34056,17330,41316,34056,17330,41316,31224,17330,41316,31224,17330,41316,31224,17330,41316,31224,17330,41316,31224,17330,41316,28392,17330,41316,28392,17330,41316,28392,17330,41316,28392,17330,41316,28392,17330,41316,25560,17330,41316,25560,17330,41316,25560,17330,41316,25560,17330,41316,25560,17330,41316,22728,17330,41316,22728,17330,41316,22728,17330,41316,22728,17330,41316,22728,17330,41316,19896,17330,41316,19896,17330,41316,19896,17330,41316,19896,17330,41316,19896,17330,41316,17064,17330,41316,17064,17330,41316,39721,17330,43635,39721,17330,43635,39721,17330,43635,39721,17330,43635,39721,17330,43635,42553,17330,43635,42553,17330,43635,36889,17330,43635,36889,17330,43635,36889,17330,43635,36889,17330,43635,36889,17330,43635,34056,17330,43635,34056,17330,43635,34056,17330,43635,34056,17330,43635,34056,17330,43635,31224,17330,43635,31224,17330,43635,31224,17330,43635,31224,17330,43635,31224,17330,43635,28392,17330,43635,28392,17330,43635,28392,17330,43635,28392,17330,43635,28392,17330,43635,25560,17330,43635,25560,17330,43635,25560,17330,43635,25560,17330,43635,25560,17330,43635,22728,17330,43635,22728,17330,43635,22728,17330,43635,22728,17330,43635,22728,17330,43635,19896,17330,43635,19896,17330,43635,19896,17330,43635,19896,17330,43635,19896,17330,43635,17064,17330,43635,17064,17330,43635,39721,17330,44859,39721,17330,44859,36889,17330,44859,36889,17330,44859,34056,17330,44859,34056,17330,44859,31224,17330,45954,31224,17330,45954,28392,17330,45954,28392,17330,45954,25560,17330,44697,25560,17330,44697,22728,17330,44697,22728,17330,44697,19896,17330,44697,19896,17330,44697,17064,17330,45013,22728,20886,22765,22728,20886,22765,22728,34612,22069,22728,28228,25084,19896,37701,21110,19896,37701,21110,19896,37701,21110,19896,28228,25084,19896,28228,25084,17064,36835,18922,17064,36835,18922,17064,20886,22765,17064,20886,22765,17064,35173,22080,22728,20886,20446,22728,36835,18922,22728,36835,18922,19896,20886,20446,19896,20886,20446,22728,33442,17703,17064,20886,20446,17064,32881,17693,34056,20886,34360,34056,20886,34360,34056,20886,36678,31224,20886,36678,31224,20886,36678,28392,40205,34462,28392,40205,34462,28392,40205,34462,28392,20886,36678,28392,20886,36678,25560,20886,36678,25560,39974,32152,25560,39974,32152,25560,39974,32152,25560,20886,34360,25560,20886,34360,25560,37431,34679,34056,20886,32041,34056,20886,32041,25560,20886,32041,25560,20886,32041,34056,20886,29722,31224,20886,29722,31224,20886,29722,34056,36739,27749,28392,20886,29722,28392,20886,29722,25560,28228,29722,25560,36739,27749,25560,36739,27749,34056,42662,49150,34056,42662,49150,31677,39242,48779,31677,39242,44883,39721,20886,34360,39721,20886,34360,39721,20886,36678,36889,30694,36678,36889,30694,36678,36889,30694,36678,36889,20886,36678,36889,20886,36678,34056,20886,36678,34056,20886,34360,34056,20886,34360,34056,24827,36678,39721,20886,33461,36889,20886,32041,36889,20886,32041,39721,24827,32041,36889,30694,27288,34056,20886,32041,28392,20886,41316,28392,20886,41316,28392,20886,43635,25560,20886,43635,25560,20886,43635,22728,29565,43635,22728,29565,43635,22728,29565,43635,22728,20886,43635,22728,20886,43635,19896,29565,41316,19896,29565,41316,19896,29565,41316,19896,27799,43635,28392,20886,38997,28392,20886,38997,28392,20886,36678,25560,20886,36678,25560,20886,36678,28392,27799,36678,22728,20886,36678,22728,20886,36678,19896,24984,36678,19896,27799,36678,19896,27799,36678,22728,17330,22254,25560,17330,22254,25560,17330,22254,28442,17330,21799,28442,17330,21799,31224,17330,21035,31224,17330,21035,34056,17330,21035,34056,17330,21035,36889,17330,21035,36889,28732,20446,36889,26007,21035,36889,26007,21035,36889,20886,18280,36889,28732,22765,36889,20886,22765,34056,30242,22765,34056,30242,22765,34056,20886,22765,34056,20886,22765,31224,29562,22765,28392,20886,22765,28392,20886,22765,25560,36142,18702,25560,36142,18702,22728,20886,22765,22728,26007,20446,31677,39242,48779,28392,27799,43635,39721,30694,36678,34056,37431,34679,22728,37023,27403,22728,29562,22765],"packedNormals":[86,102,244,100,107,249,127,127,254,108,110,251,91,100,246,127,116,253,127,127,254,136,135,253,144,140,252,123,140,253,162,153,246,85,127,246,85,127,246,127,127,254,106,127,252,136,127,253,127,127,254,149,121,251,142,123,253,24,201,126,20,196,126,24,201,126,24,201,127,20,196,127,24,201,127,20,196,127,15,186,142,20,196,127,11,178,134,15,187,133,11,179,138,6,164,141,5,164,121,3,156,133,4,160,128,7,164,107,2,142,146,6,161,145,0,127,127,0,127,127,0,127,127,0,127,127,133,80,8,136,69,14,122,87,6,127,74,11,133,63,16,16,127,64,4,127,94,4,127,94,146,81,9,127,89,5,127,81,8,158,97,7,143,96,4,125,106,1,131,112,0,121,102,2,125,115,0,162,46,35,162,46,35,162,46,35,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,177,127,10,177,127,10,177,127,10,149,2,127,138,0,127,149,2,127,158,6,103,141,1,119,240,83,162,240,83,162,240,83,162,158,23,193,152,43,219,152,43,219,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,236,191,134,211,218,148,200,229,141,252,147,127,240,183,127,132,97,250,108,110,251,100,96,247,111,100,250,127,116,253,68,108,238,136,135,253,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,24,201,126,27,206,126,10,177,127,201,229,127,201,229,127,253,141,129,251,153,127,236,151,185,251,136,152,251,133,152,5,140,161,38,152,214,37,132,216,2,153,127,0,140,132,1,144,119,251,150,134,253,134,132,253,139,129,127,132,253,127,129,253,128,132,253,37,130,216,37,130,216,37,130,216,24,201,127,7,169,127,184,240,127,201,229,127,252,145,127,251,153,127,187,171,24,202,179,39,182,175,23,46,179,43,50,181,41,36,176,53,2,153,127,1,147,127,251,152,127,253,133,127,127,254,127,127,254,127,127,254,127,0,140,123,2,152,127,3,153,117,24,201,127,4,160,135,184,240,127,201,229,127,127,254,127,127,183,13,142,184,15,127,183,13,127,183,13,138,177,10,127,183,13,127,176,10,204,191,49,204,191,49,189,218,65,122,148,1,127,170,7,127,137,0,112,148,2,112,170,8,15,186,142,3,157,131,201,229,127,192,232,154,251,109,107,253,121,127,253,124,113,8,159,157,44,176,209,29,207,140,243,173,145,252,142,141,251,150,132,127,182,241,135,163,248,150,181,239,45,186,203,45,186,203,40,167,210,164,248,127,127,254,127,127,254,127,209,221,108,189,235,106,11,178,134,18,192,118,156,249,143,162,247,148,247,127,87,252,135,107,6,161,105,19,170,74,245,172,123,253,138,125,127,253,115,127,253,115,127,253,115,2,148,117,8,172,123,10,169,100,151,251,127,127,254,127,198,232,127,11,179,138,17,187,151,151,251,122,161,249,120,127,254,127,127,254,127,127,254,127,208,171,41,208,171,41,201,190,46,115,133,0,127,161,4,125,123,0,81,159,12,103,161,6,137,166,247,127,169,246,127,166,247,153,166,244,145,169,245,5,164,121,23,151,195,161,249,127,161,249,127,246,170,127,246,170,127,246,170,127,127,170,246,127,170,246,127,170,246,39,158,213,39,158,213,39,158,213,127,254,127,127,254,127,127,254,127,239,170,88,246,169,127,241,179,109,248,163,127,247,166,127,139,163,248,4,160,128,6,153,98,3,157,133,153,251,127,161,249,127,252,146,127,252,146,127,252,146,127,38,150,215,38,150,215,38,150,215,7,170,127,7,170,127,7,170,127,127,254,127,127,254,127,205,188,48,226,193,83,201,169,33,127,163,5,127,163,5,127,163,5,2,142,146,6,166,127,127,219,213,127,219,213,127,219,213,127,254,127,133,253,127,127,146,1,127,146,1,127,146,1,127,170,7,127,170,7,127,170,7,127,254,127,127,254,127,127,254,127,153,183,16,170,193,27,208,205,185,191,202,206,220,200,172,48,211,180,48,211,180,43,199,189,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,190,236,127,190,236,127,190,236,127,94,249,127,94,249,127,94,249,127,237,183,152,237,183,152,248,164,127,127,231,199,127,201,229,127,231,199,3,153,136,12,178,145,18,181,164,207,155,32,207,155,32,203,165,32,64,133,16,45,151,32,110,106,2,127,0,127,127,0,127,132,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,138,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,141,1,119,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,133,0,119,127,0,112,127,0,127,137,0,115,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,145,1,127,151,3,112,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,138,0,132,162,5,138,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,138,1,138,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,138,183,239,149,191,233,101,173,242,0,127,127,0,127,127,88,168,240,57,151,230,254,127,127,254,127,127,133,80,8,136,94,4,127,74,11,122,87,6,0,127,127,254,127,127,254,127,127,130,143,252,127,143,252,125,153,251,125,143,252,0,127,127,0,138,125,0,127,127,124,143,252,127,144,252,254,127,127,0,127,127,254,127,127,125,109,1,124,109,1,127,109,1,112,110,1,115,102,2,1,140,110,0,127,127,120,86,247,143,86,246,2,137,105,254,127,127,254,127,127,127,127,254,127,136,253,127,127,254,0,127,127,0,127,127,127,127,254,127,127,254,254,127,127,174,74,21,195,81,30,189,85,24,127,66,15,166,69,21,3,127,98,254,127,127,254,127,127,127,127,254,127,127,254,127,128,253,127,127,254,0,133,127,127,127,254,127,127,254,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,0,136,120,0,127,127,127,97,3,119,100,3,115,112,1,113,127,0,127,127,0,0,127,127,0,127,127,0,127,127,127,116,0,127,127,0,254,127,127,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,163,248,127,163,248,127,189,237,127,163,248,0,127,127,0,127,127,127,127,254,127,127,254,127,127,254,144,115,252,0,127,127,127,63,16,127,89,5,96,159,7,96,159,7,96,159,7,127,127,0,127,127,0,127,127,0,254,127,127,132,0,127,137,0,115,144,70,239,254,127,127,254,127,127,86,102,244,127,254,127,127,254,127,24,201,126,162,134,248,162,134,248,162,134,248,15,149,183,2,153,127,128,129,253,64,218,188,64,218,188,64,218,188,206,186,47,70,183,28,127,254,127,211,168,42,211,168,42,211,168,42,2,153,127,214,158,40,127,146,252,127,165,248,41,165,212,153,162,246,52,203,195,223,188,72,127,253,115,127,254,127,213,152,37,155,168,243,127,170,246,127,170,246,127,254,127,5,162,114,200,153,227,200,153,227,200,153,227,127,254,127,127,254,127,127,254,127,7,170,127,215,153,39,216,140,37,216,140,37,216,140,37,26,153,54,26,153,54,26,153,54,7,170,127,54,221,170,127,254,127,190,236,127,94,249,127,220,198,176,2,150,127,210,145,32,33,155,45,127,0,127,0,127,127,254,127,127,0,127,127,254,127,127,149,95,6,76,81,234,38,173,48,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,254,127,127,127,127,254,16,127,189,16,127,189,16,127,189,214,153,214,214,153,214,214,153,214,86,102,244,86,102,244,100,107,249,108,110,251,108,110,251,91,100,246,91,100,246,127,116,253,127,116,253,127,127,254,127,127,254,136,135,253,136,135,253,144,140,252,144,140,252,123,140,253,123,140,253,162,153,246,162,153,246,85,127,246,85,127,246,85,127,246,85,127,246,127,127,254,127,127,254,106,127,252,106,127,252,136,127,253,136,127,253,127,127,254,127,127,254,149,121,251,142,123,253,142,123,253,24,201,126,24,201,126,20,196,126,24,201,127,24,201,127,20,196,127,20,196,127,24,201,127,24,201,127,20,196,127,20,196,127,15,186,142,15,186,142,20,196,127,20,196,127,11,178,134,11,178,134,15,187,133,15,187,133,11,179,138,11,179,138,6,164,141,6,164,141,5,164,121,5,164,121,3,156,133,3,156,133,4,160,128,4,160,128,7,164,107,7,164,107,2,142,146,2,142,146,6,161,145,6,161,145,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,133,80,8,133,80,8,136,69,14,127,74,11,133,63,16,133,63,16,4,127,94,4,127,94,146,81,9,146,81,9,127,89,5,127,89,5,127,89,5,127,89,5,127,89,5,127,81,8,158,97,7,158,97,7,143,96,4,143,96,4,143,96,4,143,96,4,143,96,4,125,106,1,125,106,1,131,112,0,131,112,0,131,112,0,131,112,0,131,112,0,121,102,2,125,115,0,125,115,0,125,115,0,125,115,0,125,115,0,254,127,127,254,127,127,149,2,127,149,2,127,138,0,127,138,0,127,149,2,127,158,6,103,141,1,119,141,1,119,152,43,219,152,43,219,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,236,191,134,236,191,134,236,191,134,236,191,134,236,191,134,211,218,148,200,229,141,200,229,141,252,147,127,252,147,127,240,183,127,132,97,250,132,97,250,132,97,250,132,97,250,132,97,250,108,110,251,108,110,251,100,96,247,100,96,247,100,96,247,111,100,250,111,100,250,111,100,250,127,116,253,127,116,253,136,135,253,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,24,201,126,24,201,126,27,206,126,10,177,127,10,177,127,10,177,127,10,177,127,201,229,127,201,229,127,201,229,127,201,229,127,253,141,129,253,141,129,253,141,129,253,141,129,253,141,129,251,153,127,251,153,127,251,136,152,251,136,152,251,133,152,251,133,152,5,140,161,5,140,161,5,140,161,5,140,161,38,152,214,2,153,127,2,153,127,0,140,132,0,140,132,0,140,132,1,144,119,1,144,119,1,144,119,1,144,119,1,144,119,251,150,134,253,134,132,253,134,132,253,139,129,253,139,129,253,139,129,253,139,129,253,139,129,127,132,253,127,129,253,127,129,253,127,129,253,127,129,253,127,129,253,128,132,253,24,201,127,24,201,127,7,169,127,7,169,127,7,169,127,7,169,127,7,169,127,184,240,127,184,240,127,184,240,127,201,229,127,201,229,127,252,145,127,252,145,127,187,171,24,187,171,24,187,171,24,202,179,39,202,179,39,182,175,23,182,175,23,182,175,23,46,179,43,46,179,43,50,181,41,36,176,53,2,153,127,2,153,127,1,147,127,1,147,127,251,152,127,253,133,127,253,133,127,253,133,127,127,254,127,127,254,127,0,140,123,0,140,123,0,140,123,0,140,123,0,140,123,2,152,127,3,153,117,24,201,127,24,201,127,4,160,135,4,160,135,4,160,135,4,160,135,4,160,135,184,240,127,184,240,127,184,240,127,201,229,127,201,229,127,127,183,13,127,183,13,142,184,15,142,184,15,142,184,15,127,183,13,127,183,13,138,177,10,138,177,10,138,177,10,138,177,10,138,177,10,127,176,10,127,176,10,204,191,49,204,191,49,122,148,1,122,148,1,122,148,1,122,148,1,122,148,1,127,170,7,127,137,0,127,137,0,127,137,0,112,148,2,112,170,8,15,186,142,15,186,142,3,157,131,3,157,131,3,157,131,201,229,127,201,229,127,192,232,154,192,232,154,251,109,107,253,121,127,253,121,127,253,124,113,253,124,113,253,124,113,253,124,113,253,124,113,8,159,157,8,159,157,8,159,157,8,159,157,8,159,157,44,176,209,29,207,140,29,207,140,243,173,145,252,142,141,252,142,141,251,150,132,251,150,132,251,150,132,251,150,132,251,150,132,127,182,241,135,163,248,135,163,248,135,163,248,135,163,248,135,163,248,150,181,239,45,186,203,45,186,203,164,248,127,164,248,127,164,248,127,164,248,127,164,248,127,127,254,127,127,254,127,127,254,127,209,221,108,209,221,108,189,235,106,189,235,106,11,178,134,11,178,134,18,192,118,18,192,118,156,249,143,156,249,143,156,249,143,156,249,143,162,247,148,162,247,148,247,127,87,252,135,107,6,161,105,6,161,105,6,161,105,6,161,105,19,170,74,245,172,123,253,138,125,253,138,125,253,138,125,127,253,115,127,253,115,2,148,117,2,148,117,2,148,117,2,148,117,2,148,117,8,172,123,10,169,100,151,251,127,151,251,127,198,232,127,11,179,138,11,179,138,17,187,151,17,187,151,151,251,122,151,251,122,151,251,122,161,249,120,161,249,120,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,208,171,41,208,171,41,115,133,0,115,133,0,115,133,0,115,133,0,115,133,0,127,161,4,125,123,0,125,123,0,125,123,0,103,161,6,137,166,247,137,166,247,137,166,247,137,166,247,127,169,246,127,166,247,153,166,244,153,166,244,145,169,245,145,169,245,5,164,121,5,164,121,161,249,127,161,249,127,161,249,127,161,249,127,127,170,246,127,170,246,127,170,246,127,170,246,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,239,170,88,239,170,88,239,170,88,239,170,88,239,170,88,246,169,127,241,179,109,241,179,109,247,166,127,139,163,248,4,160,128,4,160,128,6,153,98,6,153,98,3,157,133,3,157,133,3,157,133,3,157,133,153,251,127,153,251,127,153,251,127,161,249,127,7,170,127,7,170,127,7,170,127,7,170,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,205,188,48,205,188,48,205,188,48,205,188,48,205,188,48,226,193,83,201,169,33,201,169,33,2,142,146,2,142,146,2,142,146,6,166,127,127,254,127,133,253,127,133,253,127,133,253,127,133,253,127,127,254,127,127,254,127,153,183,16,170,193,27,208,205,185,191,202,206,191,202,206,48,211,180,48,211,180,127,254,127,127,254,127,190,236,127,190,236,127,94,249,127,94,249,127,237,183,152,237,183,152,127,231,199,127,201,229,127,201,229,127,201,229,3,153,136,3,153,136,3,153,136,12,178,145,207,155,32,207,155,32,64,133,16,64,133,16,45,151,32,110,106,2,110,106,2,110,106,2,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,132,0,127,132,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,138,0,127,138,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,141,1,119,141,1,119,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,133,0,119,133,0,119,133,0,119,133,0,119,133,0,119,127,0,112,127,0,112,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,137,0,115,137,0,115,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,145,1,127,145,1,127,145,1,127,145,1,127,145,1,127,151,3,112,151,3,112,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,138,0,132,138,0,132,138,0,132,138,0,132,138,0,132,162,5,138,162,5,138,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,138,1,138,138,1,138,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,138,183,239,149,191,233,149,191,233,149,191,233,101,173,242,101,173,242,0,127,127,0,127,127,0,127,127,0,127,127,88,168,240,254,127,127,254,127,127,254,127,127,133,80,8,133,80,8,136,94,4,122,87,6,0,127,127,254,127,127,254,127,127,130,143,252,127,143,252,127,143,252,125,153,251,125,153,251,125,153,251,125,143,252,125,143,252,0,127,127,0,138,125,0,138,125,0,138,125,0,127,127,0,127,127,124,143,252,254,127,127,254,127,127,0,127,127,0,127,127,254,127,127,125,109,1,125,109,1,124,109,1,112,110,1,112,110,1,115,102,2,1,140,110,1,140,110,120,86,247,120,86,247,143,86,246,2,137,105,254,127,127,254,127,127,127,127,254,127,136,253,127,136,253,127,136,253,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,127,127,254,254,127,127,174,74,21,174,74,21,195,81,30,166,69,21,3,127,98,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,128,253,127,128,253,127,128,253,127,127,254,127,127,254,0,133,127,0,133,127,0,133,127,127,127,254,254,127,127,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,0,136,120,0,136,120,127,97,3,119,100,3,119,100,3,115,112,1,115,112,1,113,127,0,113,127,0,127,127,0,127,127,0,0,127,127,0,127,127,127,116,0,127,116,0,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,163,248,127,163,248,127,189,237,127,189,237,0,127,127,127,89,5,15,149,183,128,129,253,127,146,252,153,162,246,5,162,114,2,150,127],"m_uvs":[[0.3025,0.5709],[0.3018,0.5769],[0.3018,0.5759],[0.303,0.5709],[0.3025,0.577],[0.3036,0.5709],[0.303,0.577],[0.3041,0.5709],[0.3036,0.577],[0.3048,0.5709],[0.3041,0.5769],[0.3052,0.5709],[0.3048,0.5769],[0.3059,0.5709],[0.3052,0.5773],[0.3064,0.5709],[0.3059,0.5773],[0.3068,0.5744],[0.3064,0.5773],[0.3068,0.5745],[0.307,0.577],[0.3068,0.5744],[0.3068,0.5752],[0.307,0.5776],[0.307,0.5758],[0.3072,0.5781],[0.3072,0.5763],[0.3073,0.5788],[0.3073,0.577],[0.3073,0.5798],[0.3077,0.578],[0.3075,0.5806],[0.3079,0.5788],[0.3079,0.5838],[0.3075,0.5752],[0.3079,0.5849],[0.3084,0.5759],[0.3079,0.5838],[0.3086,0.5766],[0.3084,0.5853],[0.3088,0.5777],[0.3086,0.5871],[0.3079,0.5777],[0.3086,0.5877],[0.3088,0.5777],[0.3068,0.5777],[0.3077,0.5874],[0.3061,0.5192],[0.3068,0.5619],[0.3068,0.5508],[0.3048,0.5192],[0.3059,0.5619],[0.3061,0.5192],[0.3039,0.5508],[0.3048,0.5619],[0.3027,0.5489],[0.3039,0.5619],[0.3018,0.5533],[0.3027,0.5619],[0.2994,0.5777],[0.3018,0.5884],[0.3016,0.5788],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.3,0.5766],[0.2998,0.5889],[0.2998,0.5777],[0.2984,0.5824],[0.3,0.5871],[0.3,0.5766],[0.2987,0.5812],[0.3005,0.5853],[0.2984,0.5824],[0.2991,0.5802],[0.3007,0.5838],[0.2996,0.5777],[0.2996,0.582],[0.2991,0.5802],[0.3012,0.577],[0.3009,0.5817],[0.2996,0.5777],[0.3014,0.5763],[0.3012,0.5806],[0.3012,0.577],[0.3016,0.5756],[0.3014,0.5798],[0.3018,0.5752],[0.3016,0.5788],[0.3018,0.5745],[0.3018,0.5781],[0.3018,0.5759],[0.3018,0.5776],[0.3025,0.5713],[0.3018,0.5759],[0.3018,0.5745],[0.303,0.5504],[0.3025,0.5709],[0.3037,0.5504],[0.303,0.5709],[0.303,0.5504],[0.3041,0.5504],[0.3036,0.5709],[0.3048,0.5713],[0.3041,0.5709],[0.3054,0.5713],[0.3048,0.5709],[0.3048,0.5713],[0.3059,0.5713],[0.3052,0.5709],[0.3064,0.5713],[0.3059,0.5709],[0.3068,0.5745],[0.3064,0.5709],[0.3064,0.5713],[0.3023,0.5716],[0.3018,0.5752],[0.303,0.5501],[0.3023,0.5716],[0.3037,0.5248],[0.3032,0.5407],[0.303,0.5343],[0.3041,0.5343],[0.3037,0.5353],[0.3037,0.5248],[0.3048,0.5716],[0.3041,0.5504],[0.3041,0.5501],[0.3054,0.5325],[0.3048,0.559],[0.3048,0.5554],[0.3059,0.5325],[0.3054,0.5558],[0.3054,0.5325],[0.3066,0.5554],[0.3059,0.5558],[0.3059,0.5325],[0.3068,0.5752],[0.3066,0.5716],[0.3023,0.572],[0.3016,0.5756],[0.303,0.5493],[0.3023,0.572],[0.3036,0.5332],[0.303,0.5343],[0.3032,0.5393],[0.3041,0.5393],[0.3037,0.5248],[0.3036,0.5332],[0.3048,0.572],[0.3041,0.5493],[0.3054,0.5313],[0.3048,0.5551],[0.3059,0.5313],[0.3054,0.5325],[0.3054,0.5313],[0.3066,0.5551],[0.3059,0.5325],[0.3059,0.5313],[0.307,0.5758],[0.3066,0.572],[0.3021,0.5726],[0.3014,0.5763],[0.3027,0.5726],[0.3034,0.5726],[0.303,0.5493],[0.3027,0.5726],[0.3041,0.5726],[0.3036,0.5493],[0.3048,0.5726],[0.3041,0.5493],[0.3055,0.5547],[0.3048,0.5551],[0.3048,0.5583],[0.3061,0.5547],[0.3054,0.5313],[0.3055,0.5547],[0.3068,0.5583],[0.3059,0.5313],[0.3072,0.5763],[0.3068,0.5641],[0.3018,0.573],[0.3012,0.577],[0.3016,0.5343],[0.3021,0.5526],[0.3018,0.5521],[0.3034,0.5521],[0.3027,0.5526],[0.3016,0.5343],[0.3041,0.5148],[0.3034,0.5378],[0.3032,0.5307],[0.3048,0.5148],[0.3041,0.5317],[0.3041,0.5148],[0.3055,0.5307],[0.3048,0.5317],[0.3048,0.5148],[0.3061,0.573],[0.3055,0.5726],[0.3055,0.573],[0.3068,0.5691],[0.3061,0.5726],[0.3073,0.577],[0.3068,0.5691],[0.3018,0.5733],[0.2996,0.5777],[0.3023,0.5501],[0.3018,0.5648],[0.3032,0.5515],[0.3023,0.5501],[0.3039,0.5126],[0.3032,0.5292],[0.3048,0.5126],[0.3041,0.5148],[0.3039,0.5126],[0.3055,0.5292],[0.3048,0.5148],[0.3048,0.5126],[0.3063,0.5737],[0.3055,0.5737],[0.307,0.5697],[0.3077,0.578],[0.307,0.5697],[0.3016,0.5741],[0.2991,0.5802],[0.3025,0.5741],[0.3032,0.5741],[0.3025,0.5737],[0.3039,0.5278],[0.3032,0.5292],[0.3032,0.535],[0.3048,0.5278],[0.3039,0.5126],[0.3039,0.5278],[0.3055,0.535],[0.3048,0.5126],[0.3064,0.5568],[0.3055,0.5737],[0.3055,0.5568],[0.3072,0.5526],[0.3063,0.5737],[0.3079,0.5788],[0.3072,0.5526],[0.3014,0.5748],[0.2987,0.5812],[0.3023,0.5569],[0.3016,0.5741],[0.3014,0.5748],[0.3032,0.5569],[0.3025,0.5741],[0.3023,0.5569],[0.3039,0.5748],[0.3032,0.5741],[0.3032,0.5569],[0.3048,0.5748],[0.3039,0.5741],[0.3039,0.5748],[0.3057,0.5565],[0.3048,0.5741],[0.3048,0.5748],[0.3064,0.5342],[0.3055,0.5568],[0.3064,0.5342],[0.3075,0.5752],[0.3072,0.5526],[0.3073,0.5565],[0.3012,0.5759],[0.2984,0.5824],[0.3021,0.5302],[0.3014,0.5748],[0.3012,0.5759],[0.303,0.5565],[0.3023,0.5569],[0.3021,0.5302],[0.3039,0.5759],[0.3032,0.5569],[0.303,0.5565],[0.3048,0.5759],[0.3039,0.5759],[0.3057,0.5654],[0.3048,0.5759],[0.3066,0.5561],[0.3075,0.5561],[0.3064,0.5342],[0.3066,0.5561],[0.3084,0.5759],[0.3075,0.5561],[0.3009,0.5766],[0.2984,0.5824],[0.3,0.5766],[0.3018,0.5766],[0.3009,0.5766],[0.303,0.5766],[0.3021,0.5302],[0.3018,0.5766],[0.3039,0.5766],[0.303,0.5565],[0.303,0.5766],[0.3048,0.5766],[0.3039,0.5766],[0.3057,0.5766],[0.3066,0.5766],[0.3057,0.5766],[0.3082,0.5105],[0.3068,0.5367],[0.307,0.5267],[0.3091,0.5267],[0.3077,0.5264],[0.3082,0.5105],[0.2994,0.5777],[0.3,0.5766],[0.2998,0.5777],[0.3016,0.5788],[0.2994,0.5777],[0.3027,0.5489],[0.3018,0.554],[0.3018,0.5533],[0.3039,0.5508],[0.303,0.5497],[0.3027,0.5489],[0.3048,0.5192],[0.3039,0.5518],[0.3039,0.5508],[0.3061,0.5192],[0.3048,0.5285],[0.3048,0.5192],[0.3068,0.5508],[0.3059,0.5285],[0.3061,0.5192],[0.3084,0.5267],[0.307,0.5267],[0.307,0.5367],[0.3093,0.5386],[0.3082,0.5105],[0.3084,0.5267],[0.3009,0.5871],[0.2998,0.5889],[0.3,0.5871],[0.3018,0.5871],[0.3007,0.5889],[0.303,0.5871],[0.3018,0.5884],[0.3039,0.5871],[0.3027,0.5884],[0.3048,0.5871],[0.3039,0.5884],[0.3057,0.5871],[0.3048,0.5878],[0.3066,0.5871],[0.3057,0.5874],[0.3077,0.5871],[0.3068,0.5874],[0.3086,0.5871],[0.3077,0.5874],[0.3012,0.5853],[0.3005,0.5853],[0.3021,0.5853],[0.303,0.5853],[0.3039,0.5853],[0.3048,0.5853],[0.3057,0.5853],[0.3066,0.5853],[0.3075,0.5853],[0.3084,0.5853],[0.3014,0.5838],[0.3007,0.5838],[0.3023,0.5838],[0.3032,0.5838],[0.3039,0.5838],[0.3048,0.5838],[0.3057,0.5838],[0.3064,0.5838],[0.3073,0.5838],[0.3079,0.5838],[0.3016,0.5827],[0.2996,0.582],[0.3025,0.5827],[0.3032,0.5827],[0.3039,0.5827],[0.3048,0.5827],[0.3055,0.5827],[0.3064,0.5827],[0.3072,0.5827],[0.3079,0.5849],[0.3018,0.5817],[0.3009,0.5817],[0.3025,0.5817],[0.3032,0.5817],[0.3041,0.5817],[0.3048,0.5817],[0.3055,0.5817],[0.3063,0.5817],[0.307,0.5817],[0.3079,0.5838],[0.3018,0.5806],[0.3012,0.5806],[0.3027,0.5806],[0.3034,0.5806],[0.3041,0.5806],[0.3048,0.5806],[0.3055,0.5806],[0.3061,0.5806],[0.3068,0.5806],[0.3075,0.5806],[0.3021,0.5798],[0.3014,0.5798],[0.3027,0.5798],[0.3034,0.5798],[0.3041,0.5798],[0.3048,0.5798],[0.3055,0.5798],[0.3061,0.5798],[0.3068,0.5798],[0.3073,0.5798],[0.3023,0.5788],[0.3016,0.5788],[0.3027,0.5788],[0.3034,0.5788],[0.3041,0.5788],[0.3048,0.5788],[0.3054,0.5788],[0.3061,0.5788],[0.3066,0.5788],[0.3073,0.5788],[0.3023,0.5781],[0.3018,0.5781],[0.303,0.5781],[0.3036,0.5781],[0.3041,0.5781],[0.3048,0.5781],[0.3054,0.5781],[0.3059,0.5781],[0.3066,0.5781],[0.3072,0.5781],[0.3025,0.5776],[0.3018,0.5776],[0.303,0.5776],[0.3036,0.5776],[0.3041,0.5776],[0.3048,0.5776],[0.3054,0.5776],[0.3059,0.5776],[0.3064,0.5776],[0.307,0.5776],[0.3025,0.577],[0.3018,0.5769],[0.303,0.577],[0.3036,0.577],[0.3041,0.5769],[0.3048,0.5769],[0.3052,0.5773],[0.3059,0.5773],[0.3064,0.5773],[0.307,0.577],[0.3066,0.5766],[0.3068,0.5367],[0.3066,0.5561],[0.3066,0.5561],[0.3077,0.5264],[0.3075,0.5561],[0.3091,0.5267],[0.3086,0.5766],[0.3086,0.535],[0.3084,0.5759],[0.3068,0.5777],[0.307,0.5267],[0.3079,0.5777],[0.307,0.5367],[0.3068,0.5777],[0.3088,0.5777],[0.3093,0.5386],[0.3034,0.573],[0.3034,0.5726],[0.3034,0.5726],[0.3041,0.5726],[0.3048,0.5317],[0.3048,0.5726],[0.3055,0.5726],[0.3055,0.5307],[0.3055,0.573],[0.3055,0.5378],[0.3055,0.5726],[0.3032,0.5737],[0.3055,0.5737],[0.3032,0.5741],[0.3039,0.5741],[0.3032,0.535],[0.3032,0.5741],[0.3048,0.5741],[0.3055,0.5568],[0.3055,0.535],[0.3055,0.5568],[0.3037,0.5353],[0.3041,0.5407],[0.3041,0.5393],[0.3018,0.573],[0.3021,0.5726],[0.3021,0.5726],[0.3027,0.5526],[0.3027,0.5726],[0.0,0.0],[0.0,0.0],[0.3034,0.5644],[0.3034,0.5726],[0.3018,0.5733],[0.3025,0.5737],[0.3018,0.5648],[0.3018,0.5733],[0.3032,0.5737],[0.3023,0.5501],[0.0,0.0],[0.3048,0.5716],[0.3048,0.5713],[0.3048,0.5713],[0.3054,0.5713],[0.3059,0.5558],[0.3059,0.5713],[0.3066,0.5554],[0.3064,0.559],[0.3064,0.5713],[0.3048,0.572],[0.3048,0.5726],[0.3055,0.5726],[0.3048,0.5583],[0.3048,0.5726],[0.3061,0.5726],[0.3068,0.5641],[0.3068,0.5583],[0.0,0.0],[0.3068,0.5874],[0.3057,0.5874],[0.3048,0.5878],[0.3039,0.5884],[0.3027,0.5884],[0.3018,0.5884],[0.3018,0.5533],[0.3016,0.5788],[0.3018,0.5619],[0.3018,0.5884],[0.3016,0.5788],[0.3018,0.554],[0.3018,0.5766],[0.3018,0.5766],[0.303,0.5497],[0.303,0.5766],[0.3039,0.5518],[0.3039,0.5766],[0.3039,0.5766],[0.3048,0.5766],[0.3059,0.5285],[0.3057,0.5766],[0.0,0.0],[0.0,0.0],[0.3057,0.5766],[0.3066,0.5518],[0.3066,0.5766],[0.307,0.577],[0.3086,0.5877],[0.3068,0.5874],[0.3068,0.5619],[0.3007,0.5889],[0.3018,0.5884],[0.2994,0.5777],[0.2998,0.5889],[0.3007,0.5889],[0.2998,0.5777],[0.3,0.5871],[0.3,0.5871],[0.2996,0.582],[0.2996,0.582],[0.3009,0.5817],[0.3018,0.5769],[0.3025,0.5709],[0.3041,0.5709],[0.3064,0.5709],[0.3068,0.5744],[0.3037,0.5353],[0.3032,0.5407],[0.3037,0.5248],[0.3041,0.5407],[0.3048,0.5713],[0.3048,0.559],[0.3064,0.559],[0.3059,0.5558],[0.3066,0.5554],[0.3037,0.5248],[0.3041,0.5343],[0.3059,0.5325],[0.303,0.5493],[0.3023,0.572],[0.3027,0.5726],[0.3048,0.5726],[0.3054,0.5313],[0.3021,0.5526],[0.3016,0.5343],[0.3034,0.5644],[0.3034,0.5378],[0.3055,0.5378],[0.3068,0.5641],[0.3048,0.5148],[0.3032,0.5737],[0.3039,0.5126],[0.307,0.5697],[0.3016,0.5741],[0.3032,0.5741],[0.3048,0.5741],[0.3064,0.5342],[0.3023,0.5569],[0.3014,0.5748],[0.3021,0.5302],[0.3032,0.5569],[0.3023,0.5569],[0.303,0.5565],[0.3039,0.5748],[0.3064,0.5342],[0.3021,0.5302],[0.3012,0.5759],[0.3018,0.5766],[0.303,0.5565],[0.3021,0.5302],[0.303,0.5766],[0.3039,0.5766],[0.3086,0.535],[0.3,0.5766],[0.303,0.5497],[0.3039,0.5518],[0.3048,0.5285],[0.3066,0.5518],[0.3082,0.5105],[0.3091,0.5267],[0.3086,0.5877],[0.3086,0.535],[0.307,0.5367],[0.3055,0.5378],[0.3032,0.535],[0.3055,0.535],[0.3032,0.5407],[0.3041,0.5493],[0.0,0.0],[0.3064,0.559],[0.3048,0.5583],[0.3068,0.5508],[0.3068,0.5874],[0.3068,0.5777],[0.3018,0.5619],[0.3018,0.5533],[0.3018,0.554],[0.3039,0.5518],[0.3048,0.5285],[0.3039,0.5766],[0.3059,0.5285],[0.3066,0.5518],[0.3057,0.5766],[0.3025,0.5709],[0.3025,0.5709],[0.3018,0.5769],[0.303,0.5709],[0.303,0.5709],[0.3025,0.577],[0.3025,0.577],[0.3036,0.5709],[0.3036,0.5709],[0.303,0.577],[0.303,0.577],[0.3041,0.5709],[0.3041,0.5709],[0.3036,0.577],[0.3036,0.577],[0.3048,0.5709],[0.3048,0.5709],[0.3041,0.5769],[0.3041,0.5769],[0.3052,0.5709],[0.3052,0.5709],[0.3048,0.5769],[0.3048,0.5769],[0.3059,0.5709],[0.3059,0.5709],[0.3052,0.5773],[0.3052,0.5773],[0.3064,0.5709],[0.3064,0.5709],[0.3059,0.5773],[0.3059,0.5773],[0.3068,0.5744],[0.3064,0.5773],[0.3064,0.5773],[0.3068,0.5745],[0.3068,0.5745],[0.307,0.577],[0.3068,0.5752],[0.3068,0.5752],[0.307,0.5776],[0.307,0.5776],[0.307,0.5758],[0.307,0.5758],[0.3072,0.5781],[0.3072,0.5781],[0.3072,0.5763],[0.3072,0.5763],[0.3073,0.5788],[0.3073,0.5788],[0.3073,0.577],[0.3073,0.577],[0.3073,0.5798],[0.3073,0.5798],[0.3077,0.578],[0.3077,0.578],[0.3075,0.5806],[0.3075,0.5806],[0.3079,0.5788],[0.3079,0.5788],[0.3079,0.5838],[0.3079,0.5838],[0.3075,0.5752],[0.3075,0.5752],[0.3079,0.5849],[0.3079,0.5849],[0.3084,0.5759],[0.3084,0.5759],[0.3079,0.5838],[0.3079,0.5838],[0.3086,0.5766],[0.3086,0.5766],[0.3084,0.5853],[0.3084,0.5853],[0.3088,0.5777],[0.3088,0.5777],[0.3086,0.5871],[0.3086,0.5871],[0.3079,0.5777],[0.3079,0.5777],[0.3086,0.5877],[0.3068,0.5777],[0.3077,0.5874],[0.3077,0.5874],[0.0,0.0],[0.0,0.0],[0.3048,0.5192],[0.3048,0.5192],[0.3059,0.5619],[0.3059,0.5619],[0.3059,0.5619],[0.3059,0.5619],[0.3059,0.5619],[0.3061,0.5192],[0.3039,0.5508],[0.3039,0.5508],[0.3048,0.5619],[0.3048,0.5619],[0.3048,0.5619],[0.3048,0.5619],[0.3048,0.5619],[0.3027,0.5489],[0.3027,0.5489],[0.3039,0.5619],[0.3039,0.5619],[0.3039,0.5619],[0.3039,0.5619],[0.3039,0.5619],[0.3018,0.5533],[0.3027,0.5619],[0.3027,0.5619],[0.3027,0.5619],[0.3027,0.5619],[0.3027,0.5619],[0.3,0.5766],[0.2998,0.5889],[0.2987,0.5812],[0.2987,0.5812],[0.3005,0.5853],[0.3005,0.5853],[0.2984,0.5824],[0.2991,0.5802],[0.3007,0.5838],[0.3007,0.5838],[0.3009,0.5817],[0.2996,0.5777],[0.3014,0.5763],[0.3014,0.5763],[0.3012,0.5806],[0.3012,0.5806],[0.3012,0.577],[0.3016,0.5756],[0.3016,0.5756],[0.3014,0.5798],[0.3014,0.5798],[0.3018,0.5752],[0.3018,0.5752],[0.3016,0.5788],[0.3016,0.5788],[0.3018,0.5745],[0.3018,0.5745],[0.3018,0.5781],[0.3018,0.5781],[0.3018,0.5759],[0.3018,0.5776],[0.3018,0.5776],[0.3025,0.5713],[0.3025,0.5713],[0.3025,0.5713],[0.3025,0.5713],[0.3025,0.5713],[0.3018,0.5759],[0.3018,0.5745],[0.3018,0.5745],[0.303,0.5504],[0.303,0.5504],[0.3025,0.5709],[0.3037,0.5504],[0.3037,0.5504],[0.3037,0.5504],[0.3037,0.5504],[0.3037,0.5504],[0.303,0.5709],[0.303,0.5709],[0.303,0.5504],[0.303,0.5504],[0.303,0.5504],[0.3041,0.5504],[0.3041,0.5504],[0.3041,0.5504],[0.3036,0.5709],[0.3036,0.5709],[0.3041,0.5709],[0.3054,0.5713],[0.3054,0.5713],[0.3048,0.5709],[0.3048,0.5709],[0.3048,0.5713],[0.3059,0.5713],[0.3059,0.5713],[0.3052,0.5709],[0.3052,0.5709],[0.3064,0.5713],[0.3059,0.5709],[0.3059,0.5709],[0.3068,0.5745],[0.3068,0.5745],[0.3064,0.5709],[0.3064,0.5713],[0.3064,0.5713],[0.3064,0.5713],[0.3064,0.5713],[0.3023,0.5716],[0.3023,0.5716],[0.3018,0.5752],[0.3018,0.5752],[0.303,0.5501],[0.303,0.5501],[0.303,0.5501],[0.303,0.5501],[0.303,0.5501],[0.3023,0.5716],[0.3023,0.5716],[0.3032,0.5407],[0.3032,0.5407],[0.303,0.5343],[0.303,0.5343],[0.3041,0.5343],[0.3041,0.5343],[0.3041,0.5343],[0.3041,0.5343],[0.3037,0.5353],[0.3048,0.5716],[0.3048,0.5716],[0.3041,0.5504],[0.3041,0.5504],[0.3041,0.5504],[0.3041,0.5501],[0.3041,0.5501],[0.3041,0.5501],[0.3041,0.5501],[0.3041,0.5501],[0.3054,0.5325],[0.3048,0.559],[0.3048,0.559],[0.3048,0.5554],[0.3048,0.5554],[0.3048,0.5554],[0.3048,0.5554],[0.3048,0.5554],[0.3059,0.5325],[0.3054,0.5558],[0.3054,0.5558],[0.3054,0.5558],[0.3054,0.5558],[0.3054,0.5558],[0.3054,0.5325],[0.3068,0.5752],[0.3068,0.5752],[0.3066,0.5716],[0.3066,0.5716],[0.3066,0.5716],[0.3066,0.5716],[0.3066,0.5716],[0.3023,0.572],[0.3023,0.572],[0.3023,0.572],[0.3016,0.5756],[0.3016,0.5756],[0.303,0.5493],[0.303,0.5493],[0.3036,0.5332],[0.3036,0.5332],[0.3036,0.5332],[0.303,0.5343],[0.303,0.5343],[0.3032,0.5393],[0.3032,0.5393],[0.3032,0.5393],[0.3041,0.5393],[0.3041,0.5393],[0.3037,0.5248],[0.3036,0.5332],[0.3048,0.572],[0.3048,0.572],[0.3041,0.5493],[0.3041,0.5493],[0.3054,0.5313],[0.3048,0.5551],[0.3048,0.5551],[0.3048,0.5551],[0.3059,0.5313],[0.3054,0.5325],[0.3066,0.5551],[0.3066,0.5551],[0.3066,0.5551],[0.3066,0.5551],[0.3066,0.5551],[0.3059,0.5325],[0.3059,0.5313],[0.307,0.5758],[0.307,0.5758],[0.3066,0.572],[0.3066,0.572],[0.3066,0.572],[0.3066,0.572],[0.3066,0.572],[0.3021,0.5726],[0.3021,0.5726],[0.3021,0.5726],[0.3014,0.5763],[0.3014,0.5763],[0.3034,0.5726],[0.3034,0.5726],[0.303,0.5493],[0.303,0.5493],[0.303,0.5493],[0.3041,0.5726],[0.3041,0.5726],[0.3036,0.5493],[0.3036,0.5493],[0.3036,0.5493],[0.3036,0.5493],[0.3036,0.5493],[0.3041,0.5493],[0.3041,0.5493],[0.3055,0.5547],[0.3048,0.5551],[0.3061,0.5547],[0.3061,0.5547],[0.3061,0.5547],[0.3061,0.5547],[0.3061,0.5547],[0.3054,0.5313],[0.3055,0.5547],[0.3055,0.5547],[0.3055,0.5547],[0.3068,0.5583],[0.3059,0.5313],[0.3072,0.5763],[0.3072,0.5763],[0.3068,0.5641],[0.3068,0.5641],[0.3068,0.5641],[0.3018,0.573],[0.3018,0.573],[0.3012,0.577],[0.3012,0.577],[0.3016,0.5343],[0.3021,0.5526],[0.3021,0.5526],[0.3018,0.5521],[0.3018,0.5521],[0.3018,0.5521],[0.3018,0.5521],[0.3018,0.5521],[0.0,0.0],[0.3034,0.5521],[0.3034,0.5521],[0.0,0.0],[0.0,0.0],[0.3027,0.5526],[0.3016,0.5343],[0.3016,0.5343],[0.3041,0.5148],[0.3034,0.5378],[0.3034,0.5378],[0.3032,0.5307],[0.3032,0.5307],[0.3032,0.5307],[0.3032,0.5307],[0.3032,0.5307],[0.3048,0.5148],[0.3041,0.5317],[0.3041,0.5317],[0.3041,0.5317],[0.3041,0.5317],[0.3041,0.5317],[0.3041,0.5148],[0.3055,0.5307],[0.3048,0.5317],[0.3061,0.573],[0.3061,0.573],[0.3061,0.573],[0.3061,0.573],[0.3061,0.573],[0.3055,0.5726],[0.3055,0.573],[0.3055,0.573],[0.3068,0.5691],[0.3068,0.5691],[0.3061,0.5726],[0.3061,0.5726],[0.3073,0.577],[0.3073,0.577],[0.3068,0.5691],[0.3068,0.5691],[0.3018,0.5733],[0.3018,0.5733],[0.3018,0.5733],[0.3018,0.5733],[0.2996,0.5777],[0.2996,0.5777],[0.3023,0.5501],[0.3018,0.5648],[0.0,0.0],[0.3032,0.5515],[0.3032,0.5515],[0.0,0.0],[0.3023,0.5501],[0.3039,0.5126],[0.3032,0.5292],[0.3032,0.5292],[0.3032,0.5292],[0.3048,0.5126],[0.3041,0.5148],[0.3055,0.5292],[0.3055,0.5292],[0.3055,0.5292],[0.3055,0.5292],[0.3055,0.5292],[0.3048,0.5148],[0.3048,0.5126],[0.3063,0.5737],[0.3063,0.5737],[0.307,0.5697],[0.3077,0.578],[0.3077,0.578],[0.307,0.5697],[0.307,0.5697],[0.3016,0.5741],[0.3016,0.5741],[0.3016,0.5741],[0.2991,0.5802],[0.2991,0.5802],[0.3025,0.5741],[0.3025,0.5741],[0.3032,0.5741],[0.3032,0.5741],[0.3025,0.5737],[0.3025,0.5737],[0.3039,0.5278],[0.3032,0.5292],[0.3048,0.5278],[0.3048,0.5278],[0.3048,0.5278],[0.3048,0.5278],[0.3048,0.5278],[0.3039,0.5126],[0.3039,0.5278],[0.3039,0.5278],[0.3039,0.5278],[0.3048,0.5126],[0.3064,0.5568],[0.3064,0.5568],[0.3064,0.5568],[0.3064,0.5568],[0.3055,0.5737],[0.3055,0.5568],[0.3072,0.5526],[0.3072,0.5526],[0.3063,0.5737],[0.3063,0.5737],[0.3079,0.5788],[0.3079,0.5788],[0.3014,0.5748],[0.3014,0.5748],[0.2987,0.5812],[0.2987,0.5812],[0.3032,0.5569],[0.3025,0.5741],[0.3025,0.5741],[0.3023,0.5569],[0.3048,0.5748],[0.3048,0.5748],[0.3039,0.5741],[0.3039,0.5741],[0.3039,0.5748],[0.3039,0.5748],[0.3039,0.5748],[0.3057,0.5565],[0.3057,0.5565],[0.3057,0.5565],[0.3057,0.5565],[0.3057,0.5565],[0.3048,0.5741],[0.3048,0.5748],[0.3048,0.5748],[0.3055,0.5568],[0.3064,0.5342],[0.3075,0.5752],[0.3075,0.5752],[0.3072,0.5526],[0.3072,0.5526],[0.3073,0.5565],[0.3073,0.5565],[0.3073,0.5565],[0.3073,0.5565],[0.3012,0.5759],[0.3012,0.5759],[0.3012,0.5759],[0.2984,0.5824],[0.3039,0.5759],[0.3039,0.5759],[0.3032,0.5569],[0.303,0.5565],[0.3048,0.5759],[0.3048,0.5759],[0.3048,0.5759],[0.3039,0.5759],[0.3039,0.5759],[0.3057,0.5654],[0.3057,0.5654],[0.3057,0.5654],[0.3057,0.5654],[0.3057,0.5654],[0.3048,0.5759],[0.3066,0.5561],[0.3066,0.5561],[0.3084,0.5759],[0.3084,0.5759],[0.3084,0.5759],[0.3075,0.5561],[0.3018,0.5766],[0.3009,0.5766],[0.3009,0.5766],[0.3009,0.5766],[0.3009,0.5766],[0.3048,0.5766],[0.3048,0.5766],[0.3066,0.5766],[0.3057,0.5766],[0.3082,0.5105],[0.3068,0.5367],[0.3068,0.5367],[0.3091,0.5267],[0.3077,0.5264],[0.3016,0.5788],[0.2994,0.5777],[0.3027,0.5489],[0.3018,0.554],[0.3039,0.5508],[0.303,0.5497],[0.3048,0.5192],[0.3039,0.5518],[0.3061,0.5192],[0.3048,0.5285],[0.3048,0.5285],[0.3048,0.5285],[0.0,0.0],[0.3068,0.5508],[0.0,0.0],[0.3059,0.5285],[0.3084,0.5267],[0.307,0.5267],[0.3093,0.5386],[0.3093,0.5386],[0.3082,0.5105],[0.3084,0.5267],[0.3084,0.5267],[0.3084,0.5267],[0.3009,0.5871],[0.3009,0.5871],[0.3009,0.5871],[0.3009,0.5871],[0.3009,0.5871],[0.2998,0.5889],[0.3,0.5871],[0.3,0.5871],[0.3018,0.5871],[0.3018,0.5871],[0.3018,0.5871],[0.3018,0.5871],[0.3018,0.5871],[0.3007,0.5889],[0.3007,0.5889],[0.303,0.5871],[0.303,0.5871],[0.303,0.5871],[0.303,0.5871],[0.303,0.5871],[0.3018,0.5884],[0.3018,0.5884],[0.3039,0.5871],[0.3039,0.5871],[0.3039,0.5871],[0.3039,0.5871],[0.3039,0.5871],[0.3027,0.5884],[0.3027,0.5884],[0.3048,0.5871],[0.3048,0.5871],[0.3048,0.5871],[0.3048,0.5871],[0.3048,0.5871],[0.3039,0.5884],[0.3039,0.5884],[0.3057,0.5871],[0.3057,0.5871],[0.3057,0.5871],[0.3057,0.5871],[0.3057,0.5871],[0.3048,0.5878],[0.3048,0.5878],[0.3066,0.5871],[0.3066,0.5871],[0.3066,0.5871],[0.3066,0.5871],[0.3066,0.5871],[0.3057,0.5874],[0.3057,0.5874],[0.3077,0.5871],[0.3077,0.5871],[0.3077,0.5871],[0.3077,0.5871],[0.3077,0.5871],[0.3068,0.5874],[0.3068,0.5874],[0.3086,0.5871],[0.3086,0.5871],[0.3077,0.5874],[0.3077,0.5874],[0.3012,0.5853],[0.3012,0.5853],[0.3012,0.5853],[0.3012,0.5853],[0.3012,0.5853],[0.3005,0.5853],[0.3005,0.5853],[0.3021,0.5853],[0.3021,0.5853],[0.3021,0.5853],[0.3021,0.5853],[0.3021,0.5853],[0.303,0.5853],[0.303,0.5853],[0.303,0.5853],[0.303,0.5853],[0.303,0.5853],[0.3039,0.5853],[0.3039,0.5853],[0.3039,0.5853],[0.3039,0.5853],[0.3039,0.5853],[0.3048,0.5853],[0.3048,0.5853],[0.3048,0.5853],[0.3048,0.5853],[0.3048,0.5853],[0.3057,0.5853],[0.3057,0.5853],[0.3057,0.5853],[0.3057,0.5853],[0.3057,0.5853],[0.3066,0.5853],[0.3066,0.5853],[0.3066,0.5853],[0.3066,0.5853],[0.3066,0.5853],[0.3075,0.5853],[0.3075,0.5853],[0.3075,0.5853],[0.3075,0.5853],[0.3075,0.5853],[0.3084,0.5853],[0.3084,0.5853],[0.3014,0.5838],[0.3014,0.5838],[0.3014,0.5838],[0.3014,0.5838],[0.3014,0.5838],[0.3007,0.5838],[0.3007,0.5838],[0.3023,0.5838],[0.3023,0.5838],[0.3023,0.5838],[0.3023,0.5838],[0.3023,0.5838],[0.3032,0.5838],[0.3032,0.5838],[0.3032,0.5838],[0.3032,0.5838],[0.3032,0.5838],[0.3039,0.5838],[0.3039,0.5838],[0.3039,0.5838],[0.3039,0.5838],[0.3039,0.5838],[0.3048,0.5838],[0.3048,0.5838],[0.3048,0.5838],[0.3048,0.5838],[0.3048,0.5838],[0.3057,0.5838],[0.3057,0.5838],[0.3057,0.5838],[0.3057,0.5838],[0.3057,0.5838],[0.3064,0.5838],[0.3064,0.5838],[0.3064,0.5838],[0.3064,0.5838],[0.3064,0.5838],[0.3073,0.5838],[0.3073,0.5838],[0.3073,0.5838],[0.3073,0.5838],[0.3073,0.5838],[0.3079,0.5838],[0.3079,0.5838],[0.3016,0.5827],[0.3016,0.5827],[0.3016,0.5827],[0.3016,0.5827],[0.3016,0.5827],[0.2996,0.582],[0.2996,0.582],[0.3025,0.5827],[0.3025,0.5827],[0.3025,0.5827],[0.3025,0.5827],[0.3025,0.5827],[0.3032,0.5827],[0.3032,0.5827],[0.3032,0.5827],[0.3032,0.5827],[0.3032,0.5827],[0.3039,0.5827],[0.3039,0.5827],[0.3039,0.5827],[0.3039,0.5827],[0.3039,0.5827],[0.3048,0.5827],[0.3048,0.5827],[0.3048,0.5827],[0.3048,0.5827],[0.3048,0.5827],[0.3055,0.5827],[0.3055,0.5827],[0.3055,0.5827],[0.3055,0.5827],[0.3055,0.5827],[0.3064,0.5827],[0.3064,0.5827],[0.3064,0.5827],[0.3064,0.5827],[0.3064,0.5827],[0.3072,0.5827],[0.3072,0.5827],[0.3072,0.5827],[0.3072,0.5827],[0.3072,0.5827],[0.3079,0.5849],[0.3079,0.5849],[0.3018,0.5817],[0.3018,0.5817],[0.3018,0.5817],[0.3018,0.5817],[0.3018,0.5817],[0.3009,0.5817],[0.3009,0.5817],[0.3025,0.5817],[0.3025,0.5817],[0.3025,0.5817],[0.3025,0.5817],[0.3025,0.5817],[0.3032,0.5817],[0.3032,0.5817],[0.3032,0.5817],[0.3032,0.5817],[0.3032,0.5817],[0.3041,0.5817],[0.3041,0.5817],[0.3041,0.5817],[0.3041,0.5817],[0.3041,0.5817],[0.3048,0.5817],[0.3048,0.5817],[0.3048,0.5817],[0.3048,0.5817],[0.3048,0.5817],[0.3055,0.5817],[0.3055,0.5817],[0.3055,0.5817],[0.3055,0.5817],[0.3055,0.5817],[0.3063,0.5817],[0.3063,0.5817],[0.3063,0.5817],[0.3063,0.5817],[0.3063,0.5817],[0.307,0.5817],[0.307,0.5817],[0.307,0.5817],[0.307,0.5817],[0.307,0.5817],[0.3079,0.5838],[0.3079,0.5838],[0.3018,0.5806],[0.3018,0.5806],[0.3018,0.5806],[0.3018,0.5806],[0.3018,0.5806],[0.3012,0.5806],[0.3012,0.5806],[0.3027,0.5806],[0.3027,0.5806],[0.3027,0.5806],[0.3027,0.5806],[0.3027,0.5806],[0.3034,0.5806],[0.3034,0.5806],[0.3034,0.5806],[0.3034,0.5806],[0.3034,0.5806],[0.3041,0.5806],[0.3041,0.5806],[0.3041,0.5806],[0.3041,0.5806],[0.3041,0.5806],[0.3048,0.5806],[0.3048,0.5806],[0.3048,0.5806],[0.3048,0.5806],[0.3048,0.5806],[0.3055,0.5806],[0.3055,0.5806],[0.3055,0.5806],[0.3055,0.5806],[0.3055,0.5806],[0.3061,0.5806],[0.3061,0.5806],[0.3061,0.5806],[0.3061,0.5806],[0.3061,0.5806],[0.3068,0.5806],[0.3068,0.5806],[0.3068,0.5806],[0.3068,0.5806],[0.3068,0.5806],[0.3075,0.5806],[0.3075,0.5806],[0.3021,0.5798],[0.3021,0.5798],[0.3021,0.5798],[0.3021,0.5798],[0.3021,0.5798],[0.3014,0.5798],[0.3014,0.5798],[0.3027,0.5798],[0.3027,0.5798],[0.3027,0.5798],[0.3027,0.5798],[0.3027,0.5798],[0.3034,0.5798],[0.3034,0.5798],[0.3034,0.5798],[0.3034,0.5798],[0.3034,0.5798],[0.3041,0.5798],[0.3041,0.5798],[0.3041,0.5798],[0.3041,0.5798],[0.3041,0.5798],[0.3048,0.5798],[0.3048,0.5798],[0.3048,0.5798],[0.3048,0.5798],[0.3048,0.5798],[0.3055,0.5798],[0.3055,0.5798],[0.3055,0.5798],[0.3055,0.5798],[0.3055,0.5798],[0.3061,0.5798],[0.3061,0.5798],[0.3061,0.5798],[0.3061,0.5798],[0.3061,0.5798],[0.3068,0.5798],[0.3068,0.5798],[0.3068,0.5798],[0.3068,0.5798],[0.3068,0.5798],[0.3073,0.5798],[0.3073,0.5798],[0.3023,0.5788],[0.3023,0.5788],[0.3023,0.5788],[0.3023,0.5788],[0.3023,0.5788],[0.3016,0.5788],[0.3016,0.5788],[0.3027,0.5788],[0.3027,0.5788],[0.3027,0.5788],[0.3027,0.5788],[0.3027,0.5788],[0.3034,0.5788],[0.3034,0.5788],[0.3034,0.5788],[0.3034,0.5788],[0.3034,0.5788],[0.3041,0.5788],[0.3041,0.5788],[0.3041,0.5788],[0.3041,0.5788],[0.3041,0.5788],[0.3048,0.5788],[0.3048,0.5788],[0.3048,0.5788],[0.3048,0.5788],[0.3048,0.5788],[0.3054,0.5788],[0.3054,0.5788],[0.3054,0.5788],[0.3054,0.5788],[0.3054,0.5788],[0.3061,0.5788],[0.3061,0.5788],[0.3061,0.5788],[0.3061,0.5788],[0.3061,0.5788],[0.3066,0.5788],[0.3066,0.5788],[0.3066,0.5788],[0.3066,0.5788],[0.3066,0.5788],[0.3073,0.5788],[0.3073,0.5788],[0.3023,0.5781],[0.3023,0.5781],[0.3023,0.5781],[0.3023,0.5781],[0.3023,0.5781],[0.3018,0.5781],[0.3018,0.5781],[0.303,0.5781],[0.303,0.5781],[0.303,0.5781],[0.303,0.5781],[0.303,0.5781],[0.3036,0.5781],[0.3036,0.5781],[0.3036,0.5781],[0.3036,0.5781],[0.3036,0.5781],[0.3041,0.5781],[0.3041,0.5781],[0.3041,0.5781],[0.3041,0.5781],[0.3041,0.5781],[0.3048,0.5781],[0.3048,0.5781],[0.3048,0.5781],[0.3048,0.5781],[0.3048,0.5781],[0.3054,0.5781],[0.3054,0.5781],[0.3054,0.5781],[0.3054,0.5781],[0.3054,0.5781],[0.3059,0.5781],[0.3059,0.5781],[0.3059,0.5781],[0.3059,0.5781],[0.3059,0.5781],[0.3066,0.5781],[0.3066,0.5781],[0.3066,0.5781],[0.3066,0.5781],[0.3066,0.5781],[0.3072,0.5781],[0.3072,0.5781],[0.3025,0.5776],[0.3025,0.5776],[0.3025,0.5776],[0.3025,0.5776],[0.3025,0.5776],[0.3018,0.5776],[0.3018,0.5776],[0.303,0.5776],[0.303,0.5776],[0.303,0.5776],[0.303,0.5776],[0.303,0.5776],[0.3036,0.5776],[0.3036,0.5776],[0.3036,0.5776],[0.3036,0.5776],[0.3036,0.5776],[0.3041,0.5776],[0.3041,0.5776],[0.3041,0.5776],[0.3041,0.5776],[0.3041,0.5776],[0.3048,0.5776],[0.3048,0.5776],[0.3048,0.5776],[0.3048,0.5776],[0.3048,0.5776],[0.3054,0.5776],[0.3054,0.5776],[0.3054,0.5776],[0.3054,0.5776],[0.3054,0.5776],[0.3059,0.5776],[0.3059,0.5776],[0.3059,0.5776],[0.3059,0.5776],[0.3059,0.5776],[0.3064,0.5776],[0.3064,0.5776],[0.3064,0.5776],[0.3064,0.5776],[0.3064,0.5776],[0.307,0.5776],[0.307,0.5776],[0.3025,0.577],[0.3025,0.577],[0.303,0.577],[0.303,0.577],[0.3036,0.577],[0.3036,0.577],[0.3041,0.5769],[0.3041,0.5769],[0.3048,0.5769],[0.3048,0.5769],[0.3052,0.5773],[0.3052,0.5773],[0.3059,0.5773],[0.3059,0.5773],[0.3064,0.5773],[0.3064,0.5773],[0.307,0.577],[0.3066,0.5766],[0.3066,0.5766],[0.3068,0.5367],[0.3066,0.5561],[0.3077,0.5264],[0.3077,0.5264],[0.3077,0.5264],[0.3075,0.5561],[0.3075,0.5561],[0.3091,0.5267],[0.3091,0.5267],[0.3086,0.5766],[0.3086,0.5766],[0.3086,0.535],[0.3068,0.5777],[0.307,0.5267],[0.307,0.5267],[0.3079,0.5777],[0.3079,0.5777],[0.307,0.5367],[0.3088,0.5777],[0.3093,0.5386],[0.3034,0.573],[0.3034,0.573],[0.3034,0.5726],[0.3041,0.5726],[0.3041,0.5726],[0.3048,0.5317],[0.3048,0.5317],[0.3048,0.5317],[0.3048,0.5726],[0.3048,0.5726],[0.3055,0.5726],[0.3055,0.5307],[0.3055,0.5307],[0.3055,0.5307],[0.3055,0.573],[0.3055,0.573],[0.3055,0.5378],[0.3032,0.5737],[0.3032,0.5737],[0.3055,0.5737],[0.3055,0.5737],[0.3032,0.5741],[0.3039,0.5741],[0.3039,0.5741],[0.3032,0.535],[0.3048,0.5741],[0.3048,0.5741],[0.3055,0.5568],[0.3055,0.535],[0.3055,0.535],[0.3037,0.5353],[0.3037,0.5353],[0.3041,0.5407],[0.3041,0.5393],[0.3018,0.573],[0.3018,0.573],[0.3021,0.5726],[0.3027,0.5526],[0.3027,0.5526],[0.3027,0.5526],[0.3027,0.5726],[0.3027,0.5726],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.3034,0.5644],[0.3018,0.5733],[0.3025,0.5737],[0.3025,0.5737],[0.3018,0.5648],[0.3023,0.5501],[0.3032,0.5737],[0.3048,0.5716],[0.3048,0.5716],[0.3048,0.5713],[0.3054,0.5713],[0.3054,0.5713],[0.3059,0.5558],[0.3059,0.5558],[0.3059,0.5558],[0.3059,0.5713],[0.3059,0.5713],[0.3066,0.5554],[0.3066,0.5554],[0.3066,0.5554],[0.3064,0.559],[0.3048,0.572],[0.3048,0.572],[0.3048,0.5726],[0.3055,0.5726],[0.3055,0.5726],[0.3048,0.5583],[0.3061,0.5726],[0.3061,0.5726],[0.3068,0.5641],[0.3068,0.5583],[0.3068,0.5583],[0.3068,0.5874],[0.3057,0.5874],[0.3057,0.5874],[0.3048,0.5878],[0.3048,0.5878],[0.3039,0.5884],[0.3039,0.5884],[0.3027,0.5884],[0.3027,0.5884],[0.3018,0.5884],[0.3018,0.5533],[0.3018,0.5619],[0.3018,0.5619],[0.3016,0.5788],[0.3018,0.554],[0.3018,0.5766],[0.303,0.5497],[0.303,0.5497],[0.303,0.5766],[0.303,0.5766],[0.3039,0.5518],[0.3048,0.5766],[0.3048,0.5766],[0.3059,0.5285],[0.3059,0.5285],[0.0,0.0],[0.3068,0.5619],[0.3041,0.5407],[0.3048,0.559],[0.3021,0.5526],[0.3034,0.5378],[0.3064,0.5342],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,3,4,654,5,6,657,7,8,661,9,10,665,11,12,669,13,14,673,15,16,677,17,18,681,19,20,21,22,23,688,24,25,691,26,27,695,28,29,699,30,31,703,32,33,707,34,35,711,36,37,715,38,39,719,40,41,723,42,43,44,45,46,731,47,48,49,50,51,52,53,54,739,55,56,747,57,58,754,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,769,76,77,78,79,80,81,82,83,84,85,86,779,87,88,784,89,90,788,91,92,792,93,94,95,96,97,799,98,99,100,101,102,810,103,104,820,105,106,107,108,109,826,110,111,831,112,113,114,115,805,116,117,800,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,841,138,139,847,140,141,854,142,143,144,145,146,147,148,149,870,150,151,878,152,153,154,155,156,157,158,159,892,160,161,900,162,163,897,940,164,165,166,167,168,945,169,170,950,171,172,173,174,175,176,177,178,961,179,935,180,181,943,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,1014,203,974,204,205,979,206,207,984,208,209,995,210,211,1000,212,213,214,215,216,217,218,219,1020,220,221,1015,1056,222,1028,223,224,1034,225,226,1030,1063,227,228,1068,229,230,231,232,233,234,235,236,1076,237,238,239,240,241,1086,242,1061,243,244,1066,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,1113,1092,1087,263,264,265,266,267,1100,268,269,270,271,272,273,274,275,276,277,278,1110,279,280,1119,281,282,1114,1144,283,284,285,286,1127,287,288,289,290,291,1131,292,293,294,295,296,297,298,299,1142,300,301,1139,1161,302,1145,303,304,305,306,307,308,309,310,311,312,313,1157,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,1194,341,342,1202,343,344,1209,345,346,1216,347,348,1223,349,350,1230,351,352,1237,353,354,1244,355,1200,356,357,1195,1255,358,1203,1262,359,1210,1267,360,1217,1272,361,1224,1277,362,1231,1282,363,1238,1287,364,1245,1292,365,1260,366,367,1256,1299,368,1263,1306,369,1268,1311,370,1273,1316,371,1278,1321,372,1283,1326,373,1288,1331,374,1293,1336,375,1304,376,377,1300,1343,378,1307,1350,379,1312,1355,380,1317,1360,381,1322,1365,382,1327,1370,383,1332,1375,384,1337,1380,385,1348,386,387,1344,1387,388,1351,1394,389,1356,1399,390,1361,1404,391,1366,1409,392,1371,1414,393,1376,1419,394,1381,1424,395,1392,396,397,1388,1431,398,1395,1438,399,1400,1443,400,1405,1448,401,1410,1453,402,1415,1458,403,1420,1463,404,1425,1468,405,1436,406,407,1432,1475,408,1439,1482,409,1444,1487,410,1449,1492,411,1454,1497,412,1459,1502,413,1464,1507,414,1469,1512,415,1480,416,417,1476,1519,418,1483,1526,419,1488,1531,420,1493,1536,421,1498,1541,422,1503,1546,423,1508,1551,424,1513,1556,425,1524,426,427,1520,1563,428,1527,1570,429,1532,1575,430,1537,1580,431,1542,1585,432,1547,1590,433,1552,1595,434,1557,1600,435,1568,436,437,1564,1607,438,1571,1614,439,1576,1619,440,1581,1624,441,1586,1629,442,1591,1634,443,1596,1639,444,1601,1644,445,1612,446,447,1608,1651,448,1615,1653,449,1620,1655,450,1625,1657,451,1630,1659,452,1635,1661,453,1640,1663,454,1645,1665,455,456,457,458,459,460,1152,461,462,1675,463,464,465,466,1668,467,468,469,470,1191,1685,1679,471,727,472,998,473,474,1006,475,1693,476,477,478,479,480,1698,481,482,483,1001,1690,1704,1049,484,485,1044,1707,486,487,488,489,1082,1712,490,1077,1715,1709,491,492,849,856,807,817,493,811,867,860,871,812,494,821,902,858,850,952,909,947,957,904,953,872,495,918,496,982,497,498,499,500,501,989,502,1730,503,504,505,985,1724,506,507,508,509,510,1737,1733,1038,511,512,876,513,514,884,515,1745,516,517,842,518,893,1750,519,520,521,879,1742,894,926,936,522,921,1756,523,524,525,526,967,1759,527,962,1762,937,528,975,738,737,529,530,741,531,1768,749,532,1770,756,533,1772,762,534,535,536,537,1774,538,539,540,541,542,543,544,545,1785,546,547,548,1179,549,1788,550,551,552,1182,553,554,555,556,659,656,655,663,660,658,667,664,662,671,668,666,675,672,670,679,676,674,683,680,678,686,684,682,557,687,685,693,690,689,697,694,692,701,698,696,705,702,700,709,706,704,713,710,708,717,714,712,721,718,716,725,722,720,729,726,724,558,730,728,735,733,732,559,736,734,742,560,746,750,743,740,757,751,748,763,758,755,1778,764,761,561,562,563,564,565,566,567,768,767,771,568,773,775,772,770,569,776,774,777,570,778,781,571,783,786,782,780,790,787,785,794,791,789,797,795,793,572,798,796,809,804,801,815,573,818,823,816,813,825,824,822,828,574,830,833,829,827,836,834,832,575,837,835,576,840,838,802,806,845,808,803,851,577,578,579,580,864,861,581,868,865,885,582,889,1747,886,883,583,584,585,839,843,890,846,848,898,852,855,903,586,907,905,587,914,912,866,873,916,875,880,920,588,925,924,1752,931,927,891,895,933,899,901,941,589,590,591,954,948,946,958,955,951,917,919,592,593,960,959,971,966,963,928,932,1765,934,938,972,942,944,977,1727,594,595,596,994,990,1007,597,1011,1695,1008,1005,598,1013,1012,1024,1019,1016,599,1025,1022,973,976,1026,978,980,1031,981,986,1036,991,996,1039,997,1002,1043,600,1048,1047,1701,1054,1050,1017,1021,1057,1023,1018,1058,1027,1029,1059,1032,1035,1064,1072,1033,1069,601,1073,1070,602,1075,1074,1085,1081,1078,1051,1055,1718,1094,1090,1088,603,1095,1093,1060,1062,1096,1065,1067,1098,1103,604,1105,605,1104,1102,1108,1071,1111,606,1109,1106,1121,1118,1115,1089,1091,1122,1125,607,1128,1097,1126,1123,1099,1101,1132,608,609,610,611,612,613,614,1137,1135,1107,1112,1140,1116,1120,1146,615,1117,1150,1129,1798,1155,1124,1130,1153,1133,1134,1158,616,617,618,619,620,621,1136,1138,622,1141,1143,1162,1147,1149,1164,1151,1148,1163,1672,1166,1165,623,1169,1168,1159,624,1171,1156,1160,1170,625,1173,1172,626,1175,1174,627,1177,1176,1790,1180,1178,628,1185,1183,629,1187,1186,630,1190,1188,1207,1199,1196,1214,1208,1204,1221,1215,1211,1228,1222,1218,1235,1229,1225,1242,1236,1232,1249,1243,1239,1253,1250,1246,631,1254,1251,1197,1201,1257,1205,1198,1264,1212,1206,1269,1219,1213,1274,1226,1220,1279,1233,1227,1284,1240,1234,1289,1247,1241,1294,1252,1248,1297,1258,1261,1301,1265,1259,1308,1270,1266,1313,1275,1271,1318,1280,1276,1323,1285,1281,1328,1290,1286,1333,1295,1291,1338,1298,1296,1341,1302,1305,1345,1309,1303,1352,1314,1310,1357,1319,1315,1362,1324,1320,1367,1329,1325,1372,1334,1330,1377,1339,1335,1382,1342,1340,1385,1346,1349,1389,1353,1347,1396,1358,1354,1401,1363,1359,1406,1368,1364,1411,1373,1369,1416,1378,1374,1421,1383,1379,1426,1386,1384,1429,1390,1393,1433,1397,1391,1440,1402,1398,1445,1407,1403,1450,1412,1408,1455,1417,1413,1460,1422,1418,1465,1427,1423,1470,1430,1428,1473,1434,1437,1477,1441,1435,1484,1446,1442,1489,1451,1447,1494,1456,1452,1499,1461,1457,1504,1466,1462,1509,1471,1467,1514,1474,1472,1517,1478,1481,1521,1485,1479,1528,1490,1486,1533,1495,1491,1538,1500,1496,1543,1505,1501,1548,1510,1506,1553,1515,1511,1558,1518,1516,1561,1522,1525,1565,1529,1523,1572,1534,1530,1577,1539,1535,1582,1544,1540,1587,1549,1545,1592,1554,1550,1597,1559,1555,1602,1562,1560,1605,1566,1569,1609,1573,1567,1616,1578,1574,1621,1583,1579,1626,1588,1584,1631,1593,1589,1636,1598,1594,1641,1603,1599,1646,1606,1604,1649,1610,1613,1652,1617,1611,1654,1622,1618,1656,1627,1623,1658,1632,1628,1660,1637,1633,1662,1642,1638,1664,1647,1643,1666,1650,1648,1667,1683,1670,1669,1167,1673,1671,632,1677,1154,1674,1681,1676,633,1684,1682,1192,1687,1686,1189,1193,1688,1678,1689,1680,1003,999,1691,1797,1009,1692,1010,1696,1694,634,1702,1700,1697,1706,1699,1045,1004,1708,1703,1052,1705,635,1046,1711,1083,1714,1713,1079,1084,1716,636,1080,1717,1053,1719,1710,859,857,853,637,1720,819,1794,862,869,1721,1722,814,910,908,949,906,911,956,913,915,638,863,1723,874,987,983,1725,1796,1728,1726,639,992,1732,1729,1735,1731,1037,988,1736,1740,1739,1738,1040,1042,1741,993,1041,1734,881,877,1743,1795,887,1744,888,1748,1746,640,1753,844,1749,1755,1751,922,882,1757,1754,929,896,641,923,1758,968,1761,1760,964,969,1763,970,965,1764,930,1766,939,642,643,644,1793,744,1767,745,752,1769,753,759,1771,760,765,1773,645,1777,1776,766,1779,1775,646,1781,1780,647,1783,1782,1784,1787,1786,648,649,650,1181,1791,1789,1799,1184,1792,651,652,653]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[978941473,2691059412,2768480735,3348264085],"revisions":[{"type":"kMesh","name":"LowPolyMesh","revision":-1,"autoGenerated":true,"meshdata":{"name":"LowPolyMesh","m_bound":{"m_center":[0.0,0.0,0.0],"m_extents":[4.5144,2.091,0.1611]},"packedVertices":[49150,49150,49149,16383,49150,49149,49150,16383,49149,16383,16383,49149,49150,16383,16381,16383,16383,16381,49150,49150,16381,16383,49150,16381,49150,16383,49149,16383,16383,49149,49150,16383,16381,16383,16383,16381,49150,16383,49149,49150,16383,16381,49150,49150,49149,49150,49150,16381,16383,49150,49149,16383,49150,16381,16383,16383,49149,16383,16383,16381,49150,49150,16381,16383,49150,16381,49150,49150,49149,16383,49150,49149,16383,49150,49149,49150,16383,49149,16383,16383,16381,49150,49150,16381,16383,16383,49149,49150,16383,16381,49150,16383,16381,49150,49150,49149,16383,49150,16381,16383,16383,49149,16383,49150,16381,49150,49150,49149],"packedNormals":[127,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,0,127,127,0,127,0,127,127,0,127,254,127,127,254,127,127,0,127,127,0,127,127,127,254,127,127,254,127],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,24,3,25,4,5,6,26,7,27,8,9,10,28,11,29,12,13,14,30,15,31,16,17,18,32,19,33,20,21,22,34,23,35]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[4256450858,2503622707,2701896730,3388076770],"revisions":[{"type":"kByteStream","name":"internal","revision":-1,"autoGenerated":true,"rawdata":""}]},{"guid":[2066601812,2238533014,3081119724,3425703264],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[0.0,0.0702,0.0],"m_extents":[0.0296,0.1394,0.0098]},"packedVertices":[49150,25896,24567,49150,24369,26167,45600,25659,21267,45600,25659,44217,49150,25896,40917,49150,25896,24567,49150,25896,40917,45600,25659,44217,49150,24369,39317,49150,24369,26167,49150,25896,24567,49150,25896,40917,49150,24369,26167,45600,25659,21267,45600,25659,44217,49150,24369,26167,41367,24483,21267,45600,25659,21267,24150,24483,21267,24567,25659,21267,32767,25225,21267,41367,24483,21267,32767,24483,16367,32767,25225,21267,24150,24483,21267,32767,25225,21267,32767,24483,16367,32767,24483,16367,24150,24483,44217,24150,24483,21267,41367,24483,44217,32767,25225,44217,32767,24483,49117,41367,24483,44217,32767,24483,49117,32767,23781,44217,37667,24182,27817,41367,24483,21267,41367,24483,44217,27850,24182,26167,24150,24483,21267,28383,24139,26167,28383,24139,39317,27850,24182,37667,27850,24182,37667,27850,24182,27817,27850,22842,27817,27850,22842,37667,28000,22842,38817,28000,24168,38817,27850,24182,39317,28000,24168,38817,28000,22842,38817,28383,22842,39317,28383,24139,39317,28383,22842,39317,32767,23781,39317,28383,24139,39317,37667,24182,37667,37133,24139,39317,37133,24139,26167,37517,22842,38817,37517,24168,38817,37133,24139,39317,37667,22842,37667,37667,24182,37667,37517,24168,38817,37667,24182,27817,37667,24182,37667,37667,22842,37667,37667,22842,27817,37517,22842,26667,37517,24168,26667,37667,24182,26167,37517,24168,26667,37517,22842,26667,37133,22842,26167,37133,24139,26167,37133,22842,26167,32767,23781,26167,37133,24139,26167,28383,24139,26167,28383,22842,26167,28000,22842,26667,28000,24168,26667,28000,24168,26667,28000,22842,26667,27850,22842,27817,28117,22759,27017,28000,22759,27817,27850,22842,27817,28383,22842,26167,28383,22759,26667,28117,22759,27017,37133,22759,26667,28383,22759,26667,28383,22842,26167,37133,22723,27817,28383,22723,27817,28383,22759,26667,28383,22723,27817,37133,22723,27817,37133,22723,37667,28383,22723,27817,37133,22723,27817,37133,22605,27817,28383,22723,37667,28383,22723,27817,28383,22605,27817,28383,22723,27817,28383,22723,37667,28000,22759,37667,28383,22723,27817,28000,22759,27817,28117,22759,27017,28383,22723,27817,28117,22759,27017,28383,22759,26667,28000,22759,27817,28000,22759,37667,27850,22842,37667,27850,22842,37667,28000,22759,37667,28117,22759,38467,28117,22759,38467,28383,22759,38817,28383,22842,39317,28383,22759,38817,37133,22759,38817,37133,22842,39317,28383,22723,37667,37133,22723,37667,37133,22759,38817,37133,22723,37667,28383,22723,37667,28383,22605,37667,37133,22723,37667,37133,22605,37667,37133,22605,27817,37133,22723,37667,37133,22723,27817,37517,22759,27817,37517,22759,37667,37400,22759,38467,37133,22723,37667,37400,22759,38467,37133,22759,38817,37133,22723,37667,37400,22759,38467,37517,22842,38817,37133,22842,39317,37667,22842,37667,37517,22842,38817,37400,22759,38467,37517,22759,27817,37667,22842,27817,37667,22842,37667,37667,22842,27817,37517,22759,27817,37400,22759,27017,37400,22759,27017,37133,22759,26667,37133,22842,26167,37133,22723,27817,37133,22759,26667,37400,22759,27017,37133,22723,27817,37400,22759,27017,37517,22759,27817,37133,22605,37667,28383,22605,37667,28383,22605,27817,37133,22605,37667,28383,22605,37667,28383,22573,38817,37133,22605,37667,37133,22573,38817,37400,22573,38467,37133,22605,37667,37400,22573,38467,37517,22573,37667,37133,22605,27817,37133,22605,37667,37517,22573,37667,37517,22573,27817,37400,22573,27017,37133,22605,27817,37400,22573,27017,37133,22573,26667,37133,22605,27817,28383,22605,27817,37133,22605,27817,37133,22573,26667,28383,22573,26667,28117,22573,27017,28383,22605,27817,28117,22573,27017,28000,22573,27817,28383,22605,27817,28383,22605,37667,28383,22605,27817,28000,22573,27817,28000,22573,37667,28117,22573,38467,28383,22605,37667,28117,22573,38467,28383,22573,38817,28383,22605,37667,28000,22487,38817,28383,22487,39317,28383,22573,38817,27850,22487,37667,28000,22487,38817,28117,22573,38467,28000,22573,37667,28000,22573,27817,27850,22487,27817,27850,21548,37667,27850,22487,37667,27850,22487,27817,28000,21465,27817,28000,21465,37667,27850,21548,37667,28383,21430,27817,28383,21430,37667,28000,21465,37667,28383,21430,27817,37133,21430,27817,37133,21430,37667,28383,21430,27817,37133,21430,27817,37133,21315,27817,37133,21430,27817,28383,21430,27817,28383,21465,26667,37133,21430,27817,37133,21465,26667,37400,21465,27017,37133,21430,27817,37400,21465,27017,37517,21465,27817,37133,21430,37667,37133,21430,27817,37517,21465,27817,37133,21430,27817,37133,21430,37667,37133,21315,37667,37133,21315,37667,28383,21315,37667,28383,21315,27817,28383,21315,37667,37133,21315,37667,37133,21430,37667,37133,21315,37667,28383,21315,37667,28383,21279,38817,37133,21315,37667,37133,21279,38817,37400,21279,38467,37133,21315,37667,37400,21279,38467,37517,21279,37667,37133,21315,27817,37133,21315,37667,37517,21279,37667,37517,21279,27817,37400,21279,27017,37133,21315,27817,37400,21279,27017,37133,21279,26667,37133,21315,27817,28383,21315,27817,37133,21315,27817,37133,21279,26667,28383,21279,26667,28117,21279,27017,28383,21315,27817,28117,21279,27017,28000,21279,27817,28383,21315,27817,28383,21315,37667,28383,21315,27817,28000,21279,27817,28383,21430,37667,28383,21430,27817,28383,21315,27817,28000,21279,37667,28117,21279,38467,28383,21315,37667,28117,21279,38467,28383,21279,38817,28383,21315,37667,28000,21197,38817,28383,21197,39317,28383,21279,38817,27850,21197,37667,28000,21197,38817,28117,21279,38467,28000,21279,37667,28000,21279,27817,27850,21197,27817,27850,21197,27817,27850,20258,27817,27850,20258,37667,28000,20258,26667,27850,20258,27817,27850,21197,27817,28383,20258,26167,28000,20258,26667,28000,21197,26667,28383,20258,26167,28383,21197,26167,37133,21197,26167,37133,20175,26667,28383,20175,26667,28383,20258,26167,37133,20139,27817,28383,20139,27817,28383,20175,26667,37133,20139,27817,28383,20139,27817,28383,20139,37667,28383,20021,27817,28383,20139,27817,37133,20139,27817,28383,20021,37667,28383,20139,37667,28383,20139,27817,28383,20139,37667,28383,20021,37667,37133,20021,37667,28383,20139,37667,37133,20139,37667,37133,20175,38817,28383,20139,37667,28383,20175,38817,28117,20175,38467,28383,20139,37667,28117,20175,38467,28000,20175,37667,28383,20139,27817,28383,20139,37667,28000,20175,37667,28383,20139,27817,28000,20175,27817,28117,20175,27017,28383,20139,27817,28117,20175,27017,28383,20175,26667,28383,20258,26167,28383,20175,26667,28117,20175,27017,28117,20175,27017,28000,20175,27817,27850,20258,27817,28000,20175,27817,28000,20175,37667,27850,20258,37667,27850,20258,37667,28000,20175,37667,28117,20175,38467,27850,20258,37667,28000,20258,38817,28000,21197,38817,28000,20258,38817,28383,20258,39317,28383,21197,39317,28383,20258,39317,37133,20258,39317,37133,21197,39317,28383,20175,38817,37133,20175,38817,37133,20258,39317,28117,20175,38467,28383,20175,38817,28383,20258,39317,37400,20175,38467,37517,20258,38817,37133,20258,39317,37667,20258,37667,37517,20258,38817,37400,20175,38467,37517,20175,37667,37517,20175,27817,37667,20258,27817,37133,20139,37667,37133,20139,27817,37517,20175,27817,37133,20021,37667,37133,20021,27817,37133,20139,27817,28383,20021,37667,37133,20021,37667,37133,20021,27817,37133,20021,37667,28383,20021,37667,28383,19989,38817,37133,20021,37667,37133,19989,38817,37400,19989,38467,37133,20021,37667,37400,19989,38467,37517,19989,37667,37133,20021,27817,37133,20021,37667,37517,19989,37667,37517,19989,27817,37400,19989,27017,37133,20021,27817,37400,19989,27017,37133,19989,26667,37133,20021,27817,28383,20021,27817,37133,20021,27817,37133,19989,26667,28383,19989,26667,28117,19989,27017,28383,20021,27817,28117,19989,27017,28000,19989,27817,28383,20021,27817,28383,20021,37667,28383,20021,27817,28000,19989,27817,28000,19989,37667,28117,19989,38467,28383,20021,37667,28117,19989,38467,28383,19989,38817,28383,20021,37667,28117,19989,38467,28000,19906,38817,28383,19906,39317,27850,19906,37667,28000,19906,38817,28117,19989,38467,28000,19989,37667,28000,19989,27817,27850,19906,27817,27850,18964,37667,27850,19906,37667,27850,19906,27817,27850,18964,37667,28000,18964,38817,28000,19906,38817,28000,19906,38817,28000,18964,38817,28383,18964,39317,28383,18964,39317,37133,18964,39317,37133,19906,39317,28383,18881,38817,37133,18881,38817,37133,18964,39317,28383,18849,37667,37133,18849,37667,37133,18881,38817,28383,18849,27817,37133,18849,27817,37133,18849,37667,28383,18731,27817,28383,18849,27817,37133,18849,27817,28383,18731,37667,28383,18849,37667,28383,18849,27817,37133,18849,37667,28383,18849,37667,28383,18731,37667,37133,18731,37667,37133,18731,27817,37133,18849,27817,37133,18731,27817,37133,18731,37667,28383,18731,37667,37133,18731,27817,37133,18731,37667,37517,18695,37667,37517,18695,27817,37400,18695,27017,37133,18731,27817,37400,18695,27017,37133,18695,26667,37133,18731,27817,28383,18731,27817,37133,18731,27817,37133,18695,26667,28383,18695,26667,28117,18695,27017,28383,18731,27817,28117,18695,27017,28000,18695,27817,28383,18731,27817,28383,18731,37667,28383,18731,27817,28000,18695,27817,28000,18695,37667,28117,18695,38467,28383,18731,37667,28117,18695,38467,28383,18695,38817,28383,18731,37667,37133,18731,37667,28383,18731,37667,28383,18695,38817,37133,18731,37667,37133,18695,38817,37400,18695,38467,37133,18731,37667,37400,18695,38467,37517,18695,37667,37667,18612,37667,37517,18695,37667,37400,18695,38467,37517,18695,27817,37517,18695,37667,37667,18612,37667,37667,18612,27817,37517,18612,26667,37400,18695,27017,37517,18612,26667,37133,18612,26167,37133,18695,26667,28383,18695,26667,37133,18695,26667,37133,18612,26167,28383,18695,26667,28383,18612,26167,28000,18612,26667,28117,18695,27017,28000,18612,26667,27850,18612,27817,28000,18695,37667,28000,18695,27817,27850,18612,27817,27850,18612,37667,28000,18612,38817,28117,18695,38467,28117,18695,38467,28000,18612,38817,28383,18612,39317,37133,18695,38817,28383,18695,38817,28383,18612,39317,37400,18695,38467,37133,18695,38817,37133,18612,39317,37517,17555,38817,37517,18612,38817,37133,18612,39317,37667,17555,37667,37667,18612,37667,37517,18612,38817,37667,17555,37667,37667,17555,27817,37667,18612,27817,37133,17555,39317,37667,17555,27817,37133,17555,26167,28383,17555,39317,27300,17555,40917,37667,17555,39317,38217,17555,40917,38217,17555,24367,37667,17555,26167,27300,17555,24367,37517,17555,26667,37667,17555,37667,37517,17555,38817,37667,18612,27817,37667,17555,27817,37517,17555,26667,37517,18612,26667,37517,17555,26667,37133,17555,26167,37133,17555,26167,28383,17555,26167,28383,18612,26167,28383,17555,26167,27850,17555,26167,27850,17555,27817,28000,17555,26667,28383,17555,26167,28000,17555,26667,28000,18612,26667,28000,18612,26667,28000,17555,26667,27850,17555,27817,27850,17555,27817,27850,17555,37667,27850,18612,37667,27850,17555,37667,27850,17555,39317,28000,17555,38817,27850,18612,37667,27850,17555,37667,28000,17555,38817,28000,17555,38817,28383,17555,39317,28383,18612,39317,28383,17555,39317,37133,17555,39317,37133,18612,39317,27300,17555,40917,27300,17555,24367,26917,17523,24367,26917,17523,40917,27017,17523,41767,27300,17555,40917,27017,17523,41767,27300,17523,42117,27300,17555,40917,38217,17555,40917,27300,17555,40917,27300,17523,42117,38217,17523,42117,38500,17523,41767,38217,17555,40917,38500,17523,41767,38600,17523,40917,38217,17555,40917,38217,17555,24367,38217,17555,40917,38600,17523,40917,38600,17523,24367,38500,17523,23567,38217,17555,24367,38500,17523,23567,38217,17523,23217,38217,17555,24367,27300,17555,24367,38217,17555,24367,38217,17523,23217,27300,17555,24367,27300,17523,23217,27017,17523,23567,27300,17555,24367,27017,17523,23567,26917,17523,24367,26750,17437,24367,26917,17523,24367,27017,17523,23567,26917,17523,40917,26917,17523,24367,26750,17437,24367,26750,17437,40917,26917,17437,42117,27017,17523,41767,26917,17437,42117,27300,17437,42567,27300,17523,42117,38217,17523,42117,27300,17523,42117,27300,17437,42567,38217,17523,42117,38217,17437,42567,38600,17437,42117,38500,17523,41767,38600,17437,42117,38767,17437,40917,38600,17523,24367,38600,17523,40917,38767,17437,40917,38767,17437,24367,38600,17437,23217,38500,17523,23567,38600,17437,23217,38217,17437,22767,38217,17523,23217,27300,17523,23217,38217,17523,23217,38217,17437,22767,26917,17437,23217,27017,17523,23567,27300,17523,23217,26917,16498,23217,26917,17437,23217,27300,17437,22767,26750,16498,24367,26750,17437,24367,26917,17437,23217,26750,16498,40917,26750,17437,40917,26750,17437,24367,26917,16415,24367,26917,16415,40917,26750,16498,40917,27300,16383,24367,27300,16383,40917,26917,16415,40917,27300,16383,24367,38217,16383,24367,38217,16383,40917,38217,16383,24367,27300,16383,24367,27300,16415,23217,38217,16383,24367,38217,16415,23217,38500,16415,23567,38217,16383,24367,38500,16415,23567,38600,16415,24367,38217,16383,40917,38217,16383,24367,38600,16415,24367,38217,16383,40917,38600,16415,40917,38500,16415,41767,38217,16383,40917,38500,16415,41767,38217,16415,42117,27300,16383,40917,38217,16383,40917,38217,16415,42117,27300,16383,40917,27300,16415,42117,27017,16415,41767,27300,16383,40917,27017,16415,41767,26917,16415,40917,26917,16415,40917,27017,16415,41767,26917,16498,42117,26750,16498,40917,26917,16498,42117,26917,17437,42117,26917,17437,42117,26917,16498,42117,27300,16498,42567,27300,16498,42567,38217,16498,42567,38217,17437,42567,27300,16415,42117,38217,16415,42117,38217,16498,42567,26917,16498,42117,27017,16415,41767,27300,16415,42117,38217,16415,42117,38500,16415,41767,38600,16498,42117,38217,17437,42567,38217,16498,42567,38600,16498,42117,38600,17437,42117,38600,16498,42117,38767,16498,40917,38767,16498,40917,38767,16498,24367,38767,17437,24367,38600,16415,40917,38600,16415,24367,38767,16498,24367,38600,16498,42117,38500,16415,41767,38600,16415,40917,38767,16498,24367,38600,16415,24367,38500,16415,23567,38767,17437,24367,38767,16498,24367,38600,16498,23217,38600,17437,23217,38600,16498,23217,38217,16498,22767,38217,16498,22767,27300,16498,22767,27300,17437,22767,38217,16415,23217,27300,16415,23217,27300,16498,22767,38600,16498,23217,38500,16415,23567,38217,16415,23217,26917,16498,23217,27300,16498,22767,27300,16415,23217,26917,16415,24367,26750,16498,24367,26917,16498,23217,26917,16415,24367,27017,16415,23567,27300,16383,24367,27017,16415,23567,27300,16415,23217,27300,16383,24367,37133,18849,37667,37133,18849,27817,37517,18881,27817,37517,18881,37667,37400,18881,38467,37133,18849,37667,37400,18881,38467,37133,18881,38817,37133,18849,37667,37400,18881,38467,37517,18964,38817,37133,18964,39317,37667,18964,37667,37517,18964,38817,37400,18881,38467,37517,18881,37667,37517,18881,27817,37667,18964,27817,37667,18964,37667,37667,18964,27817,37667,19906,27817,37667,18964,37667,37667,19906,37667,37517,19906,38817,37517,18964,38817,37517,19906,38817,37133,19906,39317,37400,19989,38467,37133,19989,38817,37133,19906,39317,37667,19906,37667,37517,19989,37667,37400,19989,38467,37517,19989,27817,37517,19989,37667,37667,19906,37667,37667,19906,27817,37517,19906,26667,37400,19989,27017,37400,19989,27017,37517,19906,26667,37133,19906,26167,28383,19989,26667,37133,19989,26667,37133,19906,26167,28383,19989,26667,28383,19906,26167,28000,19906,26667,28117,19989,27017,28000,19906,26667,27850,19906,27817,28000,18964,26667,27850,18964,27817,27850,19906,27817,28383,19906,26167,28383,18964,26167,28000,18964,26667,37133,18964,26167,28383,18964,26167,28383,19906,26167,37133,18881,26667,28383,18881,26667,28383,18964,26167,37133,18849,27817,28383,18849,27817,28383,18881,26667,37133,18849,27817,37133,18881,26667,37400,18881,27017,37133,18849,27817,37400,18881,27017,37517,18881,27817,37667,18964,27817,37517,18881,27817,37400,18881,27017,37667,18964,27817,37517,18964,26667,37517,19906,26667,37517,19906,26667,37517,18964,26667,37133,18964,26167,37400,18881,27017,37133,18881,26667,37133,18964,26167,28383,18849,27817,28117,18881,27017,28383,18881,26667,28383,18964,26167,28383,18881,26667,28117,18881,27017,28117,18881,27017,28000,18881,27817,27850,18964,27817,28000,18881,27817,28000,18881,37667,27850,18964,37667,28383,18849,27817,28383,18849,37667,28000,18881,37667,28383,18849,27817,28000,18881,27817,28117,18881,27017,28383,18849,37667,28117,18881,38467,28000,18881,37667,28000,18881,37667,28117,18881,38467,28000,18964,38817,28117,18881,38467,28383,18881,38817,28383,18964,39317,28383,18849,37667,28383,18881,38817,28117,18881,38467,37133,19989,38817,28383,19989,38817,28383,19906,39317,37517,20175,37667,37400,20175,38467,37133,20139,37667,37400,20175,38467,37133,20175,38817,37133,20139,37667,37133,20139,27817,37400,20175,27017,37517,20175,27817,37667,20258,27817,37517,20175,27817,37400,20175,27017,37667,21197,27817,37667,20258,27817,37517,20258,26667,37667,21197,27817,37667,21197,37667,37667,20258,37667,37667,20258,37667,37667,21197,37667,37517,21197,38817,37517,20258,38817,37517,21197,38817,37133,21197,39317,37400,21279,38467,37133,21279,38817,37133,21197,39317,37667,21197,37667,37517,21279,37667,37400,21279,38467,37517,21279,27817,37517,21279,37667,37667,21197,37667,37667,21197,27817,37517,21197,26667,37400,21279,27017,37400,21279,27017,37517,21197,26667,37133,21197,26167,28383,21279,26667,37133,21279,26667,37133,21197,26167,28383,21197,26167,28000,21197,26667,28117,21279,27017,28117,21279,27017,28000,21197,26667,27850,21197,27817,37517,21197,26667,37517,20258,26667,37133,20258,26167,37400,20175,27017,37133,20175,26667,37133,20258,26167,37133,20139,27817,37133,20175,26667,37400,20175,27017,37133,21279,38817,28383,21279,38817,28383,21197,39317,28383,21430,37667,37133,21430,37667,37133,21465,38817,28383,21430,37667,28383,21465,38817,28117,21465,38467,28383,21430,37667,28117,21465,38467,28000,21465,37667,27850,21548,37667,28000,21465,37667,28117,21465,38467,27850,22487,37667,27850,21548,37667,28000,21548,38817,28000,22487,38817,28000,21548,38817,28383,21548,39317,37133,21548,39317,37133,22487,39317,28383,22487,39317,37517,21548,38817,37517,22487,38817,37133,22487,39317,37667,21548,37667,37667,22487,37667,37517,22487,38817,37667,21548,37667,37667,21548,27817,37667,22487,27817,37517,22573,27817,37517,22573,37667,37667,22487,37667,37667,22487,27817,37517,22487,26667,37400,22573,27017,37517,22487,26667,37133,22487,26167,37133,22573,26667,28383,22573,26667,37133,22573,26667,37133,22487,26167,28383,22573,26667,28383,22487,26167,28000,22487,26667,28117,22573,27017,28000,22487,26667,27850,22487,27817,28000,22487,26667,28000,21548,26667,27850,21548,27817,28383,22487,26167,28383,21548,26167,28000,21548,26667,37133,21548,26167,28383,21548,26167,28383,22487,26167,37133,21465,26667,28383,21465,26667,28383,21548,26167,37517,21548,26667,37400,21465,27017,37133,21465,26667,37667,21548,27817,37517,21465,27817,37400,21465,27017,37517,21465,37667,37517,21465,27817,37667,21548,27817,37667,21548,37667,37517,21548,38817,37400,21465,38467,37517,21465,37667,37400,21465,38467,37133,21430,37667,37400,21465,38467,37133,21465,38817,37133,21430,37667,37400,21465,38467,37517,21548,38817,37133,21548,39317,28383,21465,38817,37133,21465,38817,37133,21548,39317,28000,21548,38817,28117,21465,38467,28383,21465,38817,37667,22487,27817,37667,21548,27817,37517,21548,26667,37517,22487,26667,37517,21548,26667,37133,21548,26167,28383,21465,26667,28117,21465,27017,28000,21548,26667,28117,21465,27017,28000,21465,27817,27850,21548,27817,28383,21430,27817,28000,21465,27817,28117,21465,27017,28383,21430,27817,28117,21465,27017,28383,21465,26667,37667,22487,37667,37517,22573,37667,37400,22573,38467,37517,22487,38817,37400,22573,38467,37133,22573,38817,37133,22573,38817,28383,22573,38817,28383,22487,39317,28383,22723,37667,28383,22759,38817,28117,22759,38467,28383,22723,37667,28117,22759,38467,28000,22759,37667,37667,24182,39317,37517,24168,38817,24150,24483,21267,32767,24483,16367,32767,23781,21267,41367,24483,21267,32767,23781,21267,32767,24483,16367,24150,24483,44217,16367,24369,39317,16367,24369,26167,16367,24369,39317,24150,24483,44217,19650,25659,44217,16367,25896,40917,16367,24369,39317,19650,25659,44217,19650,25659,21267,16367,25896,24567,16367,25896,40917,16367,25896,24567,19650,25659,21267,16367,24369,26167,16367,24369,26167,16367,24369,39317,16367,25896,40917,16367,24369,39317,19650,25659,44217,19650,25659,21267,16367,24369,26167,19650,25659,21267,24150,24483,21267,19650,25659,21267,24150,24483,21267,24150,24483,44217,19650,25659,44217,24567,25659,44217,24567,25659,21267,32767,26365,44217,32767,25225,44217,40950,25659,44217,45600,25659,21267,40950,25659,21267,40950,25659,44217,45600,25659,44217,41367,24483,44217,41367,24483,21267,49150,24369,39317,45600,25659,44217,41367,24483,44217,41367,24483,21267,49150,24369,26167,49150,24369,39317,39600,25774,32767,40950,25659,44217,40950,25659,21267,25917,25774,32767,24567,25659,44217,25983,25781,32817,31017,26215,36817,26000,25781,32667,32767,26365,30267,32217,39519,30267,33300,39519,30267,34467,26218,28667,39517,25781,32817,39517,25781,32667,33300,39519,28667,33300,26318,28667,33300,26318,30267,35483,33881,28667,34467,26218,28667,33300,26318,28667,33300,39519,28667,32767,40928,28667,39033,40928,32767,32767,40928,28667,33300,39519,28667,33300,39519,30267,32767,40928,28667,32767,40928,30267,32217,39519,30267,26483,40928,32767,32767,40928,28667,32217,39519,28667,26483,40928,32767,32767,49146,32767,32767,40928,28667,32767,40928,28667,26483,40928,32767,32767,40928,36817,39033,40928,32767,32767,40928,28667,32767,49146,32767,39033,40928,32767,32767,49146,32767,32767,40928,36817,39033,40928,32767,32767,40928,36817,33300,39519,36817,39033,40928,32767,35483,33881,36817,39517,25781,32817,39033,40928,32767,39517,25781,32817,39600,25774,32767,39033,40928,32767,39600,25774,32767,39517,25781,32667,39033,40928,32767,39517,25781,32667,35483,33881,28667,35483,33881,28667,39517,25781,32667,34467,26218,28667,35483,33881,36817,34467,26218,36817,39517,25781,32817,33300,26318,36817,34467,26218,36817,35483,33881,36817,33300,26318,36817,33300,39519,36817,33300,39519,35217,33300,39519,35217,32767,26365,35217,33300,26318,35217,32217,39713,36817,32217,26318,36817,32217,26318,35217,29583,33881,36817,31017,26215,36817,32217,26318,36817,32217,39713,36817,32767,40928,36817,26483,40928,32767,32217,39713,36817,32217,39713,35217,32767,40928,35217,33300,39519,36817,32767,40928,36817,32767,40928,35217,26483,40928,32767,25983,25781,32817,29583,33881,36817,29583,33881,36817,25983,25781,32817,31017,26215,36817,26483,40928,32767,25917,25774,32767,25983,25781,32817,26483,40928,32767,26000,25781,32667,25917,25774,32767,26483,40928,32767,30033,33881,28667,26000,25781,32667,30033,33881,28667,31050,26218,28667,26000,25781,32667,32217,26318,28667,31050,26218,28667,30033,33881,28667,32217,26318,28667,32217,39519,28667,32217,39519,30267,26483,40928,32767,32767,40928,36817,32767,49146,32767,24150,24483,44217,32767,24483,49117,32767,25225,44217,24150,24483,44217,32767,23781,44217,32767,24483,49117,45600,25659,21267,49150,24369,39317,49150,24369,39317,40950,25659,21267,41367,24483,21267,45600,25659,21267,32767,26365,21267,19650,25659,21267,32767,24483,49117,41367,24483,44217,41367,24483,21267,32767,23781,21267,32767,23781,26167,32767,23781,39317,32767,23781,44217,24150,24483,44217,32767,23781,44217,32767,23781,39317,27850,24182,27817,32767,23781,26167,32767,23781,21267,27850,22842,37667,27850,24182,37667,28000,24168,38817,37133,22842,39317,37133,24139,39317,37133,22842,39317,37517,22842,38817,37667,22842,27817,37667,24182,27817,37517,24168,26667,28383,22842,26167,28383,24139,26167,28000,24168,26667,27850,24182,27817,28000,22842,26667,28000,22842,26667,37133,22842,26167,37133,22759,26667,28383,22723,37667,28383,22605,27817,28383,22605,37667,28000,22759,27817,27850,22842,27817,28000,22842,38817,28000,22842,38817,28383,22842,39317,28383,22759,38817,37133,22605,37667,37133,22723,27817,37517,22759,37667,37133,22759,38817,37517,22759,37667,37517,22759,37667,37517,22842,26667,37517,22842,26667,37133,22605,27817,37133,22573,38817,37517,22573,27817,28383,22573,26667,28000,22573,37667,28117,22573,38467,28000,22573,37667,27850,22487,37667,27850,21548,27817,27850,21548,27817,28000,21465,27817,28383,21430,37667,28383,21315,27817,37133,21465,26667,37517,21465,37667,37133,21315,27817,37133,21315,27817,28383,21430,37667,37133,21279,38817,37517,21279,27817,28383,21279,26667,28000,21279,37667,28383,21315,37667,28117,21279,38467,28000,21279,37667,27850,21197,37667,27850,21197,37667,28000,21197,26667,28383,21197,26167,37133,20258,26167,37133,20258,26167,37133,20175,26667,37133,20139,37667,37133,20021,27817,28383,20021,27817,37133,20139,37667,28383,20175,38817,28000,20175,27817,28000,20258,26667,28000,20258,26667,27850,20258,27817,28000,20258,38817,27850,21197,37667,28000,21197,38817,28383,21197,39317,28383,20258,39317,28000,20258,38817,37133,20175,38817,37517,20175,37667,37667,20258,37667,37517,20175,37667,37133,20139,37667,28383,20021,27817,37133,19989,38817,37517,19989,27817,28383,19989,26667,28000,19989,37667,28383,19989,38817,28000,19989,37667,27850,19906,37667,27850,18964,27817,27850,19906,37667,28383,19906,39317,28383,19906,39317,28383,18964,39317,28383,18881,38817,28383,18849,37667,37133,18731,27817,28383,18731,27817,37133,18731,37667,37133,18849,37667,28383,18731,27817,37517,18695,27817,28383,18695,26667,28000,18695,37667,37133,18695,38817,37517,18612,38817,37667,18612,27817,37517,18695,27817,37400,18695,27017,28383,18612,26167,28117,18695,27017,28000,18695,27817,27850,18612,37667,28000,18695,37667,28383,18695,38817,37133,18612,39317,37517,18612,38817,37133,17555,39317,37517,17555,38817,37667,18612,37667,37667,17555,37667,37517,18612,26667,37133,18612,26167,37133,18612,26167,28383,18612,26167,27850,18612,27817,27850,18612,27817,28000,18612,38817,28000,18612,38817,28383,18612,39317,26917,17523,40917,38217,17523,42117,38600,17523,24367,27300,17523,23217,26917,17437,23217,26750,17437,40917,26917,17523,40917,27017,17523,41767,38217,17437,42567,38500,17523,41767,38600,17523,40917,38767,17437,24367,38600,17523,24367,38500,17523,23567,27300,17437,22767,27300,17437,22767,27300,16498,22767,26917,16498,23217,26750,16498,24367,26750,16498,24367,26917,16415,24367,27300,16383,40917,38217,16415,23217,38600,16415,40917,27300,16415,42117,26750,16498,40917,26750,17437,40917,27300,17437,42567,27300,17437,42567,27300,16498,42567,27300,16498,42567,38217,16498,42567,38600,17437,42117,38767,17437,40917,38767,17437,40917,38767,16498,40917,38767,16498,40917,38600,16498,23217,38600,17437,23217,38217,17437,22767,38217,17437,22767,38217,16498,22767,38217,16498,22767,27017,16415,23567,27017,16415,23567,37517,18881,37667,37133,18881,38817,37517,18881,37667,37667,18964,37667,37667,19906,37667,37517,18964,38817,37133,18964,39317,37517,19906,38817,37517,19906,38817,37667,19906,27817,37517,19989,27817,37133,19989,26667,28383,19906,26167,28117,19989,27017,28000,19989,27817,28000,19906,26667,28000,19906,26667,37133,19906,26167,37133,18964,26167,37133,18881,26667,37517,18964,26667,37667,19906,27817,37133,19906,26167,37517,18964,26667,28000,18964,26667,28000,18964,26667,27850,18964,27817,28000,18881,27817,27850,18964,37667,28000,18964,38817,37133,19906,39317,37517,20258,26667,37517,21197,26667,37667,20258,27817,37517,20258,38817,37133,20258,39317,37517,21197,38817,37517,21197,38817,37667,21197,27817,37517,21279,27817,37133,21279,26667,28383,21197,26167,28383,21279,26667,28000,21279,27817,37133,21197,26167,37517,20258,26667,37133,21197,39317,28383,21465,38817,28000,21548,38817,28000,22487,38817,28383,22487,39317,28383,21548,39317,37133,21548,39317,37517,21548,38817,37667,22487,37667,37667,22487,27817,37517,22573,27817,37400,22573,27017,28383,22487,26167,28117,22573,27017,28000,22573,27817,27850,22487,27817,28000,22487,26667,37133,22487,26167,37133,21548,26167,37133,21548,26167,37517,21548,26667,37667,21548,37667,37517,21465,37667,37133,21465,38817,28383,21548,39317,28383,21548,39317,37517,22487,26667,37133,22487,26167,28383,21548,26167,28000,21548,26667,37517,22487,38817,37133,22487,39317,37133,22487,39317,24150,24483,21267,19650,25659,44217,16367,25896,24567,16367,24369,26167,19650,25659,44217,19650,25659,21267,41367,24483,44217,45600,25659,44217,24567,25659,44217,24150,24483,44217,19650,25659,44217,45600,25659,44217,45600,25659,21267,41367,24483,44217,32767,26365,44217,33300,26318,36817,32767,26365,35217,33300,26318,35217,33300,26318,30267,33300,26318,28667,32767,26365,30267,32767,26365,21267,34467,26218,36817,32767,26365,21267,32217,26318,28667,32767,26365,30267,32217,26318,30267,32217,26318,35217,32217,26318,36817,32767,26365,35217,32767,26365,44217,24567,25659,21267,31050,26218,28667,33300,26318,30267,32767,40928,30267,32217,26318,30267,33300,39519,30267,33300,39519,28667,35483,33881,28667,32767,40928,30267,32217,39519,28667,30033,33881,28667,39033,40928,32767,35483,33881,36817,33300,39519,36817,33300,26318,35217,32217,26318,35217,32217,39713,35217,32767,40928,35217,32217,39713,35217,32217,39713,36817,29583,33881,36817,32767,40928,36817,33300,39519,35217,32217,39519,28667,32217,26318,30267,45600,25659,44217,49150,25896,24567,49150,24369,26167,49150,25896,40917,49150,24369,26167,45600,25659,44217,24150,24483,21267,24567,25659,21267,24567,25659,21267,32767,25225,21267,32767,25225,21267,32767,25225,21267,32767,24483,16367,32767,24483,16367,32767,24483,16367,24150,24483,44217,37667,24182,27817,37667,24182,27817,37667,24182,27817,37667,24182,27817,37667,24182,27817,41367,24483,21267,41367,24483,21267,41367,24483,21267,41367,24483,44217,41367,24483,44217,41367,24483,44217,41367,24483,44217,27850,24182,26167,27850,24182,26167,27850,24182,26167,24150,24483,21267,24150,24483,21267,24150,24483,21267,24150,24483,21267,28383,24139,26167,28383,24139,26167,28383,24139,26167,28383,24139,26167,28383,24139,26167,28383,24139,26167,28383,24139,26167,28383,24139,39317,28383,24139,39317,28383,24139,39317,28383,24139,39317,28383,24139,39317,28383,24139,39317,28383,24139,39317,27850,24182,37667,27850,24182,37667,27850,24182,37667,27850,24182,37667,27850,24182,37667,27850,24182,37667,27850,24182,37667,27850,22842,27817,27850,22842,37667,28000,24168,38817,27850,24182,39317,27850,24182,39317,27850,24182,39317,28000,24168,38817,28000,24168,38817,28000,22842,38817,28383,24139,39317,28383,22842,39317,32767,23781,39317,32767,23781,39317,37667,24182,37667,37667,24182,37667,37667,24182,37667,37667,24182,37667,37667,24182,37667,37133,24139,39317,37133,24139,39317,37133,24139,39317,37133,24139,39317,37133,24139,39317,37133,24139,39317,37133,24139,39317,37133,24139,26167,37133,24139,26167,37133,24139,26167,37133,24139,26167,37133,24139,26167,37133,24139,26167,37133,24139,26167,37517,22842,38817,37133,24139,39317,37667,22842,37667,37517,24168,38817,37667,24182,27817,37667,22842,37667,37667,22842,27817,37517,24168,26667,37667,24182,26167,37667,24182,26167,37667,24182,26167,37517,24168,26667,37517,24168,26667,37517,22842,26667,37133,24139,26167,37133,22842,26167,32767,23781,26167,32767,23781,26167,28383,24139,26167,28000,22842,26667,28000,24168,26667,28000,24168,26667,28000,24168,26667,27850,22842,27817,28117,22759,27017,27850,22842,27817,28383,22842,26167,28117,22759,27017,37133,22759,26667,28383,22842,26167,37133,22723,27817,28383,22759,26667,28383,22723,27817,37133,22723,37667,28383,22723,27817,37133,22605,27817,28383,22723,37667,28383,22605,27817,28383,22723,27817,28000,22759,37667,28000,22759,27817,27850,22842,37667,27850,22842,37667,28117,22759,38467,28117,22759,38467,28383,22842,39317,28383,22759,38817,37133,22842,39317,28383,22723,37667,37133,22759,38817,37133,22723,37667,28383,22605,37667,37133,22723,37667,37133,22605,27817,37133,22723,37667,37517,22759,27817,37400,22759,38467,37133,22842,39317,37667,22842,37667,37400,22759,38467,37517,22759,27817,37667,22842,37667,37667,22842,27817,37400,22759,27017,37400,22759,27017,37133,22842,26167,37133,22605,37667,28383,22605,27817,37133,22605,37667,28383,22573,38817,37133,22605,27817,37517,22573,37667,28383,22605,27817,37133,22573,26667,28383,22605,37667,28000,22573,27817,28000,22487,38817,28383,22573,38817,27850,22487,37667,28117,22573,38467,28000,22573,37667,27850,22487,27817,27850,21548,37667,27850,22487,27817,28000,21465,27817,27850,21548,37667,28383,21430,27817,28000,21465,37667,28383,21430,27817,37133,21430,37667,28383,21430,27817,37133,21315,27817,37133,21430,27817,28383,21465,26667,37133,21430,37667,37517,21465,27817,37133,21430,27817,37133,21315,37667,37133,21315,37667,28383,21315,27817,28383,21315,37667,37133,21430,37667,37133,21315,37667,28383,21279,38817,37133,21315,27817,37517,21279,37667,28383,21315,27817,37133,21279,26667,28383,21315,37667,28000,21279,27817,28383,21430,37667,28383,21315,27817,28000,21197,38817,28383,21279,38817,27850,21197,37667,28117,21279,38467,28000,21279,37667,27850,21197,27817,27850,21197,27817,27850,20258,37667,28000,20258,26667,27850,21197,27817,28383,20258,26167,28000,21197,26667,28383,20258,26167,37133,21197,26167,37133,20175,26667,28383,20258,26167,37133,20139,27817,28383,20175,26667,37133,20139,27817,28383,20139,37667,28383,20021,27817,37133,20139,27817,28383,20021,37667,28383,20139,27817,28383,20139,37667,37133,20021,37667,28383,20139,37667,37133,20175,38817,28383,20139,27817,28000,20175,37667,28383,20258,26167,28117,20175,27017,28117,20175,27017,27850,20258,27817,28000,20175,27817,27850,20258,37667,27850,20258,37667,28117,20175,38467,27850,20258,37667,28000,21197,38817,28000,20258,38817,28383,21197,39317,28383,20258,39317,37133,21197,39317,28383,20175,38817,37133,20258,39317,28117,20175,38467,28383,20258,39317,37400,20175,38467,37133,20258,39317,37667,20258,37667,37400,20175,38467,37517,20175,37667,37667,20258,27817,37133,20139,37667,37517,20175,27817,37133,20021,37667,37133,20139,27817,28383,20021,37667,37133,20021,27817,37133,20021,37667,28383,19989,38817,37133,20021,27817,37517,19989,37667,28383,20021,27817,37133,19989,26667,28383,20021,37667,28000,19989,27817,28117,19989,38467,28383,19906,39317,27850,19906,37667,28117,19989,38467,28000,19989,37667,27850,19906,27817,27850,18964,37667,27850,19906,27817,27850,18964,37667,28000,19906,38817,28000,19906,38817,28383,18964,39317,28383,18964,39317,37133,19906,39317,28383,18881,38817,37133,18964,39317,28383,18849,37667,37133,18881,38817,28383,18849,27817,37133,18849,37667,28383,18731,27817,37133,18849,27817,28383,18731,37667,28383,18849,27817,37133,18849,37667,28383,18731,37667,37133,18731,37667,37133,18849,27817,37133,18731,27817,28383,18731,37667,37133,18731,27817,37517,18695,37667,28383,18731,27817,37133,18695,26667,28383,18731,37667,28000,18695,27817,37133,18731,37667,28383,18695,38817,37667,18612,37667,37400,18695,38467,37517,18695,27817,37667,18612,37667,37667,18612,27817,37400,18695,27017,37517,18612,26667,37133,18695,26667,28383,18695,26667,37133,18612,26167,28383,18695,26667,28000,18612,26667,28117,18695,27017,27850,18612,27817,28000,18695,37667,27850,18612,27817,27850,18612,37667,28117,18695,38467,28117,18695,38467,28383,18612,39317,37133,18695,38817,28383,18612,39317,37400,18695,38467,37133,18612,39317,37517,17555,38817,37133,18612,39317,37667,17555,37667,37517,18612,38817,37667,17555,37667,37667,18612,27817,37133,17555,39317,37133,17555,39317,37133,17555,39317,37133,17555,39317,37133,17555,39317,37133,17555,39317,37667,17555,27817,37667,17555,27817,37667,17555,27817,37667,17555,27817,37133,17555,26167,37133,17555,26167,37133,17555,26167,37133,17555,26167,37133,17555,26167,37133,17555,26167,28383,17555,39317,28383,17555,39317,28383,17555,39317,28383,17555,39317,28383,17555,39317,28383,17555,39317,27300,17555,40917,27300,17555,40917,27300,17555,40917,27300,17555,40917,27300,17555,40917,27300,17555,40917,27300,17555,40917,37667,17555,39317,37667,17555,39317,37667,17555,39317,37667,17555,39317,37667,17555,39317,37667,17555,39317,38217,17555,40917,38217,17555,24367,38217,17555,24367,37667,17555,26167,37667,17555,26167,37667,17555,26167,37667,17555,26167,37667,17555,26167,37667,17555,26167,27300,17555,24367,27300,17555,24367,27300,17555,24367,27300,17555,24367,37517,17555,26667,37517,17555,26667,37667,17555,37667,37667,17555,37667,37517,17555,38817,37517,17555,38817,37667,18612,27817,37517,17555,26667,37517,18612,26667,37133,17555,26167,37133,17555,26167,28383,18612,26167,28383,17555,26167,28383,17555,26167,28383,17555,26167,28383,17555,26167,28383,17555,26167,28383,17555,26167,27850,17555,26167,27850,17555,26167,27850,17555,26167,27850,17555,26167,27850,17555,27817,27850,17555,27817,27850,17555,27817,27850,17555,27817,28000,17555,26667,28000,17555,26667,28383,17555,26167,28000,18612,26667,28000,18612,26667,27850,17555,27817,27850,17555,27817,27850,18612,37667,27850,17555,37667,27850,17555,37667,27850,17555,37667,27850,17555,37667,27850,17555,37667,27850,17555,39317,27850,17555,39317,27850,17555,39317,28000,17555,38817,28000,17555,38817,27850,18612,37667,28000,17555,38817,28000,17555,38817,28383,18612,39317,28383,17555,39317,37133,18612,39317,27300,17555,40917,26917,17523,24367,38217,17555,40917,27300,17523,42117,38217,17555,24367,38600,17523,40917,27300,17555,24367,38217,17523,23217,26750,17437,24367,27017,17523,23567,26917,17523,40917,26750,17437,24367,26750,17437,40917,27017,17523,41767,26917,17437,42117,27300,17523,42117,38217,17523,42117,27300,17437,42567,38217,17523,42117,38600,17437,42117,38500,17523,41767,38767,17437,40917,38600,17523,24367,38767,17437,40917,38767,17437,24367,38500,17523,23567,38600,17437,23217,38217,17523,23217,27300,17523,23217,38217,17437,22767,26917,17437,23217,27300,17523,23217,26917,16498,23217,27300,17437,22767,26750,16498,24367,26917,17437,23217,26750,16498,40917,26750,17437,24367,26917,16415,24367,26750,16498,40917,27300,16383,24367,26917,16415,40917,27300,16383,24367,38217,16383,40917,38217,16383,24367,27300,16415,23217,38217,16383,40917,38600,16415,24367,27300,16383,40917,38217,16415,42117,26917,16415,40917,26917,16498,42117,26750,16498,40917,26917,17437,42117,26917,17437,42117,27300,16498,42567,27300,16498,42567,38217,17437,42567,27300,16415,42117,38217,16498,42567,26917,16498,42117,27300,16415,42117,38217,16415,42117,38600,16498,42117,38217,17437,42567,38600,16498,42117,38600,17437,42117,38767,16498,40917,38767,16498,40917,38767,17437,24367,38600,16415,40917,38767,16498,24367,38600,16498,42117,38600,16415,40917,38767,16498,24367,38500,16415,23567,38767,17437,24367,38600,16498,23217,38600,17437,23217,38217,16498,22767,38217,16498,22767,27300,17437,22767,38217,16415,23217,27300,16498,22767,38600,16498,23217,38217,16415,23217,26917,16498,23217,27300,16415,23217,26917,16415,24367,26917,16498,23217,37133,18849,37667,37517,18881,27817,37400,18881,38467,37133,18964,39317,37667,18964,37667,37400,18881,38467,37517,18881,37667,37667,18964,27817,37667,18964,37667,37667,19906,27817,37667,18964,37667,37517,19906,38817,37517,18964,38817,37133,19906,39317,37400,19989,38467,37133,19906,39317,37667,19906,37667,37400,19989,38467,37517,19989,27817,37667,19906,37667,37667,19906,27817,37400,19989,27017,37400,19989,27017,37133,19906,26167,28383,19989,26667,37133,19906,26167,28383,19989,26667,28000,19906,26667,28117,19989,27017,27850,19906,27817,28000,18964,26667,27850,19906,27817,28383,19906,26167,28000,18964,26667,37133,18964,26167,28383,19906,26167,37133,18881,26667,28383,18964,26167,37133,18849,27817,28383,18881,26667,37667,18964,27817,37400,18881,27017,37667,18964,27817,37517,19906,26667,37517,19906,26667,37133,18964,26167,37400,18881,27017,37133,18964,26167,28383,18964,26167,28117,18881,27017,28117,18881,27017,27850,18964,27817,28000,18881,27817,27850,18964,37667,28383,18849,27817,28000,18881,37667,28000,18881,37667,28000,18964,38817,28117,18881,38467,28383,18964,39317,37133,19989,38817,28383,19906,39317,37667,20258,27817,37400,20175,27017,37667,21197,27817,37517,20258,26667,37667,21197,27817,37667,20258,37667,37667,20258,37667,37517,21197,38817,37517,20258,38817,37133,21197,39317,37400,21279,38467,37133,21197,39317,37667,21197,37667,37400,21279,38467,37517,21279,27817,37667,21197,37667,37667,21197,27817,37400,21279,27017,37400,21279,27017,37133,21197,26167,28383,21279,26667,37133,21197,26167,28383,21197,26167,28117,21279,27017,28117,21279,27017,27850,21197,27817,37517,21197,26667,37133,20258,26167,37400,20175,27017,37133,20258,26167,37133,21279,38817,28383,21197,39317,28383,21430,37667,37133,21465,38817,27850,21548,37667,28117,21465,38467,27850,22487,37667,28000,21548,38817,28000,22487,38817,28383,21548,39317,37133,21548,39317,28383,22487,39317,37517,21548,38817,37133,22487,39317,37667,21548,37667,37517,22487,38817,37667,21548,37667,37667,22487,27817,37517,22573,27817,37667,22487,37667,37667,22487,27817,37400,22573,27017,37517,22487,26667,37133,22573,26667,28383,22573,26667,37133,22487,26167,28383,22573,26667,28000,22487,26667,28117,22573,27017,27850,22487,27817,28000,22487,26667,27850,21548,27817,28383,22487,26167,28000,21548,26667,37133,21548,26167,28383,22487,26167,37133,21465,26667,28383,21548,26167,37517,21548,26667,37133,21465,26667,37667,21548,27817,37400,21465,27017,37517,21465,37667,37667,21548,27817,37667,21548,37667,37400,21465,38467,37400,21465,38467,37133,21548,39317,28383,21465,38817,37133,21548,39317,28000,21548,38817,28383,21465,38817,37667,22487,27817,37517,21548,26667,37517,22487,26667,37133,21548,26167,28383,21465,26667,28000,21548,26667,28117,21465,27017,27850,21548,27817,37667,22487,37667,37400,22573,38467,37517,22487,38817,37133,22573,38817,37133,22573,38817,28383,22487,39317,37667,24182,39317,37667,24182,39317,37667,24182,39317,37517,24168,38817,37517,24168,38817,24150,24483,44217,16367,24369,26167,19650,25659,21267,16367,25896,40917,16367,24369,26167,16367,25896,40917,16367,24369,39317,19650,25659,21267,19650,25659,21267,24150,24483,44217,19650,25659,44217,24567,25659,21267,32767,26365,44217,32767,25225,44217,32767,25225,44217,32767,25225,44217,40950,25659,44217,40950,25659,44217,45600,25659,21267,40950,25659,44217,45600,25659,44217,41367,24483,21267,41367,24483,21267,49150,24369,39317,39600,25774,32767,39600,25774,32767,39600,25774,32767,40950,25659,44217,40950,25659,44217,40950,25659,44217,40950,25659,21267,40950,25659,21267,40950,25659,21267,25917,25774,32767,25917,25774,32767,25917,25774,32767,24567,25659,44217,24567,25659,44217,24567,25659,44217,25983,25781,32817,25983,25781,32817,25983,25781,32817,31017,26215,36817,31017,26215,36817,31017,26215,36817,31017,26215,36817,31017,26215,36817,31017,26215,36817,31017,26215,36817,26000,25781,32667,26000,25781,32667,26000,25781,32667,26000,25781,32667,32767,26365,30267,32767,26365,30267,32217,39519,30267,32217,39519,30267,33300,39519,30267,33300,39519,30267,34467,26218,28667,34467,26218,28667,34467,26218,28667,34467,26218,28667,34467,26218,28667,34467,26218,28667,34467,26218,28667,39517,25781,32817,39517,25781,32817,39517,25781,32817,39517,25781,32817,39517,25781,32667,39517,25781,32667,39517,25781,32667,33300,39519,28667,33300,26318,30267,35483,33881,28667,33300,26318,28667,33300,39519,28667,39033,40928,32767,32767,40928,28667,33300,39519,30267,32767,40928,28667,32217,39519,30267,26483,40928,32767,32217,39519,28667,32767,40928,28667,32767,40928,36817,39033,40928,32767,33300,39519,36817,33300,26318,36817,35483,33881,36817,33300,26318,36817,33300,39519,35217,33300,39519,35217,33300,39519,35217,33300,39519,35217,32767,26365,35217,32217,39713,36817,32217,26318,35217,29583,33881,36817,32217,26318,36817,32217,39713,36817,26483,40928,32767,32217,39713,36817,32767,40928,35217,33300,39519,36817,32767,40928,35217,32217,26318,28667,30033,33881,28667,32217,26318,28667,32217,39519,30267,40950,25659,21267,40950,25659,21267,41367,24483,21267,32767,26365,21267,32767,24483,49117,41367,24483,44217,32767,23781,21267,32767,23781,26167,32767,23781,26167,32767,23781,39317,32767,23781,44217,24150,24483,44217,24150,24483,44217,24150,24483,44217,32767,23781,44217,32767,23781,39317,27850,24182,27817,27850,24182,27817,27850,24182,27817,27850,24182,27817,32767,23781,26167,32767,23781,26167,32767,23781,21267,37133,22842,39317,28383,22842,26167,37667,17555,37667,41367,24483,44217,24567,25659,44217,24567,25659,44217,24150,24483,44217,32767,26365,44217,32767,26365,44217,33300,26318,36817,33300,26318,36817,33300,26318,36817,32767,26365,35217,32767,26365,35217,33300,26318,35217,33300,26318,35217,33300,26318,35217,33300,26318,35217,33300,26318,35217,33300,26318,30267,33300,26318,30267,33300,26318,30267,33300,26318,28667,33300,26318,28667,33300,26318,28667,32767,26365,30267,32767,26365,30267,32767,26365,30267,32767,26365,21267,32767,26365,21267,34467,26218,36817,34467,26218,36817,34467,26218,36817,34467,26218,36817,34467,26218,36817,32767,26365,21267,32767,26365,21267,32217,26318,28667,32217,26318,28667,32217,26318,28667,32767,26365,30267,32767,26365,30267,32217,26318,30267,32217,26318,30267,32217,26318,30267,32217,26318,30267,32217,26318,30267,32217,26318,35217,32217,26318,35217,32217,26318,35217,32217,26318,36817,32217,26318,36817,32217,26318,36817,32767,26365,35217,32767,26365,35217,32767,26365,35217,32767,26365,44217,32767,26365,44217,24567,25659,21267,24567,25659,21267,24567,25659,21267,31050,26218,28667,31050,26218,28667,31050,26218,28667,31050,26218,28667,31050,26218,28667,32217,26318,35217,32217,39713,35217],"packedNormals":[166,117,6,166,117,6,166,117,6,89,248,127,89,248,127,89,248,127,166,117,247,166,117,247,166,117,247,254,127,126,254,127,127,254,127,126,236,191,126,236,191,127,236,191,126,151,107,3,151,107,3,151,107,3,127,127,0,127,127,0,127,127,0,148,180,13,148,180,13,148,180,13,105,180,13,105,180,13,105,180,13,127,0,126,127,0,126,127,0,126,148,180,240,148,180,240,148,180,240,148,71,238,148,71,238,148,71,238,172,8,126,172,8,127,172,8,126,81,8,127,81,8,127,81,8,127,81,8,126,81,8,126,0,127,127,0,127,127,0,127,127,8,94,159,38,102,215,37,127,216,81,8,126,81,8,127,38,102,215,94,94,245,78,126,244,127,126,254,127,126,254,127,126,254,172,8,126,172,8,126,172,8,127,214,103,216,216,127,216,175,126,244,245,94,159,244,126,175,216,127,216,254,127,127,254,127,127,254,127,127,245,94,94,215,102,38,216,127,37,172,8,127,172,8,126,215,102,38,159,94,8,175,127,9,127,127,0,127,127,0,127,127,0,78,127,9,94,94,8,38,102,38,81,8,126,37,127,37,38,102,38,8,94,94,67,38,57,38,37,109,8,94,94,94,94,8,109,37,38,67,38,57,149,40,36,109,37,38,94,94,8,156,7,97,97,7,97,109,37,38,127,0,126,127,0,126,127,0,126,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,97,7,97,97,7,156,38,37,144,97,7,97,38,37,109,67,38,57,97,7,97,67,38,57,109,37,38,38,37,109,38,37,144,8,94,159,8,94,159,38,37,144,64,36,189,64,36,189,109,37,215,94,94,245,109,37,215,144,37,215,159,94,245,97,7,156,156,7,156,144,37,215,127,126,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,156,7,156,156,7,97,215,37,109,217,41,149,189,36,189,156,7,156,189,36,189,144,37,215,156,7,156,189,36,189,214,103,216,159,94,245,245,94,159,214,103,216,189,36,189,215,37,109,245,94,94,245,94,159,245,94,94,215,37,109,189,36,64,189,36,64,149,40,36,159,94,8,156,7,97,149,40,36,189,36,64,156,7,97,189,36,64,215,37,109,127,0,127,127,0,127,127,0,127,156,246,156,97,246,156,109,216,215,156,246,156,149,212,217,189,217,189,156,246,156,189,217,189,215,216,144,156,246,97,156,246,156,215,216,144,217,212,104,189,217,64,156,246,97,189,217,64,144,216,38,156,246,97,97,246,97,156,246,97,144,216,38,104,212,36,64,217,64,97,246,97,64,217,64,38,216,109,97,246,97,97,246,156,97,246,97,38,216,109,36,212,149,64,217,189,97,246,156,64,217,189,109,216,215,97,246,156,39,151,215,94,159,245,109,216,215,8,159,159,39,151,215,64,217,189,36,212,149,38,216,109,8,159,94,0,127,127,0,127,127,0,127,127,36,40,104,38,37,144,8,94,159,97,7,97,97,7,156,38,37,144,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,156,7,97,97,7,97,109,37,38,156,7,97,149,41,36,189,36,64,156,7,97,189,36,64,215,37,109,156,7,156,156,7,97,215,37,109,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,127,254,127,126,254,127,126,254,156,246,156,97,246,156,109,216,215,156,246,156,149,212,217,189,217,189,156,246,156,189,217,189,215,216,144,156,246,97,156,246,156,215,216,144,217,212,104,189,217,64,156,246,97,189,217,64,144,216,38,156,246,97,97,246,97,156,246,97,144,216,38,104,212,36,64,217,64,97,246,97,64,217,64,38,216,109,97,246,97,97,246,156,97,246,97,38,216,109,0,127,127,0,127,127,0,127,127,36,212,149,64,217,189,97,246,156,64,217,189,109,216,215,97,246,156,39,151,215,94,159,245,109,216,215,8,159,159,39,151,215,64,217,189,36,212,149,38,216,109,8,159,94,0,127,127,0,127,127,0,127,127,39,102,38,8,94,94,8,159,94,94,94,8,39,102,38,37,150,39,127,127,0,127,127,0,127,127,0,149,40,36,109,37,38,94,94,8,156,7,97,97,7,97,109,37,38,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,127,126,254,127,126,254,127,127,254,97,7,156,156,7,156,144,37,215,97,7,156,104,41,217,64,36,189,97,7,156,64,36,189,38,37,144,97,7,97,97,7,156,38,37,144,97,7,97,36,41,104,64,36,64,97,7,97,64,36,64,109,37,38,94,94,8,109,37,38,64,36,64,64,36,64,36,41,104,8,94,94,36,41,104,38,37,144,8,94,159,8,94,159,38,37,144,64,36,189,8,94,159,37,103,214,39,151,215,37,103,214,94,94,245,94,159,245,127,126,254,127,126,254,127,126,254,104,41,217,144,37,215,159,94,245,64,36,189,104,41,217,94,94,245,186,38,196,215,102,215,159,94,245,245,94,159,215,102,215,186,38,196,221,43,145,215,37,109,245,94,94,156,7,156,156,7,97,215,37,109,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,156,246,156,97,246,156,109,216,215,156,246,156,149,212,217,189,217,189,156,246,156,189,217,189,215,216,144,156,246,97,156,246,156,215,216,144,217,212,104,189,217,64,156,246,97,189,217,64,144,216,38,156,246,97,97,246,97,156,246,97,144,216,38,104,212,36,64,217,64,97,246,97,64,217,64,38,216,109,97,246,97,97,246,156,97,246,97,38,216,109,36,212,149,64,217,189,97,246,156,64,217,189,109,216,215,97,246,156,64,217,189,38,151,215,94,159,245,8,159,159,38,151,215,64,217,189,36,212,149,38,216,109,8,159,94,0,127,127,0,127,127,0,127,127,8,94,159,38,102,215,38,151,215,38,151,215,38,102,215,94,94,245,127,126,254,127,126,254,127,126,254,104,40,217,144,37,215,159,94,245,97,7,156,156,7,156,144,37,215,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,156,246,97,156,246,156,215,216,144,217,212,104,189,217,64,156,246,97,189,217,64,144,216,38,156,246,97,97,246,97,156,246,97,144,216,38,104,212,36,64,217,64,97,246,97,64,217,64,38,216,109,97,246,97,97,246,156,97,246,97,38,216,109,36,212,149,64,217,189,97,246,156,64,217,189,109,216,215,97,246,156,156,246,156,97,246,156,109,216,215,156,246,156,149,212,217,189,217,189,156,246,156,189,217,189,215,216,144,245,159,159,215,216,144,189,217,189,217,212,104,215,216,144,245,159,159,245,159,94,215,151,38,189,217,64,215,151,38,159,159,8,144,216,38,104,212,36,144,216,38,159,159,8,104,212,36,94,159,8,38,151,38,64,217,64,38,151,38,8,159,94,36,212,149,38,216,109,8,159,94,8,159,159,38,151,215,64,217,189,64,217,189,38,151,215,94,159,245,149,212,217,109,216,215,94,159,245,189,217,189,149,212,217,159,159,245,216,126,216,215,149,215,159,159,245,244,126,175,245,159,159,215,149,215,254,127,127,254,127,127,254,127,127,126,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,1,108,119,127,254,127,245,159,94,244,127,78,216,127,37,215,151,38,216,127,37,175,127,9,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,78,127,9,37,127,37,38,151,38,38,151,38,37,127,37,9,127,78,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,8,159,159,9,126,175,37,126,216,37,126,216,78,126,244,94,159,245,127,126,254,127,126,254,127,126,254,97,246,156,97,246,97,38,216,109,36,212,149,64,217,189,97,246,156,64,217,189,109,216,215,97,246,156,156,246,156,97,246,156,109,216,215,149,212,217,189,217,189,156,246,156,189,217,189,215,216,144,156,246,156,156,246,97,156,246,156,215,216,144,217,212,104,189,217,64,156,246,97,189,217,64,144,216,38,156,246,97,97,246,97,156,246,97,144,216,38,97,246,97,104,212,36,64,217,64,97,246,97,64,217,64,38,216,109,8,159,94,38,216,109,64,217,64,36,212,149,38,216,109,8,159,94,8,159,159,38,151,215,64,217,189,38,151,215,94,159,245,109,216,215,149,212,217,109,216,215,94,159,245,149,212,217,159,159,245,215,151,215,189,217,189,215,151,215,245,159,159,217,212,104,215,216,144,245,159,159,245,159,94,215,151,38,189,217,64,215,151,38,159,159,8,144,216,38,104,212,36,144,216,38,159,159,8,39,151,38,64,217,64,104,212,36,39,103,37,39,151,38,94,159,8,8,94,94,8,159,94,39,151,38,0,127,127,0,127,127,0,127,127,36,40,104,38,37,144,8,94,159,97,7,97,97,7,156,38,37,144,127,0,127,127,0,127,127,0,127,156,7,97,97,7,97,109,37,38,156,7,97,149,41,36,189,36,64,156,7,97,189,36,64,215,37,109,156,7,156,156,7,97,215,37,109,156,7,156,217,41,149,189,36,189,156,7,156,189,36,189,144,37,215,97,7,156,156,7,156,144,37,215,97,7,156,104,41,217,64,36,189,97,7,156,64,36,189,38,37,144,38,37,144,64,36,189,38,102,215,8,94,159,38,102,215,38,151,215,38,151,215,38,102,215,94,94,245,127,126,254,127,126,254,127,126,254,104,41,217,144,37,215,159,94,245,38,102,215,64,36,189,104,41,217,144,37,215,189,36,189,215,102,215,159,159,245,159,94,245,215,102,215,215,151,215,215,102,215,245,94,159,254,127,127,254,127,127,254,127,127,217,41,149,215,37,109,245,94,94,215,102,215,189,36,189,217,41,149,245,94,94,215,37,109,189,36,64,245,159,94,245,94,94,216,103,39,215,151,38,216,103,39,159,94,8,127,127,0,127,127,0,127,127,0,149,41,36,109,37,38,94,94,8,216,103,39,189,36,64,149,41,36,39,103,37,94,94,8,109,37,38,36,40,104,8,94,94,39,103,37,36,40,104,52,48,59,97,7,97,52,48,59,109,37,38,97,7,97,156,7,156,156,7,97,215,37,109,217,41,149,189,36,189,156,7,156,189,36,189,144,37,215,156,7,156,189,36,189,215,102,215,159,94,245,245,94,159,215,102,215,189,36,189,217,41,149,215,37,109,245,94,94,254,127,127,254,127,127,254,127,127,245,94,159,245,159,159,215,151,215,215,102,215,215,151,215,159,159,245,189,217,189,149,212,217,159,159,245,245,159,159,215,216,144,189,217,189,217,212,104,215,216,144,245,159,159,245,159,94,215,151,38,189,217,64,189,217,64,215,151,38,159,159,8,104,212,36,144,216,38,159,159,8,104,212,36,94,159,8,38,151,38,64,217,64,38,151,38,8,159,94,39,102,38,8,94,94,8,159,94,94,159,8,94,94,8,39,102,38,127,127,0,127,127,0,127,127,0,149,40,36,109,37,38,94,94,8,156,7,97,97,7,97,109,37,38,156,7,97,149,40,36,189,36,64,156,7,97,189,36,64,215,37,109,245,94,94,215,37,109,189,36,64,245,94,94,216,103,39,215,151,38,215,151,38,216,103,39,159,94,8,189,36,64,149,40,36,159,94,8,97,7,97,64,36,64,109,37,38,94,94,8,109,37,38,64,36,64,64,36,64,38,37,109,8,94,94,38,37,109,38,37,144,8,94,159,97,7,97,97,7,156,38,37,144,97,7,97,38,37,109,64,36,64,97,7,156,64,36,189,38,37,144,38,37,144,64,36,189,38,102,215,64,36,189,104,40,217,94,94,245,97,7,156,104,40,217,64,36,189,149,212,217,109,216,215,94,159,245,221,43,145,186,38,196,156,7,156,186,38,196,144,37,215,156,7,156,156,7,97,189,36,64,215,37,109,245,94,94,215,37,109,189,36,64,245,159,94,245,94,94,216,103,39,254,127,127,254,127,127,254,127,127,245,94,159,245,159,159,215,151,215,215,102,215,215,151,215,159,159,245,189,217,189,149,212,217,159,159,245,245,159,159,215,216,144,189,217,189,217,212,104,215,216,144,245,159,159,245,159,94,214,150,37,189,217,64,189,217,64,214,150,37,159,159,8,104,212,36,144,216,38,159,159,8,94,159,8,37,150,39,64,217,64,64,217,64,37,150,39,8,159,94,214,150,37,216,103,39,159,94,8,189,36,64,149,40,36,159,94,8,156,7,97,149,40,36,189,36,64,149,212,217,109,216,215,94,159,245,97,7,156,156,7,156,144,37,215,97,7,156,104,41,217,64,36,189,97,7,156,64,36,189,38,37,144,8,94,159,38,37,144,64,36,189,8,159,159,8,94,159,37,103,214,39,151,215,37,103,214,94,94,245,127,126,254,127,126,254,127,126,254,214,103,216,215,151,215,159,159,245,245,94,159,245,159,159,215,151,215,254,127,127,254,127,127,254,127,127,217,212,104,215,216,144,245,159,159,245,159,94,215,151,38,189,217,64,215,151,38,159,159,8,144,216,38,104,212,36,144,216,38,159,159,8,104,212,36,94,159,8,38,151,38,64,217,64,38,151,38,8,159,94,38,151,38,38,102,38,8,94,94,94,159,8,94,94,8,38,102,38,127,127,0,127,127,0,127,127,0,149,41,36,109,37,38,94,94,8,215,102,39,189,36,64,149,41,36,245,94,94,215,37,109,189,36,64,215,37,144,215,37,109,245,94,94,245,94,159,214,103,216,189,36,189,215,37,144,189,36,189,156,7,156,189,36,189,144,37,215,156,7,156,189,36,189,214,103,216,159,94,245,104,41,217,144,37,215,159,94,245,37,103,214,64,36,189,104,41,217,245,159,94,245,94,94,215,102,39,215,151,38,215,102,39,159,94,8,109,37,38,64,36,64,38,102,38,64,36,64,36,40,104,8,94,94,97,7,97,36,40,104,64,36,64,97,7,97,64,36,64,109,37,38,245,159,159,215,216,144,189,217,189,215,151,215,189,217,189,149,212,217,149,212,217,109,216,215,94,159,245,97,7,156,109,37,215,64,36,189,97,7,156,64,36,189,38,37,144,172,8,126,172,8,127,105,71,15,105,71,15,105,71,15,148,71,15,148,71,15,148,71,15,135,0,126,135,0,126,135,0,126,102,106,249,102,106,249,102,106,249,84,117,246,84,117,246,84,117,246,167,247,127,167,247,127,167,247,127,84,117,7,84,117,7,84,117,7,0,127,126,0,127,126,0,127,126,15,187,126,15,187,126,15,187,126,102,106,4,102,106,4,102,106,4,28,46,126,28,46,126,28,46,126,127,254,127,127,254,127,127,254,127,127,126,254,127,126,254,127,126,254,127,254,127,127,254,127,127,254,127,227,49,126,227,49,127,227,49,126,151,107,250,151,107,250,151,107,250,118,0,126,118,0,126,118,0,126,174,244,127,174,244,127,174,244,126,79,244,127,79,244,126,79,244,126,79,244,127,79,244,127,127,127,0,127,127,0,127,127,0,174,244,127,174,244,127,174,244,127,0,127,127,0,127,127,0,127,127,127,127,0,126,127,0,126,127,0,153,129,2,153,129,2,153,129,2,0,116,127,0,116,127,0,116,127,253,116,127,253,116,127,253,116,127,100,129,2,100,129,2,100,129,2,100,131,2,100,131,2,100,131,2,127,254,127,127,254,127,127,254,127,153,131,2,153,131,2,153,131,2,153,131,251,153,131,251,153,131,251,153,129,251,153,129,251,153,129,251,169,127,246,169,127,246,169,127,246,157,127,250,157,127,250,157,127,250,157,127,3,157,127,3,157,127,3,169,127,7,169,127,7,169,127,7,159,126,4,159,126,4,159,126,4,159,126,249,159,126,249,159,126,249,127,126,254,127,126,254,127,126,254,0,127,127,0,127,127,0,127,127,127,126,254,127,126,254,126,126,254,254,127,127,254,127,127,254,127,127,127,126,254,126,126,254,126,126,254,100,129,251,100,129,251,100,129,251,253,114,127,253,114,127,253,114,127,0,116,127,0,116,127,0,116,127,79,127,244,79,127,244,79,127,244,94,125,249,94,125,249,94,125,249,93,127,249,93,127,249,93,127,249,96,127,3,96,127,3,96,127,3,84,127,7,84,127,7,84,127,7,94,126,4,94,126,4,94,126,4,127,127,0,127,127,0,127,127,0,254,127,127,254,127,127,254,127,127,100,131,251,100,131,251,100,131,251,105,180,240,105,180,240,105,180,240,105,71,238,105,71,238,105,71,238,89,248,127,254,127,126,236,191,126,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,0,126,127,0,126,127,0,126,172,8,127,172,8,126,172,8,126,172,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,127,0,127,127,9,126,175,37,127,216,127,126,254,127,126,254,159,94,245,214,103,216,254,127,127,244,127,78,216,127,37,127,127,0,127,127,0,37,127,37,9,127,78,38,102,38,38,102,38,159,94,8,149,40,36,127,0,126,127,127,0,0,127,127,38,37,109,8,94,94,38,102,215,38,102,215,94,94,245,109,37,215,127,126,254,254,127,127,217,41,149,144,37,215,217,41,149,217,41,149,215,102,38,215,102,38,127,0,127,149,212,217,217,212,104,104,212,36,36,212,149,64,217,189,36,212,149,8,159,159,0,127,127,8,94,94,36,40,104,127,0,127,127,127,0,149,41,36,215,37,144,254,127,127,127,0,127,127,127,254,149,212,217,217,212,104,104,212,36,36,212,149,0,127,127,64,217,189,36,212,149,8,159,159,0,127,127,37,150,39,94,159,8,127,127,0,159,94,8,149,40,36,127,254,127,127,127,0,0,127,127,127,127,254,104,41,217,36,41,104,39,102,38,39,102,38,8,94,94,37,103,214,8,159,159,39,151,215,127,126,254,94,94,245,37,103,214,144,37,215,221,43,145,245,94,159,221,43,145,254,127,127,127,254,127,149,212,217,217,212,104,104,212,36,36,212,149,109,216,215,36,212,149,8,159,159,0,127,127,8,159,159,94,159,245,127,126,254,94,94,245,104,40,217,127,0,127,127,127,0,0,127,127,127,127,254,254,127,127,127,0,127,217,212,104,104,212,36,36,212,149,149,212,217,215,149,215,245,159,94,217,212,104,189,217,64,94,159,8,64,217,64,38,216,109,8,159,159,36,212,149,109,216,215,159,159,245,215,149,215,175,126,244,216,126,216,254,127,127,126,254,127,215,151,38,159,159,8,127,127,0,94,159,8,8,159,94,0,127,127,38,151,215,38,151,215,127,126,254,36,212,149,149,212,217,217,212,104,104,212,36,39,151,38,8,159,159,36,212,149,64,217,189,159,159,245,189,217,189,215,216,144,245,159,94,217,212,104,189,217,64,94,159,8,94,159,8,94,94,8,39,103,37,0,127,127,8,94,94,36,40,104,127,0,127,149,41,36,217,41,149,104,41,217,8,94,159,8,159,159,94,159,245,127,126,254,94,94,245,94,94,245,159,94,245,215,151,215,245,159,159,254,127,127,245,94,159,245,94,159,216,103,39,215,151,38,159,159,8,127,127,0,159,94,8,159,94,8,52,48,59,52,48,59,217,41,149,144,37,215,217,41,149,245,94,159,254,127,127,215,102,215,159,94,245,215,151,215,215,151,215,245,159,94,217,212,104,144,216,38,94,159,8,64,217,64,38,216,109,38,151,38,38,151,38,127,127,0,159,94,8,149,40,36,216,103,39,245,159,94,159,159,8,216,103,39,39,102,38,39,102,38,8,94,94,38,37,109,8,94,159,38,102,215,159,159,245,216,103,39,214,150,37,254,127,127,215,102,215,159,94,245,215,151,215,215,151,215,245,159,94,217,212,104,144,216,38,94,159,8,104,212,36,38,216,109,159,159,8,216,103,39,159,159,245,104,41,217,37,103,214,39,151,215,94,159,245,127,126,254,159,94,245,214,103,216,254,127,127,245,159,94,217,212,104,189,217,64,94,159,8,64,217,64,38,216,109,8,159,94,38,151,38,127,127,0,159,94,8,159,94,8,215,102,39,245,94,159,215,37,144,144,37,215,94,94,245,94,94,245,215,151,38,159,159,8,94,94,8,38,102,38,215,151,215,159,159,245,159,159,245,135,0,126,167,247,127,0,127,127,15,187,127,28,46,127,127,254,127,127,126,254,127,126,254,127,126,254,127,126,254,127,126,254,127,254,127,227,49,126,118,0,126,174,244,127,174,244,126,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,126,174,244,127,79,244,126,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,126,79,244,126,79,244,126,127,127,0,127,127,0,126,127,0,0,127,127,127,127,0,153,129,2,0,116,127,253,116,127,100,129,2,127,254,127,153,129,251,127,126,254,0,127,127,127,126,254,127,126,254,127,126,254,254,127,127,127,126,254,100,129,251,253,114,127,0,116,127,127,127,0,254,127,127,89,248,127,89,248,127,254,127,126,254,127,126,236,191,126,236,191,126,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,0,126,127,0,126,127,0,126,127,0,126,172,8,126,172,8,126,172,8,126,172,8,126,172,8,126,172,8,127,172,8,127,172,8,127,172,8,126,172,8,126,172,8,126,172,8,126,81,8,127,81,8,127,81,8,127,81,8,127,81,8,127,81,8,127,81,8,127,81,8,127,81,8,127,81,8,127,81,8,127,81,8,127,81,8,127,81,8,127,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,0,127,127,0,127,127,8,94,159,37,127,216,81,8,126,81,8,126,81,8,126,81,8,127,81,8,127,38,102,215,78,126,244,127,126,254,127,126,254,127,126,254,172,8,126,172,8,126,172,8,126,172,8,126,172,8,126,172,8,126,172,8,126,172,8,126,172,8,126,172,8,126,172,8,126,172,8,126,172,8,127,172,8,127,172,8,127,172,8,127,172,8,127,172,8,127,172,8,127,214,103,216,175,126,244,245,94,159,216,127,216,254,127,127,254,127,127,245,94,94,216,127,37,172,8,127,172,8,127,172,8,127,172,8,126,172,8,126,215,102,38,175,127,9,127,127,0,127,127,0,127,127,0,78,127,9,38,102,38,81,8,126,81,8,126,37,127,37,8,94,94,67,38,57,8,94,94,94,94,8,67,38,57,149,40,36,94,94,8,156,7,97,109,37,38,127,0,126,127,0,126,127,127,0,127,127,0,0,127,127,0,127,127,97,7,97,38,37,144,38,37,109,8,94,159,8,94,159,64,36,189,64,36,189,94,94,245,109,37,215,159,94,245,97,7,156,144,37,215,127,126,254,127,127,254,254,127,127,254,127,127,156,7,156,215,37,109,189,36,189,159,94,245,245,94,159,189,36,189,215,37,109,245,94,159,245,94,94,189,36,64,189,36,64,159,94,8,127,0,127,127,0,127,156,246,156,109,216,215,156,246,97,215,216,144,97,246,97,144,216,38,97,246,156,38,216,109,39,151,215,109,216,215,8,159,159,64,217,189,36,212,149,8,159,94,0,127,127,0,127,127,36,40,104,8,94,159,97,7,97,38,37,144,127,0,127,127,0,127,127,127,0,127,127,0,156,7,97,109,37,38,156,7,156,215,37,109,254,127,127,254,127,127,127,0,127,127,0,127,127,127,254,127,126,254,156,246,156,109,216,215,156,246,97,215,216,144,97,246,97,144,216,38,97,246,156,38,216,109,0,127,127,0,127,127,39,151,215,109,216,215,8,159,159,64,217,189,36,212,149,8,159,94,0,127,127,0,127,127,39,102,38,8,159,94,94,94,8,37,150,39,127,127,0,127,127,0,149,40,36,94,94,8,156,7,97,109,37,38,127,254,127,127,254,127,127,127,0,127,127,0,0,127,127,0,127,127,127,126,254,127,127,254,97,7,156,144,37,215,97,7,97,38,37,144,94,94,8,64,36,64,64,36,64,8,94,94,36,41,104,8,94,159,8,94,159,64,36,189,8,94,159,39,151,215,37,103,214,94,159,245,127,126,254,127,126,254,104,41,217,159,94,245,64,36,189,94,94,245,186,38,196,159,94,245,245,94,159,186,38,196,221,43,145,245,94,94,156,7,156,215,37,109,254,127,127,254,127,127,127,254,127,127,254,127,156,246,156,109,216,215,156,246,97,215,216,144,97,246,97,144,216,38,97,246,156,38,216,109,64,217,189,94,159,245,8,159,159,64,217,189,36,212,149,8,159,94,0,127,127,0,127,127,8,94,159,38,151,215,38,151,215,94,94,245,127,126,254,127,126,254,104,40,217,159,94,245,97,7,156,144,37,215,127,0,127,127,0,127,127,127,0,127,127,0,0,127,127,0,127,127,127,127,254,127,127,254,254,127,127,254,127,127,127,0,127,127,0,127,156,246,97,215,216,144,97,246,97,144,216,38,97,246,156,38,216,109,156,246,156,109,216,215,245,159,159,189,217,189,217,212,104,245,159,159,245,159,94,189,217,64,215,151,38,144,216,38,104,212,36,159,159,8,104,212,36,38,151,38,64,217,64,8,159,94,36,212,149,8,159,94,8,159,159,64,217,189,64,217,189,94,159,245,149,212,217,94,159,245,189,217,189,159,159,245,216,126,216,159,159,245,244,126,175,215,149,215,254,127,127,254,127,127,126,254,127,126,254,127,126,254,127,126,254,127,126,254,127,126,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,1,108,119,1,108,119,127,254,127,127,254,127,245,159,94,216,127,37,215,151,38,175,127,9,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,78,127,9,38,151,38,38,151,38,9,127,78,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,8,159,159,37,126,216,37,126,216,94,159,245,127,126,254,127,126,254,97,246,156,38,216,109,156,246,156,109,216,215,156,246,97,215,216,144,97,246,97,144,216,38,8,159,94,64,217,64,36,212,149,8,159,94,8,159,159,64,217,189,38,151,215,109,216,215,149,212,217,94,159,245,149,212,217,215,151,215,189,217,189,245,159,159,217,212,104,245,159,159,245,159,94,189,217,64,215,151,38,144,216,38,104,212,36,159,159,8,39,151,38,104,212,36,39,103,37,94,159,8,8,94,94,39,151,38,0,127,127,0,127,127,36,40,104,8,94,159,97,7,97,38,37,144,127,0,127,127,0,127,156,7,97,109,37,38,156,7,156,215,37,109,97,7,156,144,37,215,38,37,144,38,102,215,8,94,159,38,151,215,38,151,215,94,94,245,127,126,254,127,126,254,104,41,217,159,94,245,38,102,215,104,41,217,144,37,215,215,102,215,159,159,245,215,102,215,215,151,215,245,94,159,254,127,127,254,127,127,217,41,149,245,94,94,215,102,215,217,41,149,245,94,94,189,36,64,245,159,94,216,103,39,215,151,38,159,94,8,127,127,0,127,127,0,149,41,36,94,94,8,216,103,39,149,41,36,39,103,37,109,37,38,36,40,104,39,103,37,156,7,156,215,37,109,189,36,189,159,94,245,245,94,159,189,36,189,217,41,149,245,94,94,254,127,127,254,127,127,245,94,159,215,151,215,215,102,215,159,159,245,189,217,189,159,159,245,245,159,159,189,217,189,217,212,104,245,159,159,245,159,94,189,217,64,189,217,64,159,159,8,104,212,36,159,159,8,104,212,36,38,151,38,64,217,64,8,159,94,39,102,38,8,159,94,94,159,8,39,102,38,127,127,0,127,127,0,149,40,36,94,94,8,156,7,97,109,37,38,245,94,94,189,36,64,245,94,94,215,151,38,215,151,38,159,94,8,189,36,64,159,94,8,94,94,8,64,36,64,64,36,64,8,94,94,38,37,109,8,94,159,97,7,97,38,37,144,38,37,144,38,102,215,64,36,189,94,94,245,149,212,217,94,159,245,245,94,94,189,36,64,245,159,94,216,103,39,254,127,127,254,127,127,245,94,159,215,151,215,215,102,215,159,159,245,189,217,189,159,159,245,245,159,159,189,217,189,217,212,104,245,159,159,245,159,94,189,217,64,189,217,64,159,159,8,104,212,36,159,159,8,94,159,8,64,217,64,64,217,64,8,159,94,214,150,37,159,94,8,189,36,64,159,94,8,149,212,217,94,159,245,97,7,156,144,37,215,8,94,159,64,36,189,8,159,159,37,103,214,39,151,215,94,94,245,127,126,254,127,126,254,214,103,216,159,159,245,245,94,159,215,151,215,254,127,127,254,127,127,217,212,104,245,159,159,245,159,94,189,217,64,215,151,38,144,216,38,104,212,36,159,159,8,104,212,36,38,151,38,64,217,64,8,159,94,38,151,38,8,94,94,94,159,8,38,102,38,127,127,0,127,127,0,149,41,36,94,94,8,215,102,39,149,41,36,245,94,94,189,36,64,215,37,144,245,94,94,245,94,159,189,36,189,189,36,189,159,94,245,104,41,217,159,94,245,37,103,214,104,41,217,245,159,94,215,102,39,215,151,38,159,94,8,109,37,38,38,102,38,64,36,64,8,94,94,245,159,159,189,217,189,215,151,215,149,212,217,149,212,217,94,159,245,172,8,126,172,8,126,172,8,126,172,8,127,172,8,127,135,0,126,135,0,126,167,247,127,167,247,127,0,127,126,0,127,126,15,187,126,15,187,126,28,46,126,28,46,126,127,254,127,127,254,127,127,126,254,127,126,254,127,126,254,127,126,254,127,126,254,127,126,254,127,254,127,127,254,127,227,49,126,227,49,126,118,0,126,118,0,126,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,126,174,244,126,174,244,126,79,244,127,79,244,127,79,244,127,79,244,126,79,244,126,79,244,126,79,244,126,79,244,126,79,244,126,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,0,127,127,0,127,127,127,127,0,126,127,0,153,129,2,153,129,2,0,116,127,0,116,127,253,116,127,253,116,127,100,129,2,100,129,2,127,254,127,127,254,127,153,129,251,153,129,251,127,126,254,127,126,254,0,127,127,0,127,127,127,126,254,127,126,254,127,126,254,127,126,254,254,127,127,254,127,127,127,126,254,126,126,254,100,129,251,100,129,251,253,114,127,253,114,127,0,116,127,0,116,127,127,127,0,127,127,0,254,127,127,254,127,127,127,127,0,127,127,0,127,127,0,127,127,0,127,0,126,127,0,126,172,8,127,172,8,126,172,8,126,172,8,126,172,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,126,81,8,127,127,126,254,127,127,0,126,254,127,127,126,254,127,126,254,127,126,254,127,126,254,174,244,127,174,244,127,174,244,126,174,244,126,174,244,126,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,174,244,126,174,244,126,174,244,127,174,244,127,174,244,127,174,244,127,174,244,127,79,244,126,79,244,126,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,127,79,244,126,79,244,126,79,244,126,79,244,126,79,244,126,79,244,126,79,244,126,79,244,126,79,244,126,79,244,126,127,126,254,127,126,254],"m_uvs":[[0.554,0.0046],[0.5741,0.0046],[0.5572,0.0046],[0.5558,0.0046],[0.5529,0.0046],[0.554,0.0046],[0.5529,0.0046],[0.5558,0.0046],[0.573,0.0046],[0.5741,0.0046],[0.554,0.0046],[0.5529,0.0046],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5741,0.0046],[0.573,0.0043],[0.5572,0.0046],[0.573,0.0041],[0.5572,0.0041],[0.563,0.0043],[0.5274,0.5536],[0.5231,0.5529],[0.5231,0.5676],[0.5188,0.5536],[0.5231,0.5676],[0.5231,0.5529],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5267,0.5554],[0.5231,0.5665],[0.5231,0.5558],[0.5267,0.5554],[0.5231,0.5558],[0.5231,0.545],[0.5763,0.0043],[0.573,0.0043],[0.5712,0.0043],[0.5766,0.0041],[0.573,0.0041],[0.5773,0.0041],[0.0,0.0],[0.0,0.0],[0.0537,0.4828],[0.0538,0.4828],[0.0538,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4826],[0.0,0.0],[0.0,0.0],[0.0537,0.4837],[0.0537,0.4835],[0.0537,0.4826],[0.0537,0.4835],[0.0537,0.4812],[0.0537,0.4826],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0537,0.4801],[0.0537,0.4792],[0.0537,0.4794],[0.0537,0.4801],[0.0537,0.4792],[0.0537,0.4792],[0.0538,0.4792],[0.0537,0.4792],[0.0537,0.4801],[0.0538,0.4801],[0.0538,0.4801],[0.0538,0.4792],[0.0,0.0],[0.0,0.0],[0.0538,0.4801],[0.0538,0.4803],[0.0538,0.4794],[0.0538,0.4803],[0.0538,0.4812],[0.0538,0.4794],[0.0538,0.4826],[0.0538,0.4835],[0.0538,0.4837],[0.0,0.0],[0.0538,0.4826],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4835],[0.0538,0.4835],[0.0538,0.4837],[0.0538,0.4803],[0.0538,0.4835],[0.0538,0.4835],[0.0538,0.4803],[0.0538,0.4835],[0.0538,0.4835],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.6786,0.004],[0.6786,0.0041],[0.6804,0.0041],[0.6769,0.004],[0.6786,0.004],[0.6804,0.004],[0.0538,0.4835],[0.0537,0.4835],[0.0537,0.4837],[0.0538,0.4835],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4835],[0.0538,0.4837],[0.0538,0.4835],[0.0538,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4835],[0.0537,0.4835],[0.0537,0.4835],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4835],[0.0537,0.4803],[0.0537,0.4803],[0.6769,0.0041],[0.6769,0.004],[0.6783,0.004],[0.6769,0.0041],[0.6783,0.0041],[0.6804,0.0041],[0.0537,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4801],[0.0537,0.4803],[0.0537,0.4801],[0.0537,0.4801],[0.0537,0.4803],[0.0538,0.4803],[0.0538,0.4801],[0.0537,0.4801],[0.0538,0.4801],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0537,0.4805],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4805],[0.0537,0.4805],[0.0537,0.4803],[0.0537,0.4805],[0.0537,0.4803],[0.0537,0.4803],[0.0538,0.4805],[0.0537,0.4805],[0.0537,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4805],[0.0538,0.4803],[0.0538,0.4805],[0.0538,0.4805],[0.0538,0.4837],[0.0538,0.4805],[0.0538,0.4805],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4839],[0.0538,0.4837],[0.0537,0.4837],[0.0538,0.4837],[0.0538,0.4839],[0.0537,0.4839],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4839],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4839],[0.0537,0.4839],[0.0537,0.4837],[0.0537,0.4839],[0.0538,0.4839],[0.0538,0.4839],[0.0537,0.4846],[0.0537,0.4839],[0.0538,0.4839],[0.0538,0.4846],[0.0537,0.4846],[0.0537,0.4846],[0.0538,0.4846],[0.0537,0.4846],[0.0537,0.4846],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.6959,0.004],[0.6959,0.0041],[0.6976,0.0041],[0.0538,0.4812],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.4812],[0.0537,0.4812],[0.0538,0.4812],[0.0538,0.4812],[0.6959,0.0041],[0.6937,0.0041],[0.6955,0.0041],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.6955,0.004],[0.6955,0.0041],[0.6937,0.0041],[0.0537,0.4814],[0.0537,0.4846],[0.0535,0.4846],[0.0537,0.4814],[0.0535,0.4814],[0.0535,0.4812],[0.0537,0.4814],[0.0535,0.4812],[0.0537,0.4812],[0.0538,0.4814],[0.0537,0.4814],[0.0537,0.4812],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.4814],[0.0538,0.4812],[0.0538,0.4814],[0.0538,0.4814],[0.0538,0.4846],[0.0538,0.4814],[0.0538,0.4814],[0.0538,0.4846],[0.0538,0.4848],[0.0538,0.4846],[0.0538,0.4848],[0.0538,0.4848],[0.0538,0.4846],[0.0537,0.4846],[0.0538,0.4846],[0.0538,0.4848],[0.6937,0.004],[0.6959,0.004],[0.6976,0.004],[0.0537,0.4848],[0.0535,0.4848],[0.0537,0.4846],[0.0535,0.4848],[0.0535,0.4846],[0.0537,0.4846],[0.0535,0.4848],[0.0535,0.4848],[0.0535,0.4846],[0.0537,0.485],[0.0535,0.4848],[0.0535,0.4848],[0.0537,0.4848],[0.0538,0.4848],[0.0538,0.485],[0.0538,0.485],[0.0538,0.4857],[0.0535,0.4857],[0.0538,0.4855],[0.0538,0.4857],[0.0538,0.485],[0.0538,0.4855],[0.0538,0.4855],[0.0538,0.4848],[0.0538,0.4855],[0.0538,0.4848],[0.0538,0.4814],[0.0538,0.4821],[0.0538,0.4855],[0.0538,0.4855],[0.0538,0.4823],[0.0538,0.4855],[0.0538,0.4855],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.7146,0.004],[0.7131,0.004],[0.7131,0.0041],[0.7124,0.004],[0.7109,0.004],[0.7131,0.004],[0.7109,0.004],[0.7124,0.004],[0.7124,0.0041],[0.0535,0.4855],[0.0535,0.4823],[0.0535,0.4821],[0.0535,0.4855],[0.0535,0.4855],[0.0535,0.4857],[0.0535,0.4855],[0.0535,0.4857],[0.0535,0.4857],[0.0538,0.4855],[0.0535,0.4855],[0.0535,0.4857],[0.0538,0.4855],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4855],[0.0538,0.4857],[0.0538,0.4855],[0.0538,0.4855],[0.0538,0.4855],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4855],[0.0535,0.4848],[0.0535,0.4855],[0.0535,0.4855],[0.0535,0.4848],[0.0535,0.4855],[0.0535,0.4821],[0.0535,0.4814],[0.0535,0.4855],[0.0535,0.4821],[0.0535,0.4821],[0.0535,0.4857],[0.0535,0.4855],[0.0535,0.4855],[0.0535,0.4821],[0.0535,0.4819],[0.0535,0.4821],[0.0535,0.4819],[0.0535,0.4819],[0.0535,0.4821],[0.0535,0.4821],[0.0538,0.4821],[0.0538,0.4819],[0.0535,0.4823],[0.0538,0.4823],[0.0538,0.4821],[0.7124,0.0041],[0.7146,0.0041],[0.7131,0.0041],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0535,0.4823],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4823],[0.0535,0.4824],[0.0535,0.4823],[0.0535,0.4823],[0.0535,0.4823],[0.0535,0.4821],[0.0538,0.4823],[0.0535,0.4823],[0.0535,0.4821],[0.0538,0.4821],[0.0538,0.4823],[0.0538,0.4823],[0.0538,0.4823],[0.0538,0.4824],[0.0538,0.4823],[0.0538,0.4857],[0.0538,0.4823],[0.0538,0.4824],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0535,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4859],[0.0535,0.4857],[0.0535,0.486],[0.0535,0.4859],[0.0535,0.4857],[0.0535,0.4857],[0.0538,0.4857],[0.0538,0.486],[0.0535,0.4866],[0.0535,0.486],[0.0538,0.486],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4859],[0.0535,0.4859],[0.0535,0.4866],[0.0535,0.4864],[0.0535,0.4864],[0.0535,0.483],[0.0535,0.4824],[0.0535,0.4866],[0.0535,0.4832],[0.0535,0.483],[0.0535,0.4866],[0.0535,0.4832],[0.0535,0.4832],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.7318,0.004],[0.7303,0.004],[0.7303,0.0041],[0.7293,0.004],[0.7279,0.004],[0.7303,0.004],[0.7279,0.0041],[0.7279,0.004],[0.7293,0.004],[0.7293,0.0041],[0.7318,0.0041],[0.7303,0.0041],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0538,0.4833],[0.0535,0.4833],[0.0535,0.4832],[0.0538,0.4832],[0.0538,0.4832],[0.0538,0.4833],[0.0538,0.4832],[0.0538,0.4833],[0.0538,0.4833],[0.0538,0.4866],[0.0538,0.4833],[0.0538,0.4833],[0.0538,0.4866],[0.0538,0.4869],[0.0538,0.4866],[0.0538,0.4869],[0.0538,0.4869],[0.0538,0.4866],[0.0535,0.4866],[0.0538,0.4866],[0.0538,0.4869],[0.0535,0.4869],[0.0535,0.4869],[0.0535,0.4866],[0.0535,0.4869],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4833],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4833],[0.0535,0.4833],[0.0535,0.4832],[0.0535,0.4833],[0.0535,0.4832],[0.0535,0.4832],[0.0535,0.4832],[0.0535,0.4832],[0.0535,0.4832],[0.0538,0.4832],[0.0535,0.4832],[0.0535,0.4832],[0.0538,0.4832],[0.0538,0.4833],[0.0538,0.4832],[0.0538,0.4833],[0.0538,0.4833],[0.0538,0.4833],[0.0538,0.4866],[0.0538,0.4833],[0.0538,0.4833],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4869],[0.0538,0.4869],[0.0538,0.4869],[0.0538,0.4869],[0.0535,0.4869],[0.0538,0.4869],[0.0538,0.4869],[0.0535,0.4869],[0.0535,0.4869],[0.0535,0.4869],[0.0535,0.4869],[0.0535,0.4869],[0.0535,0.4866],[0.0535,0.4833],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4832],[0.0535,0.4833],[0.0535,0.4833],[0.0535,0.4841],[0.0535,0.4833],[0.0535,0.4833],[0.0535,0.4839],[0.0535,0.4832],[0.0535,0.4833],[0.0535,0.4839],[0.0538,0.4839],[0.0538,0.4832],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0538,0.4832],[0.0538,0.4839],[0.0538,0.4841],[0.0538,0.4833],[0.0538,0.4841],[0.0538,0.4842],[0.0538,0.4842],[0.0538,0.4875],[0.0538,0.4866],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0538,0.4875],[0.0538,0.4878],[0.0538,0.4869],[0.0538,0.4869],[0.0538,0.4878],[0.0538,0.4878],[0.0538,0.4878],[0.0535,0.4878],[0.0535,0.4869],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0535,0.4869],[0.0535,0.4878],[0.0535,0.4878],[0.0535,0.4878],[0.0535,0.4875],[0.0535,0.4866],[0.0535,0.4875],[0.0535,0.4842],[0.0535,0.4833],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0535,0.4832],[0.0538,0.4832],[0.0538,0.483],[0.0535,0.483],[0.0535,0.483],[0.0535,0.4832],[0.0535,0.483],[0.0535,0.4832],[0.0535,0.4832],[0.0535,0.483],[0.0535,0.483],[0.0535,0.483],[0.0535,0.4828],[0.0535,0.483],[0.0535,0.483],[0.0535,0.483],[0.0538,0.483],[0.0538,0.4828],[0.0535,0.4828],[0.0538,0.4828],[0.0538,0.4821],[0.0535,0.4828],[0.0535,0.4821],[0.0535,0.4823],[0.0535,0.483],[0.0535,0.4823],[0.0535,0.4824],[0.0535,0.4823],[0.0535,0.4824],[0.0535,0.4824],[0.0535,0.4821],[0.0535,0.4821],[0.0535,0.4823],[0.0538,0.4821],[0.0535,0.4821],[0.0535,0.4821],[0.0538,0.4821],[0.0538,0.4823],[0.0538,0.4823],[0.0538,0.4823],[0.0538,0.4823],[0.0538,0.4824],[0.0538,0.4857],[0.0538,0.4824],[0.0538,0.4824],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4859],[0.0538,0.4857],[0.0538,0.4859],[0.0538,0.486],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.486],[0.0538,0.4857],[0.0538,0.4864],[0.0538,0.4866],[0.0538,0.483],[0.0538,0.4864],[0.0538,0.4857],[0.0538,0.4832],[0.0538,0.4866],[0.0538,0.4864],[0.0538,0.4832],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4832],[0.0538,0.4832],[0.0538,0.483],[0.0538,0.4832],[0.0538,0.483],[0.0538,0.483],[0.0538,0.4828],[0.0538,0.483],[0.0538,0.483],[0.0538,0.4828],[0.0538,0.483],[0.0538,0.4823],[0.0538,0.4823],[0.0538,0.483],[0.0538,0.483],[0.0538,0.483],[0.0538,0.4832],[0.0538,0.483],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4864],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0538,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4864],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4824],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4821],[0.0535,0.4821],[0.0535,0.4823],[0.0535,0.4821],[0.0535,0.4821],[0.0535,0.4823],[0.0538,0.4823],[0.0538,0.4821],[0.0538,0.4821],[0.0538,0.4819],[0.0538,0.4821],[0.0538,0.4821],[0.0538,0.4812],[0.0538,0.4819],[0.0538,0.4819],[0.0538,0.4812],[0.0537,0.4812],[0.0535,0.4819],[0.0535,0.4819],[0.0537,0.4812],[0.0535,0.4814],[0.0535,0.4819],[0.0535,0.4814],[0.0535,0.4814],[0.0535,0.4812],[0.0535,0.4814],[0.0535,0.4814],[0.0537,0.4812],[0.0537,0.4812],[0.0535,0.4812],[0.0538,0.4812],[0.0537,0.4812],[0.0537,0.4812],[0.0538,0.4812],[0.0538,0.4814],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.4814],[0.0538,0.4814],[0.0538,0.4846],[0.0538,0.4814],[0.0538,0.4814],[0.0538,0.4848],[0.0538,0.4848],[0.0538,0.4848],[0.0538,0.4848],[0.0538,0.4848],[0.0538,0.485],[0.0538,0.4814],[0.0538,0.4819],[0.0538,0.4821],[0.0538,0.4821],[0.0538,0.4821],[0.0538,0.4821],[0.0538,0.4823],[0.0538,0.4821],[0.0538,0.4821],[0.0535,0.4814],[0.0535,0.4846],[0.0535,0.4848],[0.0537,0.4846],[0.0537,0.4812],[0.0535,0.4812],[0.0537,0.4846],[0.0535,0.4846],[0.0535,0.4846],[0.0537,0.4846],[0.0535,0.4846],[0.0537,0.4846],[0.0537,0.4846],[0.0537,0.4846],[0.0535,0.4846],[0.0537,0.4839],[0.0537,0.4846],[0.0535,0.4846],[0.0537,0.4839],[0.0535,0.4846],[0.0535,0.4844],[0.0535,0.4812],[0.0537,0.4805],[0.0537,0.4837],[0.0535,0.481],[0.0537,0.4805],[0.0537,0.4805],[0.0537,0.481],[0.0537,0.4803],[0.0537,0.4805],[0.0537,0.481],[0.0538,0.481],[0.0538,0.4803],[0.0538,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0538,0.4803],[0.0538,0.4805],[0.0538,0.4803],[0.0538,0.4805],[0.0538,0.4805],[0.0538,0.4805],[0.0538,0.4837],[0.0538,0.4805],[0.0538,0.4805],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4839],[0.0538,0.4837],[0.0538,0.4839],[0.0538,0.4839],[0.0538,0.4839],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4837],[0.0538,0.4844],[0.0538,0.4846],[0.0538,0.4812],[0.0538,0.4844],[0.0538,0.4837],[0.0538,0.4812],[0.0538,0.4846],[0.0538,0.4844],[0.0538,0.481],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.481],[0.0538,0.4812],[0.0538,0.4812],[0.0537,0.4812],[0.0538,0.4812],[0.0538,0.481],[0.0537,0.481],[0.0535,0.481],[0.0535,0.4812],[0.0537,0.4812],[0.0535,0.4812],[0.0537,0.4812],[0.0535,0.4812],[0.0535,0.4812],[0.0537,0.4812],[0.0535,0.4812],[0.0535,0.481],[0.0535,0.4812],[0.0535,0.4846],[0.0535,0.4812],[0.0535,0.4812],[0.0535,0.4846],[0.0535,0.4846],[0.0535,0.4846],[0.0538,0.4803],[0.0538,0.481],[0.0538,0.481],[0.0538,0.4805],[0.0538,0.481],[0.0538,0.4812],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4805],[0.0537,0.4803],[0.0537,0.4805],[0.0537,0.4805],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4835],[0.0537,0.4835],[0.0537,0.4837],[0.0537,0.4835],[0.0537,0.4837],[0.0537,0.4837],[0.0,0.0],[0.0,0.0],[0.5188,0.5536],[0.5231,0.5529],[0.5231,0.5403],[0.5274,0.5536],[0.5231,0.5403],[0.5231,0.5529],[0.5712,0.0041],[0.573,0.004],[0.5741,0.004],[0.573,0.004],[0.5712,0.0041],[0.5558,0.004],[0.5529,0.004],[0.573,0.004],[0.5558,0.004],[0.5572,0.0041],[0.554,0.004],[0.5529,0.004],[0.554,0.004],[0.5572,0.0041],[0.5741,0.004],[0.5741,0.004],[0.573,0.004],[0.5529,0.004],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5741,0.004],[0.5572,0.0041],[0.573,0.0041],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5558,0.004],[0.5558,0.0041],[0.5572,0.0041],[0.5467,0.0043],[0.5616,0.0043],[0.5558,0.0043],[0.5572,0.0046],[0.5572,0.0043],[0.5558,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.573,0.0046],[0.5558,0.0046],[0.5712,0.0043],[0.573,0.0043],[0.5741,0.0046],[0.573,0.0046],[0.5551,0.0043],[0.5558,0.0043],[0.5572,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0081,0.9552],[0.0081,0.9768],[0.0081,0.9768],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0081,0.9768],[0.0081,0.9549],[0.0081,0.9549],[0.5515,0.0037],[0.4508,0.0037],[0.4521,0.0037],[0.6258,0.0037],[0.6444,0.0037],[0.6449,0.0038],[0.0081,0.9792],[0.0081,0.9768],[0.0081,0.9768],[0.0081,0.9792],[0.0081,0.9792],[0.0081,0.9768],[0.6449,0.0035],[0.6444,0.0037],[0.6258,0.0037],[0.6449,0.0035],[0.7537,0.0037],[0.6444,0.0037],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.6449,0.0038],[0.6444,0.0037],[0.7537,0.0037],[0.6449,0.0038],[0.7537,0.0037],[0.6456,0.0037],[0.6449,0.0038],[0.6456,0.0037],[0.6269,0.0037],[0.6449,0.0038],[0.5522,0.0037],[0.4449,0.0038],[0.6449,0.0038],[0.4449,0.0038],[0.4447,0.0038],[0.6449,0.0038],[0.4447,0.0038],[0.4449,0.0038],[0.6449,0.0038],[0.4449,0.0038],[0.5515,0.0037],[0.5515,0.0037],[0.4449,0.0038],[0.4508,0.0037],[0.5522,0.0037],[0.4503,0.0037],[0.4449,0.0038],[0.4517,0.0037],[0.4503,0.0037],[0.5522,0.0037],[0.008,0.9549],[0.008,0.9768],[0.008,0.9768],[0.008,0.9768],[0.008,0.9552],[0.008,0.9549],[0.008,0.9771],[0.008,0.9549],[0.008,0.9549],[0.5522,0.0035],[0.4503,0.0035],[0.4517,0.0037],[0.6294,0.0037],[0.6456,0.0037],[0.6449,0.0035],[0.008,0.9771],[0.008,0.9771],[0.008,0.9792],[0.008,0.9768],[0.008,0.9792],[0.008,0.9792],[0.6449,0.0035],[0.4449,0.0035],[0.5522,0.0035],[0.5522,0.0035],[0.4449,0.0035],[0.4503,0.0035],[0.6449,0.0035],[0.4447,0.0035],[0.4449,0.0035],[0.6449,0.0035],[0.4449,0.0035],[0.4447,0.0035],[0.6449,0.0035],[0.5515,0.0035],[0.4449,0.0035],[0.5515,0.0035],[0.4508,0.0035],[0.4449,0.0035],[0.4521,0.0037],[0.4508,0.0035],[0.5515,0.0035],[0.0081,0.9549],[0.0081,0.9768],[0.0081,0.9768],[0.6449,0.0035],[0.6456,0.0037],[0.7537,0.0037],[0.5199,0.5554],[0.5231,0.5558],[0.5231,0.5665],[0.5199,0.5554],[0.5231,0.545],[0.5231,0.5558],[0.5572,0.0046],[0.573,0.0046],[0.0,0.0],[0.5572,0.0043],[0.573,0.0043],[0.5572,0.0046],[0.5479,0.0043],[0.5572,0.0041],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5824,0.0043],[0.0,0.0],[0.0537,0.4812],[0.0535,0.4812],[0.5712,0.0041],[0.5802,0.0043],[0.5809,0.0043],[0.5763,0.0041],[0.582,0.0043],[0.5824,0.0043],[0.0537,0.4837],[0.0537,0.4828],[0.0537,0.4826],[0.0537,0.4803],[0.0537,0.4794],[0.0537,0.4803],[0.0537,0.4801],[0.0538,0.4801],[0.0538,0.4792],[0.0538,0.4792],[0.0538,0.4835],[0.0538,0.4826],[0.0538,0.4826],[0.0538,0.4828],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4803],[0.0538,0.4803],[0.0,0.0],[0.6804,0.004],[0.6783,0.004],[0.0538,0.4837],[0.0538,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4835],[0.0537,0.4835],[0.6783,0.0041],[0.6786,0.0041],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0538,0.4801],[0.0538,0.4801],[0.0,0.0],[0.0537,0.4805],[0.0538,0.4803],[0.0538,0.4837],[0.0537,0.4839],[0.0537,0.4837],[0.0537,0.4839],[0.0537,0.4839],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0,0.0],[0.6976,0.004],[0.0538,0.4812],[0.0537,0.4812],[0.6976,0.0041],[0.0,0.0],[0.6937,0.004],[0.0535,0.4814],[0.0538,0.4812],[0.0538,0.4846],[0.0537,0.4848],[0.6955,0.004],[0.0535,0.4848],[0.0537,0.4848],[0.0537,0.485],[0.0537,0.485],[0.0538,0.4848],[0.0538,0.4848],[0.0538,0.4821],[0.0538,0.4821],[0.0538,0.4821],[0.0,0.0],[0.7146,0.0041],[0.7146,0.004],[0.7109,0.0041],[0.0535,0.4855],[0.0538,0.4857],[0.0538,0.4855],[0.0538,0.4855],[0.0538,0.4857],[0.0535,0.4855],[0.0537,0.485],[0.0535,0.4848],[0.0535,0.4848],[0.0535,0.4855],[0.0535,0.4855],[0.0535,0.4821],[0.0535,0.4821],[0.0535,0.4819],[0.0535,0.4821],[0.7109,0.0041],[0.0,0.0],[0.0535,0.4824],[0.0538,0.4821],[0.0538,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.486],[0.0538,0.4866],[0.0535,0.486],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4864],[0.0535,0.4866],[0.0,0.0],[0.7318,0.0041],[0.7318,0.004],[0.7293,0.0041],[0.7279,0.0041],[0.0,0.0],[0.0538,0.4832],[0.0538,0.4866],[0.0535,0.4869],[0.0535,0.4833],[0.0535,0.4833],[0.0538,0.4832],[0.0538,0.4832],[0.0538,0.4832],[0.0538,0.4866],[0.0538,0.4869],[0.0538,0.4869],[0.0535,0.4869],[0.0535,0.4869],[0.0535,0.4866],[0.0535,0.4833],[0.0535,0.4833],[0.0535,0.4842],[0.0535,0.4841],[0.0535,0.4832],[0.0,0.0],[0.0538,0.4833],[0.0538,0.4833],[0.0538,0.4833],[0.0538,0.4866],[0.0538,0.4869],[0.0538,0.4869],[0.0535,0.4869],[0.0535,0.4869],[0.0535,0.4866],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0535,0.483],[0.0535,0.4832],[0.0535,0.483],[0.0535,0.4828],[0.0535,0.4821],[0.0535,0.483],[0.0535,0.483],[0.0535,0.4823],[0.0535,0.4823],[0.0538,0.4821],[0.0538,0.4821],[0.0538,0.4824],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4859],[0.0538,0.4859],[0.0538,0.4824],[0.0538,0.483],[0.0538,0.4832],[0.0538,0.483],[0.0538,0.4821],[0.0538,0.4824],[0.0538,0.483],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4824],[0.0538,0.4819],[0.0538,0.4814],[0.0538,0.4819],[0.0535,0.4819],[0.0535,0.4821],[0.0535,0.4814],[0.0535,0.4814],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.4814],[0.0538,0.4848],[0.0538,0.4846],[0.0538,0.4848],[0.0538,0.4814],[0.0538,0.4819],[0.0535,0.4814],[0.0535,0.4846],[0.0535,0.4846],[0.0537,0.4839],[0.0537,0.4837],[0.0535,0.4844],[0.0535,0.4812],[0.0535,0.481],[0.0537,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4839],[0.0538,0.4839],[0.0538,0.4839],[0.0538,0.4805],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.481],[0.0537,0.481],[0.0537,0.4812],[0.0535,0.4812],[0.0535,0.4844],[0.0535,0.4844],[0.0538,0.4805],[0.0538,0.4805],[0.0538,0.4844],[0.0538,0.4846],[0.0537,0.4805],[0.0537,0.4805],[0.0537,0.4805],[0.573,0.0041],[0.5558,0.004],[0.554,0.004],[0.0,0.0],[0.0,0.0],[0.5572,0.0041],[0.5712,0.0043],[0.5558,0.0046],[0.5558,0.0041],[0.5712,0.0041],[0.5558,0.004],[0.5558,0.0046],[0.0,0.0],[0.5712,0.0043],[0.5467,0.0043],[0.5475,0.0043],[0.5472,0.0043],[0.5478,0.0043],[0.5479,0.0043],[0.5479,0.0043],[0.5472,0.0043],[0.5479,0.0043],[0.549,0.0043],[0.5479,0.0043],[0.5479,0.0043],[0.5472,0.0043],[0.5479,0.0043],[0.5478,0.0043],[0.5475,0.0043],[0.5472,0.0043],[0.5467,0.0043],[0.5572,0.0041],[0.5493,0.0043],[0.0081,0.9549],[0.0081,0.9792],[0.0081,0.9549],[0.0081,0.9768],[0.6258,0.0037],[0.5515,0.0037],[0.0081,0.9792],[0.0081,0.9768],[0.5515,0.0035],[0.0,0.0],[0.5522,0.0037],[0.6269,0.0037],[0.008,0.9549],[0.008,0.9549],[0.008,0.9771],[0.008,0.9792],[0.008,0.9771],[0.6294,0.0037],[0.5522,0.0035],[0.008,0.9792],[0.008,0.9768],[0.6258,0.0037],[0.0081,0.9549],[0.5558,0.0046],[0.554,0.0046],[0.5741,0.0046],[0.5529,0.0046],[0.0,0.0],[0.0,0.0],[0.573,0.0041],[0.5572,0.0041],[0.5572,0.0041],[0.563,0.0043],[0.563,0.0043],[0.563,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5763,0.0043],[0.5763,0.0043],[0.0,0.0],[0.0,0.0],[0.573,0.0043],[0.573,0.0043],[0.573,0.0043],[0.5712,0.0043],[0.5712,0.0043],[0.5712,0.0043],[0.5712,0.0043],[0.0,0.0],[0.5766,0.0041],[0.0,0.0],[0.573,0.0041],[0.573,0.0041],[0.573,0.0041],[0.573,0.0041],[0.0,0.0],[0.0,0.0],[0.5773,0.0041],[0.5773,0.0041],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5762,0.0041],[0.5762,0.0041],[0.5762,0.0041],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5756,0.0041],[0.5756,0.0041],[0.5756,0.0041],[0.0,0.0],[0.0,0.0],[0.0537,0.4828],[0.0538,0.4837],[0.0537,0.4837],[0.0537,0.4826],[0.5756,0.0041],[0.5756,0.0041],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0537,0.4837],[0.0537,0.4826],[0.0537,0.4835],[0.0537,0.4812],[0.0537,0.4812],[0.5756,0.0043],[0.5756,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0537,0.4794],[0.5762,0.0043],[0.5762,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5773,0.0043],[0.0,0.0],[0.5773,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0537,0.4801],[0.0537,0.4794],[0.0537,0.4801],[0.0537,0.4792],[0.0538,0.4792],[0.0537,0.4801],[0.0538,0.4801],[0.0538,0.4792],[0.5766,0.0043],[0.5766,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0538,0.4801],[0.0538,0.4794],[0.0538,0.4803],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.4826],[0.0538,0.4837],[0.0,0.0],[0.0,0.0],[0.0538,0.4826],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4837],[0.0538,0.4835],[0.0538,0.4837],[0.0538,0.4803],[0.0538,0.4835],[0.0538,0.4803],[0.0538,0.4835],[0.0,0.0],[0.0,0.0],[0.6786,0.004],[0.6804,0.0041],[0.6769,0.004],[0.6804,0.004],[0.0538,0.4835],[0.0537,0.4837],[0.0538,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4837],[0.0537,0.4835],[0.0537,0.4835],[0.0537,0.4803],[0.0537,0.4835],[0.0537,0.4803],[0.6769,0.0041],[0.6783,0.004],[0.6769,0.0041],[0.6804,0.0041],[0.0537,0.4803],[0.0538,0.4803],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4801],[0.0537,0.4803],[0.0538,0.4803],[0.0537,0.4801],[0.0538,0.4801],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0,0.0],[0.0,0.0],[0.0537,0.4805],[0.0537,0.4837],[0.0538,0.4805],[0.0537,0.4803],[0.0538,0.4837],[0.0538,0.4805],[0.0537,0.4837],[0.0538,0.4839],[0.0537,0.4839],[0.0537,0.4837],[0.0537,0.4839],[0.0537,0.4837],[0.0537,0.4839],[0.0538,0.4839],[0.0537,0.4846],[0.0538,0.4839],[0.0538,0.4846],[0.0537,0.4846],[0.0538,0.4846],[0.0537,0.4846],[0.0,0.0],[0.0,0.0],[0.6959,0.004],[0.6976,0.0041],[0.0538,0.4812],[0.0538,0.4846],[0.0537,0.4812],[0.0538,0.4812],[0.6959,0.0041],[0.6955,0.0041],[0.0,0.0],[0.0,0.0],[0.6955,0.004],[0.6937,0.0041],[0.0537,0.4814],[0.0535,0.4846],[0.0538,0.4814],[0.0537,0.4812],[0.0538,0.4846],[0.0538,0.4814],[0.0537,0.4846],[0.0538,0.4848],[0.6937,0.004],[0.6976,0.004],[0.0535,0.4848],[0.0535,0.4846],[0.0537,0.485],[0.0535,0.4848],[0.0537,0.4848],[0.0538,0.485],[0.0538,0.485],[0.0535,0.4857],[0.0538,0.4855],[0.0538,0.485],[0.0538,0.4855],[0.0538,0.4848],[0.0538,0.4855],[0.0538,0.4814],[0.0538,0.4821],[0.0538,0.4855],[0.0538,0.4823],[0.0538,0.4855],[0.0,0.0],[0.0,0.0],[0.7146,0.004],[0.7131,0.0041],[0.7124,0.004],[0.7131,0.004],[0.7109,0.004],[0.7124,0.0041],[0.0535,0.4855],[0.0535,0.4821],[0.0538,0.4855],[0.0535,0.4857],[0.0538,0.4855],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0538,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.4848],[0.0535,0.4855],[0.0535,0.4848],[0.0535,0.4855],[0.0535,0.4814],[0.0535,0.4855],[0.0535,0.4821],[0.0535,0.4857],[0.0535,0.4855],[0.0535,0.4821],[0.0535,0.4821],[0.0535,0.4819],[0.0535,0.4821],[0.0535,0.4821],[0.0538,0.4819],[0.0535,0.4823],[0.0538,0.4821],[0.7124,0.0041],[0.7131,0.0041],[0.0,0.0],[0.0,0.0],[0.0535,0.4823],[0.0535,0.4857],[0.0538,0.4823],[0.0535,0.4821],[0.0538,0.4857],[0.0538,0.4824],[0.0535,0.4857],[0.0538,0.4857],[0.0535,0.4857],[0.0535,0.4857],[0.0535,0.486],[0.0535,0.4857],[0.0535,0.4857],[0.0538,0.486],[0.0535,0.4866],[0.0538,0.486],[0.0535,0.4866],[0.0535,0.4859],[0.0535,0.4859],[0.0535,0.4864],[0.0535,0.4864],[0.0535,0.4824],[0.0535,0.4866],[0.0535,0.483],[0.0535,0.4866],[0.0535,0.4832],[0.0,0.0],[0.0,0.0],[0.7318,0.004],[0.7303,0.0041],[0.7293,0.004],[0.7303,0.004],[0.7279,0.0041],[0.7293,0.004],[0.7293,0.0041],[0.7303,0.0041],[0.0,0.0],[0.0,0.0],[0.0538,0.4833],[0.0535,0.4832],[0.0538,0.4866],[0.0538,0.4833],[0.0535,0.4866],[0.0538,0.4869],[0.0535,0.4833],[0.0535,0.4866],[0.0535,0.4832],[0.0535,0.4832],[0.0538,0.4832],[0.0535,0.4832],[0.0538,0.4832],[0.0538,0.4832],[0.0538,0.4833],[0.0538,0.4833],[0.0538,0.4866],[0.0538,0.4833],[0.0538,0.4866],[0.0538,0.4869],[0.0538,0.4869],[0.0538,0.4869],[0.0535,0.4869],[0.0538,0.4869],[0.0535,0.4869],[0.0535,0.4869],[0.0535,0.4869],[0.0535,0.4866],[0.0535,0.4833],[0.0535,0.4866],[0.0535,0.4832],[0.0535,0.4833],[0.0535,0.4841],[0.0535,0.4833],[0.0535,0.4839],[0.0535,0.4833],[0.0535,0.4839],[0.0538,0.4832],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0538,0.4832],[0.0538,0.4841],[0.0538,0.4833],[0.0538,0.4842],[0.0538,0.4842],[0.0538,0.4866],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0538,0.4875],[0.0538,0.4869],[0.0538,0.4869],[0.0538,0.4878],[0.0538,0.4878],[0.0535,0.4869],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0535,0.4869],[0.0535,0.4878],[0.0535,0.4878],[0.0535,0.4866],[0.0535,0.4875],[0.0535,0.4833],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0535,0.4832],[0.0538,0.483],[0.0535,0.483],[0.0535,0.483],[0.0535,0.4828],[0.0535,0.483],[0.0535,0.483],[0.0538,0.4828],[0.0535,0.4828],[0.0538,0.4821],[0.0535,0.4828],[0.0535,0.4823],[0.0535,0.483],[0.0535,0.4824],[0.0535,0.4823],[0.0535,0.4824],[0.0535,0.4821],[0.0535,0.4823],[0.0538,0.4821],[0.0535,0.4821],[0.0538,0.4821],[0.0538,0.4823],[0.0538,0.4823],[0.0538,0.4824],[0.0538,0.4857],[0.0538,0.4824],[0.0538,0.4857],[0.0538,0.4859],[0.0538,0.4857],[0.0538,0.486],[0.0538,0.4866],[0.0538,0.486],[0.0538,0.4857],[0.0538,0.4866],[0.0538,0.483],[0.0538,0.4857],[0.0538,0.4832],[0.0538,0.4864],[0.0538,0.4832],[0.0538,0.4866],[0.0538,0.4828],[0.0538,0.483],[0.0538,0.4828],[0.0538,0.4823],[0.0538,0.4823],[0.0538,0.483],[0.0538,0.483],[0.0538,0.483],[0.0538,0.4864],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0538,0.4866],[0.0535,0.4866],[0.0538,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4866],[0.0535,0.4864],[0.0535,0.4824],[0.0535,0.4857],[0.0538,0.4819],[0.0538,0.4821],[0.0538,0.4812],[0.0538,0.4819],[0.0538,0.4812],[0.0535,0.4819],[0.0535,0.4819],[0.0535,0.4814],[0.0535,0.4819],[0.0535,0.4814],[0.0535,0.4812],[0.0535,0.4814],[0.0537,0.4812],[0.0535,0.4812],[0.0538,0.4812],[0.0537,0.4812],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.4812],[0.0538,0.4814],[0.0538,0.4846],[0.0538,0.4814],[0.0538,0.4848],[0.0538,0.4848],[0.0538,0.4848],[0.0538,0.485],[0.0538,0.4814],[0.0538,0.4821],[0.0538,0.4821],[0.0538,0.4821],[0.0535,0.4814],[0.0535,0.4848],[0.0537,0.4846],[0.0535,0.4812],[0.0537,0.4846],[0.0535,0.4846],[0.0537,0.4839],[0.0535,0.4846],[0.0537,0.4839],[0.0535,0.4844],[0.0535,0.4812],[0.0537,0.4837],[0.0535,0.481],[0.0537,0.4805],[0.0537,0.481],[0.0537,0.4805],[0.0537,0.481],[0.0538,0.4803],[0.0538,0.4803],[0.0537,0.4803],[0.0538,0.4803],[0.0538,0.4803],[0.0538,0.4805],[0.0538,0.4805],[0.0538,0.4837],[0.0538,0.4805],[0.0538,0.4837],[0.0538,0.4839],[0.0538,0.4837],[0.0538,0.4839],[0.0538,0.4839],[0.0538,0.4846],[0.0538,0.4837],[0.0538,0.4846],[0.0538,0.4812],[0.0538,0.4837],[0.0538,0.4812],[0.0538,0.4844],[0.0538,0.481],[0.0538,0.4812],[0.0538,0.481],[0.0538,0.4812],[0.0537,0.4812],[0.0538,0.481],[0.0537,0.481],[0.0535,0.4812],[0.0535,0.4812],[0.0535,0.4812],[0.0535,0.4846],[0.0535,0.4812],[0.0535,0.4846],[0.0535,0.4846],[0.0538,0.4803],[0.0538,0.481],[0.0538,0.4805],[0.0538,0.4812],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0538,0.4846],[0.0537,0.4803],[0.0537,0.4803],[0.0537,0.4805],[0.0537,0.4805],[0.0537,0.4805],[0.0537,0.4837],[0.5756,0.0043],[0.5756,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5712,0.0041],[0.5741,0.004],[0.5572,0.0041],[0.5529,0.004],[0.5741,0.004],[0.5529,0.004],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5558,0.004],[0.5572,0.0041],[0.5467,0.0043],[0.5616,0.0043],[0.5616,0.0043],[0.5616,0.0043],[0.5558,0.0043],[0.5558,0.0043],[0.5572,0.0046],[0.5558,0.0043],[0.0,0.0],[0.0,0.0],[0.573,0.0043],[0.573,0.0046],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5558,0.0043],[0.5558,0.0043],[0.0,0.0],[0.5572,0.0043],[0.0,0.0],[0.5572,0.0043],[0.0,0.0],[0.5551,0.0041],[0.0,0.0],[0.5558,0.0041],[0.5558,0.0041],[0.5558,0.0041],[0.0,0.0],[0.555,0.0041],[0.0,0.0],[0.549,0.0043],[0.549,0.0043],[0.549,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.555,0.0041],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0081,0.9552],[0.0081,0.9552],[0.0081,0.9768],[0.0081,0.9768],[0.0081,0.9768],[0.0081,0.9768],[0.5493,0.0043],[0.5493,0.0043],[0.5493,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.555,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.555,0.0043],[0.0,0.0],[0.0081,0.9768],[0.0081,0.9549],[0.5515,0.0037],[0.4521,0.0037],[0.6258,0.0037],[0.6449,0.0038],[0.0081,0.9792],[0.0081,0.9768],[0.0081,0.9792],[0.0081,0.9768],[0.6449,0.0035],[0.6258,0.0037],[0.0,0.0],[0.0,0.0],[0.6449,0.0038],[0.6269,0.0037],[0.4517,0.0037],[0.5522,0.0037],[0.008,0.9549],[0.008,0.9768],[0.008,0.9768],[0.008,0.9768],[0.008,0.9768],[0.008,0.9552],[0.008,0.9771],[0.008,0.9549],[0.5522,0.0035],[0.4517,0.0037],[0.6294,0.0037],[0.6449,0.0035],[0.008,0.9771],[0.008,0.9792],[0.008,0.9768],[0.008,0.9792],[0.4521,0.0037],[0.5515,0.0035],[0.0081,0.9549],[0.0081,0.9768],[0.5572,0.0043],[0.5572,0.0043],[0.573,0.0043],[0.5479,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5802,0.0043],[0.5712,0.0041],[0.5712,0.0041],[0.5712,0.0041],[0.5802,0.0043],[0.0,0.0],[0.5763,0.0041],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5824,0.0043],[0.0537,0.4803],[0.0538,0.4835],[0.0,0.0],[0.5712,0.0043],[0.5558,0.0041],[0.5558,0.0041],[0.5712,0.0041],[0.5467,0.0043],[0.5467,0.0043],[0.5475,0.0043],[0.5475,0.0043],[0.0,0.0],[0.5472,0.0043],[0.5472,0.0043],[0.5478,0.0043],[0.5478,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5479,0.0043],[0.0,0.0],[0.5479,0.0043],[0.5479,0.0043],[0.0,0.0],[0.5472,0.0043],[0.5472,0.0043],[0.5472,0.0043],[0.5479,0.0043],[0.5479,0.0043],[0.549,0.0043],[0.549,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5479,0.0043],[0.5479,0.0043],[0.5479,0.0043],[0.5479,0.0043],[0.0,0.0],[0.5472,0.0043],[0.5472,0.0043],[0.5479,0.0043],[0.5479,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.5478,0.0043],[0.0,0.0],[0.5475,0.0043],[0.5475,0.0043],[0.0,0.0],[0.5472,0.0043],[0.5472,0.0043],[0.5472,0.0043],[0.5467,0.0043],[0.5467,0.0043],[0.5572,0.0041],[0.0,0.0],[0.5572,0.0041],[0.5493,0.0043],[0.5493,0.0043],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.008,0.9549],[0.008,0.9771]],"packedWeights":[],"packedIndices":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,1630,44,45,46,47,48,49,50,1644,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,1611,74,75,76,77,78,79,80,81,82,83,1623,1631,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,1931,559,560,561,1932,1953,1960,1954,562,1966,563,1961,564,1962,1967,1968,565,1969,1975,1941,1970,1971,1942,566,1972,1937,567,1973,1981,1963,1964,1982,568,569,570,571,572,573,574,575,576,577,1976,578,1943,1977,579,1991,1997,580,581,582,583,584,585,586,587,588,589,590,591,2001,1955,592,2013,1956,1947,2018,1957,2019,1948,593,594,595,596,597,598,599,600,601,602,2002,1998,1958,1978,1959,1999,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1669,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,2321,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1595,1596,1258,1597,1598,1259,1599,1600,1260,1604,1261,1262,2395,2393,1263,2394,1605,1264,2396,1606,1602,1265,1603,1601,1610,1607,1266,2397,1608,1267,2398,1609,1268,1616,1676,1269,2399,1677,1270,1271,1670,1272,2403,1671,1619,2277,1620,1672,1691,1617,1612,1613,1621,1664,1665,1622,2278,1618,1692,1678,1273,1637,1274,2407,1638,1275,1639,2404,1654,1645,1626,1276,2409,1627,1624,2405,1646,1655,1277,1632,1278,2415,1633,1628,1629,1647,2406,1703,1634,2410,2411,1635,1648,1649,1640,1657,1641,2413,2408,2414,1642,1636,1650,1651,1279,1652,1653,1280,1656,1658,1643,1659,1660,1281,1662,1282,1283,2416,1663,1661,2400,1673,2402,1674,1666,2280,1667,1679,1614,1615,1680,1694,1681,1675,2401,1683,1684,1284,1685,1686,1285,1687,1688,1286,1689,1690,1287,1693,1695,1682,1696,1697,1288,1699,1289,1290,2417,1700,1698,1701,1702,1291,1625,1704,2412,1705,1706,1292,1707,1708,1293,1709,1710,1294,1711,1712,1295,1713,1714,1296,1715,1716,1297,1717,1718,1298,1719,1720,1299,1721,1722,1300,1723,1724,1301,1725,1726,1302,1727,1728,1303,1729,1730,1304,1731,1732,1305,1733,1734,1306,1735,1736,1307,1737,1738,1308,1739,1740,1309,1741,1742,1310,1743,1744,1311,1745,1746,1312,1747,1748,1313,1749,1750,1314,1751,1752,1315,1753,1754,1316,1755,1756,1317,1757,1758,1318,1759,1760,1319,1761,1762,1320,1763,1764,1321,1765,1766,1322,1767,1768,1323,1769,1770,1324,1771,1772,1325,1773,1774,1326,1775,1776,1327,1777,1778,1328,1779,1780,1329,1781,1782,1330,1783,1784,1331,1785,1786,1332,1787,1788,1333,1789,1790,1334,1791,1792,1335,1793,1794,1336,1795,1796,1337,1797,1798,1338,1799,1800,1339,1801,1802,1340,1803,1804,1341,1805,1806,1342,1807,1808,1343,1809,1810,1344,1811,1812,1345,1813,1814,1346,1815,1816,1347,1817,1818,1348,1819,1820,1349,1821,1822,1350,1823,1824,1351,1825,1826,1352,1827,1828,1353,1829,1830,1354,1831,1832,1355,1833,1834,1356,1835,1836,1357,1837,1838,1358,1839,1840,1359,1841,1842,1360,1843,1844,1361,1845,1846,1362,1847,1848,1363,1849,1850,1364,1851,1852,1365,1853,1854,1366,1855,1856,1367,1857,1858,1368,1859,1860,1369,1861,1862,1370,1863,1864,1371,1865,1866,1372,1867,1868,1373,1869,1870,1374,1871,1872,1375,1873,1874,1376,1875,1876,1377,1877,1878,1378,1879,1880,1379,1881,1882,1380,1883,1884,1381,1885,1886,1382,1887,1888,1383,1889,1890,1384,1891,1892,1385,1893,1894,1386,1895,1896,1387,1897,1898,1388,1899,1900,1389,1901,1902,1390,1903,1904,1391,1905,1906,1392,1907,1908,1393,1909,1910,1394,1911,1912,1395,1913,1914,1396,1915,1916,1397,1917,1918,1398,1919,1920,1399,1921,1922,1400,1923,1924,1401,1925,1926,1402,1927,1928,1403,1929,1930,1404,1983,1405,1933,1934,1944,1949,1950,2014,2021,2015,1992,2003,2004,1993,2005,1994,1951,1945,2016,1952,1995,1946,1938,1979,1939,1935,2418,1974,1980,1940,1965,1984,1936,1985,1986,1406,1987,1988,1407,1989,1990,1408,2000,2006,1996,2007,2008,1409,2009,2010,1410,2011,2012,1411,2020,2022,2017,2023,2024,1412,2025,2026,1413,2027,2028,1414,2029,2030,1415,2031,2032,1416,2033,2034,1417,2035,2036,1418,2037,2038,1419,2039,2040,1420,2041,2042,1421,2043,2044,1422,2045,2046,1423,2047,2048,1424,2049,2050,1425,2051,2052,1426,2053,2054,1427,2055,2056,1428,2057,2058,1429,2059,2060,1430,2061,2062,1431,2063,2064,1432,2065,2066,1433,2067,2068,1434,2069,2070,1435,2071,2072,1436,2073,2074,1437,2075,2076,1438,2077,2078,1439,2079,2080,1440,2081,2082,1441,2083,2084,1442,2085,2086,1443,2087,2088,1444,2089,2090,1445,2091,2092,1446,2093,2094,1447,2095,2096,1448,2097,2098,1449,2099,2100,1450,2101,2102,1451,2103,2104,1452,2105,2106,1453,2107,2108,1454,2109,2110,1455,2111,2112,1456,2113,2114,1457,2115,2116,1458,2117,2118,1459,2119,2120,1460,2121,2122,1461,2123,2124,1462,2125,2126,1463,2127,2128,1464,2129,2130,1465,2131,2132,1466,2133,2134,1467,2135,2136,1468,2137,2138,1469,2139,2140,1470,2141,2142,1471,2143,2144,1472,2145,2146,1473,2147,2148,1474,2149,2150,1475,2151,2152,1476,2153,2154,1477,2155,2156,1478,2157,2158,1479,2159,2160,1480,2161,2162,1481,2163,2164,1482,2165,2166,1483,2167,2168,1484,2169,2170,1485,2171,2172,1486,2173,2174,1487,2175,2176,1488,2177,2178,1489,2179,2180,1490,2181,2182,1491,2183,2184,1492,2185,2186,1493,2187,2188,1494,2189,2190,1495,2191,2192,1496,2193,2194,1497,2195,2196,1498,2197,2198,1499,2199,2200,1500,2201,2202,1501,2203,2204,1502,2205,2206,1503,2207,2208,1504,2209,2210,1505,2211,2212,1506,2213,2214,1507,2215,2216,1508,2217,2218,1509,2219,2220,1510,2221,2222,1511,2223,2224,1512,2225,2226,1513,2227,2228,1514,2229,2230,1515,2231,2232,1516,2233,2234,1517,2235,2236,1518,2237,2238,1519,2239,2240,1520,2241,2242,1521,2243,2244,1522,2245,2246,1523,2247,2248,1524,2249,2250,1525,2251,2252,1526,2253,2254,1527,2255,2256,1528,2257,2258,1529,2259,2260,1530,2261,2262,1531,2263,2264,1532,2265,2266,1533,2267,2268,1534,2269,2270,1535,2271,2272,1536,2273,2274,1537,2275,2276,1538,2279,2281,1668,2282,2283,1539,2284,2285,1540,2286,2287,1541,2288,2289,1542,2290,2291,1543,2292,2293,1544,2298,1545,1546,2295,1547,1548,2422,2420,1549,2299,2296,2419,2421,2297,2294,2300,2301,1550,2302,2303,1551,2304,2305,1552,1553,1554,1555,2428,2425,1556,1557,1558,1559,2441,2438,1560,2309,1561,2423,2424,2446,2426,2447,2310,2348,2349,2311,2306,2439,2341,2444,2445,2342,2312,2307,2313,2352,2353,2314,2343,1562,1563,1564,2456,2453,1565,1566,1567,1568,2469,2466,1569,1570,1571,2451,2452,2477,2454,2478,2474,2331,2332,2475,2315,2467,2324,2472,2473,2325,2318,2322,2319,2326,2320,2316,2476,2458,2470,2457,2463,2327,2468,2459,2464,2471,2479,2460,2455,2323,2333,2317,2334,2328,2480,2481,2329,2461,2462,2330,2465,2335,2339,1572,2340,2337,1573,2338,2336,1574,2430,2442,2429,2435,2344,2440,2431,2436,2443,2448,2432,2427,2354,2350,2308,2351,2345,2449,2450,2346,2433,2434,2347,2437,2355,2356,1575,2357,2358,1576,2359,2360,1577,2361,2362,1578,2363,2364,1579,2365,2366,1580,2367,2368,1581,2369,2370,1582,2371,2372,1583,2373,2374,1584,2378,2375,1585,2482,2376,1586,2483,2377,1587,2379,2380,1588,2381,2382,1589,2383,2384,1590,2385,2386,1591,2387,2388,1592,2389,2390,1593,2391,2392,1594]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[1978759068,608191005,2434463010,3831074128],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[12.9994,-6.0001,-31.7504],"m_extents":[18.2499,9.0,19.25]},"packedVertices":[49150,49150,16383,49150,16383,16383,18178,16383,16383,18178,49150,16383,18178,38956,36805,18178,38956,39934,18178,45145,39934,18178,16383,16383,18178,16383,36805,18178,48786,32128,18178,48786,27873,18178,49150,27873,18178,49150,16383,18178,45145,42341,18178,48786,42341,18178,49150,42341,18178,49150,32128,18178,16383,16383,49150,16383,16383,49150,16383,45746,45339,16383,45746,45339,16383,47448,41946,16383,49150,37557,16383,45746,38898,16383,49150,36570,16383,45746,34983,16383,44043,27009,16383,44043,27009,16383,45746,25213,16383,47448,23565,16383,47448,18178,16383,36805,16383,16383,40639,16383,16383,38507,37557,16383,47879,49150,49150,16383,49150,49150,45746,49150,16383,45746,49150,16383,16383,37031,49150,45746,49150,49150,45746,49150,49150,16383,37031,49150,32128,32542,49150,27873,18178,49150,16383,18178,49150,27873,18178,45145,42341,21769,45145,45746,21769,48786,45746,18178,48786,42341,18178,45145,39934,24309,45145,45746,21769,45145,45746,18178,45145,42341,18178,38956,39934,24309,38956,45746,24309,45145,45746,18178,45145,39934,25213,38956,47448,27009,38956,45746,24309,38956,45746,23565,38956,47448,18178,38956,39934,16383,38956,40639,18178,38956,36805,16383,38956,38507,18178,16383,36805,16383,16383,38507,16383,38956,38507,18178,38956,36805,18178,49150,27873,18178,48786,27873,32542,48786,27873,32542,49150,27873,32542,48786,45746,37031,48786,45746,37031,48786,32128,32542,48786,27873,32542,48786,35533,21769,48786,45746,28951,48786,32128,18178,48786,42341,18178,48786,27873,18178,48786,32128,28951,49150,32128,28951,48786,32128,18178,48786,32128,18178,49150,32128,18178,49150,32128,18178,49150,42341,28951,49150,32128,18178,49150,42341,18178,48786,42341,28951,48786,32128,28951,49150,32128,23565,38956,47448,23565,16383,47448,25213,16383,47448,25213,38956,47448,27009,38956,45746,25213,38956,47448,25213,16383,47448,27009,16383,45746,27009,45145,45746,27009,38956,45746,27009,16383,45746,27009,16383,44043,27009,45145,44043,27009,45145,44043,27009,16383,44043,34983,16383,44043,34983,38956,44043,39084,38956,44043,39084,45145,44043,34983,16383,44043,36570,16383,45746,36570,38956,45746,34983,38956,44043,36570,38956,45746,36570,16383,45746,37557,16383,45746,37557,38956,45746,37557,16383,45746,37557,16383,47879,37557,38956,47879,37557,38956,45746,37557,16383,47879,38898,16383,49150,38898,38956,49150,37557,38956,47879,38898,16383,49150,41946,16383,49150,41946,38956,49150,38898,38956,49150,41946,38956,49150,41946,16383,49150,45339,16383,47448,45339,38956,47448,45339,38956,45746,45339,38956,47448,45339,16383,47448,45339,16383,45746,39084,45145,45746,39084,38956,45746,45339,38956,45746,24309,45145,45746,24309,38956,45746,27009,38956,45746,27009,45145,45746,21769,48786,45746,21769,45145,45746,21769,49150,45746,32542,48786,45746,32542,49150,45746,45339,16383,45746,49150,16383,45746,49150,49150,45746,37031,48786,45746,37031,49150,45746,16383,16383,38507,16383,16383,40639,16383,38956,40639,16383,38956,38507,16383,16383,40639,23565,16383,47448,23565,38956,47448,16383,38956,40639,37031,48786,32128,37031,48786,45746,37031,49150,45746,37031,49150,32128,32542,48786,27873,37031,48786,32128,37031,49150,32128,32542,49150,27873,32542,49150,35533,32542,49150,45746,32542,48786,45746,32542,48786,35533,32542,49150,35533,32542,48786,35533,21769,48786,45746,21769,49150,45746,27009,45145,44043,39084,45145,44043,39084,45145,45746,27009,45145,45746,41946,38956,49150,45339,38956,47448,45339,38956,45746,39084,38956,45746,38898,38956,49150,39084,38956,44043,37557,38956,45746,34983,38956,44043,37557,38956,47879,36570,38956,45746,39084,38956,44043,39084,38956,45746,39084,45145,45746,39084,45145,44043,21769,49150,45746,32542,49150,45746,32542,49150,35533,46699,48422,45746,49150,48422,45746,49150,48422,47022,46699,48422,47022,39729,38956,45746,46699,48422,45746,46699,48422,47022,39729,38956,47022,46590,49150,47022,39084,38956,47022,39729,38956,47022,46699,48422,47022,49150,48422,47022,49150,49150,47022,49150,49150,45746,49150,49150,47022,49150,48422,47022,49150,48422,45746,39084,38956,47022,46590,49150,47022,46590,49150,45746,39084,38956,45746,46590,49150,47022,49150,49150,47022,49150,49150,45746,46590,49150,45746,49150,49150,16383,18178,16383,16383,18178,38956,36805,18178,38956,36805,18178,38956,36805,18178,38956,36805,18178,45145,39934,18178,45145,39934,18178,16383,16383,18178,16383,16383,18178,16383,16383,18178,16383,16383,18178,48786,32128,18178,48786,32128,18178,48786,27873,18178,49150,27873,18178,45145,42341,18178,45145,42341,18178,49150,42341,18178,49150,32128,18178,49150,32128,18178,49150,32128,18178,16383,16383,18178,16383,16383,18178,16383,16383,18178,16383,16383,18178,16383,16383,18178,16383,16383,18178,16383,16383,18178,16383,16383,18178,16383,16383,18178,16383,16383,18178,16383,16383,49150,16383,45746,45339,16383,45746,45339,16383,47448,41946,16383,49150,41946,16383,49150,37557,16383,45746,37557,16383,45746,37557,16383,45746,38898,16383,49150,36570,16383,45746,34983,16383,44043,27009,16383,44043,27009,16383,45746,25213,16383,47448,23565,16383,47448,23565,16383,47448,18178,16383,36805,18178,16383,36805,16383,16383,40639,49150,49150,16383,49150,16383,45746,37031,49150,45746,49150,49150,16383,49150,49150,16383,49150,49150,16383,37031,49150,32128,32542,49150,27873,32542,49150,27873,18178,49150,16383,18178,45145,42341,21769,48786,45746,18178,45145,39934,21769,45145,45746,18178,38956,39934,24309,45145,45746,25213,38956,47448,24309,38956,45746,24309,38956,45746,23565,38956,47448,23565,38956,47448,18178,38956,39934,18178,38956,39934,16383,38956,40639,16383,38956,40639,18178,38956,36805,18178,16383,36805,16383,38956,38507,18178,49150,27873,32542,48786,27873,32542,48786,45746,32542,48786,45746,37031,48786,32128,32542,48786,27873,32542,48786,27873,32542,48786,27873,32542,48786,27873,32542,48786,35533,21769,48786,45746,21769,48786,45746,28951,48786,32128,28951,48786,32128,28951,48786,32128,18178,48786,27873,28951,49150,32128,18178,48786,32128,18178,49150,42341,28951,48786,32128,23565,38956,47448,25213,16383,47448,27009,38956,45746,25213,16383,47448,27009,45145,45746,27009,45145,45746,27009,16383,45746,27009,16383,44043,27009,45145,44043,27009,45145,44043,34983,16383,44043,34983,38956,44043,34983,38956,44043,39084,45145,44043,34983,16383,44043,36570,38956,45746,36570,38956,45746,37557,16383,45746,37557,16383,45746,37557,38956,47879,37557,16383,47879,38898,38956,49150,38898,16383,49150,41946,38956,49150,41946,38956,49150,45339,16383,47448,45339,38956,45746,45339,16383,47448,39084,45145,45746,39084,45145,45746,39084,45145,45746,45339,38956,45746,45339,38956,45746,45339,38956,45746,24309,45145,45746,24309,45145,45746,24309,45145,45746,24309,45145,45746,24309,45145,45746,24309,45145,45746,27009,38956,45746,27009,45145,45746,21769,48786,45746,21769,48786,45746,21769,48786,45746,21769,49150,45746,32542,48786,45746,32542,48786,45746,49150,16383,45746,49150,49150,45746,49150,49150,45746,49150,49150,45746,49150,49150,45746,37031,48786,45746,37031,48786,45746,37031,48786,45746,16383,16383,38507,16383,38956,40639,16383,16383,40639,23565,38956,47448,37031,48786,32128,37031,49150,45746,32542,48786,27873,37031,49150,32128,32542,49150,35533,32542,48786,45746,32542,49150,35533,21769,48786,45746,27009,45145,44043,39084,45145,45746,41946,38956,49150,41946,38956,49150,45339,38956,45746,39084,38956,45746,39084,38956,45746,38898,38956,49150,38898,38956,49150,38898,38956,49150,39084,38956,44043,39084,38956,44043,37557,38956,45746,37557,38956,45746,37557,38956,45746,34983,38956,44043,39084,38956,44043,39084,45145,45746,46699,48422,45746,49150,48422,47022,39729,38956,45746,46699,48422,47022,46590,49150,47022,46590,49150,47022,39729,38956,47022,46699,48422,47022,46699,48422,47022,49150,49150,47022,49150,49150,45746,49150,48422,47022,39084,38956,47022,46590,49150,45746,46590,49150,47022,49150,49150,45746],"packedNormals":[127,127,0,127,127,0,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,37,127,216,37,127,216,37,127,216,37,127,216,127,0,127,127,0,127,127,0,127,127,0,127,37,127,216,37,127,216,37,127,216,37,127,216,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,37,127,37,37,127,37,37,127,37,37,127,37,127,127,254,127,127,254,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,254,127,216,127,216,216,127,216,216,127,216,216,127,216,127,127,254,127,127,254,127,127,254,127,127,254,216,127,216,216,127,216,216,127,216,216,127,216,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,31,127,211,31,127,211,31,127,211,31,127,211,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,0,127,127,37,127,216,37,127,216,37,127,216,37,127,216,127,127,254,127,127,254,127,127,254,127,127,254,186,127,239,186,127,239,186,127,239,186,127,239,254,127,127,254,127,127,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,0,127,127,0,127,127,37,127,216,37,127,216,37,127,216,37,127,216,0,127,127,0,127,127,0,127,127,0,127,127,37,127,216,37,127,216,37,127,216,37,127,216,254,127,127,254,127,127,254,127,127,254,127,127,37,127,37,37,127,37,37,127,37,37,127,37,127,0,127,127,0,127,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,0,127,127,0,127,127,127,254,127,127,254,127,127,254,127,127,0,127,127,0,127,127,0,127,127,0,127,197,21,127,197,21,127,197,21,127,197,21,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,254,127,127,254,127,127,56,232,127,56,232,127,56,232,127,56,232,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,127,0,127,254,127,127,254,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,37,127,216,37,127,216,127,0,127,127,0,127,37,127,216,37,127,216,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,37,127,37,37,127,37,127,127,254,127,127,254,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,127,0,127,127,0,216,127,216,216,127,216,127,127,254,127,127,254,216,127,216,216,127,216,254,127,127,254,127,127,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,31,127,211,31,127,211,127,127,254,127,127,254,0,127,127,0,127,127,37,127,216,37,127,216,127,127,254,127,127,254,186,127,239,186,127,239,254,127,127,254,127,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,0,127,127,0,127,127,37,127,216,37,127,216,0,127,127,0,127,127,37,127,216,37,127,216,254,127,127,254,127,127,37,127,37,37,127,37,127,0,127,127,0,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,0,127,127,0,127,127,127,0,127,127,0,127,197,21,127,197,21,127,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,127,127,254,254,127,127,254,127,127,56,232,127,56,232,127,127,254,127,127,254,127],"m_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1181,0.9329],[0.1186,0.9326],[0.1177,0.9326],[0.1177,0.9329],[0.1163,0.9322],[0.1158,0.9322],[0.1163,0.9318],[0.1158,0.9319],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.122,0.933],[0.123,0.9329],[0.123,0.9326],[0.1216,0.9326],[0.1212,0.933],[0.1216,0.9326],[0.1212,0.9326],[0.1207,0.9326],[0.1211,0.933],[0.1208,0.9326],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1234,0.9419],[0.1238,0.9419],[0.1238,0.9419],[0.1234,0.9419],[0.1216,0.9326],[0.1234,0.9419],[0.1234,0.9419],[0.1216,0.9329],[0.1233,0.9427],[0.1215,0.9329],[0.1216,0.9329],[0.1234,0.9419],[0.1238,0.9419],[0.1238,0.9427],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1215,0.9329],[0.1233,0.9427],[0.1234,0.9427],[0.1216,0.9326],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1181,0.9329],[0.1177,0.9326],[0.1177,0.9326],[0.1177,0.9329],[0.1177,0.9329],[0.1163,0.9322],[0.1163,0.9322],[0.1158,0.9322],[0.1158,0.9322],[0.1163,0.9318],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.122,0.933],[0.122,0.933],[0.123,0.9326],[0.1216,0.9326],[0.1216,0.9326],[0.1212,0.933],[0.1212,0.933],[0.1212,0.933],[0.1216,0.9326],[0.1216,0.9326],[0.1212,0.9326],[0.1212,0.9326],[0.1212,0.9326],[0.1207,0.9326],[0.0,0.0],[0.0,0.0],[0.1234,0.9419],[0.1238,0.9419],[0.1216,0.9326],[0.1234,0.9419],[0.1233,0.9427],[0.1233,0.9427],[0.1216,0.9329],[0.1234,0.9419],[0.1234,0.9419],[0.1238,0.9427],[0.0,0.0],[0.0,0.0],[0.1215,0.9329],[0.1234,0.9427],[0.0,0.0],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,231,3,230,4,5,6,7,8,232,233,9,238,242,10,239,244,11,240,245,12,241,13,14,15,248,16,246,249,236,247,250,234,237,251,243,235,17,18,19,263,20,252,264,21,253,265,22,254,266,23,255,267,24,268,269,25,256,272,26,257,273,27,258,274,28,259,275,29,260,276,30,261,277,31,262,279,278,32,281,33,280,34,270,271,35,36,37,283,38,282,39,40,41,285,42,284,286,43,288,287,44,289,291,45,290,46,47,48,293,49,292,50,51,52,295,53,294,54,55,56,297,57,296,58,59,60,299,61,298,300,62,301,303,63,302,304,64,305,307,65,306,66,67,68,309,69,308,70,71,72,311,73,310,74,75,76,314,77,312,315,78,313,316,79,319,317,80,320,322,81,321,323,318,82,325,83,324,84,85,86,327,87,326,88,89,90,91,92,93,329,94,328,95,96,97,331,98,330,99,100,101,333,102,332,103,104,105,336,106,334,337,107,335,108,109,110,340,111,338,341,112,113,343,339,342,114,115,116,345,117,344,118,119,120,347,121,346,122,123,124,349,125,348,126,127,128,351,129,350,130,131,132,353,133,352,134,135,136,355,137,354,138,139,140,357,141,356,142,143,144,145,146,147,370,148,364,371,358,365,149,150,366,151,372,152,376,153,375,361,154,155,378,156,362,379,359,363,380,367,360,381,157,368,383,373,369,384,377,374,382,158,385,159,160,161,387,162,386,163,164,165,389,166,388,167,168,169,391,170,390,171,172,173,393,174,392,175,176,177,395,178,394,179,180,181,397,182,396,183,184,185,399,186,398,187,188,189,402,190,400,403,191,401,404,192,405,408,193,406,409,194,410,411,195,407,413,196,412,197,198,199,415,200,414,201,202,203,204,205,206,417,207,416,208,209,210,419,211,418,212,213,214,422,215,420,423,216,217,425,421,424,218,219,220,427,221,426,222,223,224,429,225,428,226,227,228,431,229,430]],"m_bones":[],"m_animationClips":[]}}]},{"guid":[1237361744,2766752550,2609897848,3988635486],"revisions":[{"type":"kByteStream","name":"internal","revision":-1,"autoGenerated":true,"rawdata":""}]},{"guid":[3734927216,296110982,2514832286,4186667778],"revisions":[{"type":"kMesh","name":"LowPolyObject","revision":0,"autoGenerated":true,"meshdata":{"name":"LowPolyObject","m_bound":{"m_center":[-35.2504,-6.0001,15.4994],"m_extents":[18.25,9.0,18.25]},"packedVertices":[37742,16383,18178,20800,16383,18178,20800,38956,18178,37742,38956,18178,43764,49150,18178,43764,48786,18178,32991,48786,18178,32991,49150,18178,20222,38956,18178,20222,49150,18178,40222,38956,18178,40222,45145,18178,43764,45145,18178,28502,48786,18178,28502,49150,18178,16383,38956,19974,20222,38956,19974,20222,38956,18178,17178,38956,16832,16383,38956,18178,20800,38956,18178,20800,38956,16832,20800,38956,16832,20800,38956,18178,20800,16383,18178,20800,16383,16832,17178,16383,16832,20800,16383,16832,20800,16383,18178,49150,16383,23565,49150,16383,29449,47355,16383,29449,41968,16383,16383,47355,16383,49150,16383,16383,49150,37742,16383,18178,37742,16383,16383,16383,16383,18178,37742,16383,18178,37742,38956,18178,37742,38956,16383,37742,16383,16383,47355,38956,29449,49150,38956,29449,49150,38956,23565,47355,38956,25323,41968,38956,16383,40222,38956,18178,37742,38956,16383,37742,38956,18178,40222,45145,18178,47355,45145,25323,47355,38956,25323,40222,38956,18178,43764,45145,18178,47355,45145,21769,47355,45145,25323,40222,45145,18178,47355,48786,21769,47355,45145,21769,43764,45145,18178,43764,48786,18178,43764,49150,18178,32991,49150,28951,32991,48786,28951,43764,48786,18178,32991,49150,18178,32991,49150,28951,43764,49150,18178,32991,48786,18178,32991,48786,28951,32991,49150,28951,32991,49150,18178,32991,48786,37031,47355,48786,37031,47355,48786,32542,36582,48786,32542,47355,48786,21769,43764,48786,18178,32991,48786,28951,28502,48786,32542,32991,48786,18178,28502,48786,18178,28502,49150,18178,28502,49150,32542,28502,48786,32542,28502,48786,18178,16383,49150,49150,47355,49150,49150,47355,49150,37031,32991,49150,37031,28502,49150,32542,28502,49150,18178,20222,49150,19974,16383,49150,19974,20222,49150,18178,20222,38956,18178,20222,38956,19974,20222,49150,19974,20222,49150,18178,17178,16383,16832,16383,16383,18178,16383,38956,18178,17178,38956,16832,20800,38956,16832,20800,16383,16832,17178,16383,16832,17178,38956,16832,20222,49150,19974,20222,38956,19974,16383,38956,19974,16383,49150,19974,16383,49150,19974,16383,38956,19974,16383,49150,49150,16383,16383,18178,16383,16383,49150,16383,38956,18178,49150,38956,23565,49150,38956,29449,49150,16383,29449,49150,16383,23565,41968,38956,16383,49150,38956,23565,49150,16383,23565,41968,16383,16383,41968,16383,16383,37742,16383,16383,37742,38956,16383,41968,38956,16383,16383,49150,49150,16383,16383,49150,47355,16383,49150,47355,49150,49150,47355,49150,21769,47355,49150,32542,47355,48786,32542,47355,45145,25323,47355,38956,29449,47355,45145,21769,47355,48786,21769,47355,38956,25323,47355,49150,37031,47355,49150,49150,47355,16383,49150,47355,48786,37031,47355,16383,29449,47355,38956,29449,47355,16383,29449,49150,16383,29449,49150,38956,29449,47355,49150,37031,47355,48786,37031,32991,48786,37031,32991,49150,37031,32991,49150,37031,32991,48786,37031,28502,48786,32542,28502,49150,32542,47355,48786,21769,36582,48786,32542,36582,49150,32542,47355,49150,21769,36582,49150,32542,36582,48786,32542,47355,48786,32542,47355,49150,32542,36582,49150,32542,47355,49150,32542,47355,49150,21769,28502,49150,16832,28502,48422,16832,26680,48422,16832,20222,38956,16832,26555,49150,16832,26555,49150,18178,26555,49150,16832,20222,38956,16832,20222,38956,18178,20800,38956,16832,20800,38956,18178,20222,38956,18178,20222,38956,16832,26680,48422,16832,26680,48422,18178,20800,38956,18178,20800,38956,16832,28502,48422,16832,28502,48422,18178,26680,48422,18178,26680,48422,16832,28502,49150,16832,28502,49150,18178,28502,48422,18178,28502,48422,16832,26555,49150,18178,28502,49150,18178,28502,49150,16832,26555,49150,16832,26555,49150,18178,20222,38956,18178,20800,38956,18178,26680,48422,18178,28502,48422,18178,28502,49150,18178,37742,16383,18178,20800,38956,18178,20800,38956,18178,20800,38956,18178,37742,38956,18178,37742,38956,18178,43764,49150,18178,43764,48786,18178,43764,48786,18178,32991,48786,18178,32991,48786,18178,20222,49150,18178,20222,49150,18178,20222,49150,18178,20222,49150,18178,20222,49150,18178,20222,49150,18178,40222,38956,18178,40222,45145,18178,43764,45145,18178,43764,45145,18178,28502,48786,18178,28502,48786,18178,28502,48786,18178,16383,38956,19974,16383,38956,19974,20222,38956,18178,20222,38956,18178,17178,38956,16832,17178,38956,16832,17178,38956,16832,20800,38956,18178,20800,38956,16832,20800,16383,18178,17178,16383,16832,17178,16383,16832,20800,16383,18178,20800,16383,18178,49150,16383,23565,47355,16383,29449,47355,16383,29449,41968,16383,16383,41968,16383,16383,41968,16383,16383,41968,16383,16383,47355,16383,49150,16383,16383,49150,16383,16383,49150,16383,16383,49150,16383,16383,49150,37742,16383,18178,37742,16383,18178,37742,16383,18178,37742,38956,16383,47355,38956,29449,49150,38956,23565,49150,38956,23565,47355,38956,25323,47355,38956,25323,41968,38956,16383,41968,38956,16383,40222,38956,18178,40222,38956,18178,37742,38956,16383,40222,45145,18178,47355,38956,25323,43764,45145,18178,47355,45145,25323,47355,48786,21769,43764,45145,18178,43764,49150,18178,32991,48786,28951,32991,48786,18178,32991,49150,28951,32991,48786,37031,32991,48786,37031,32991,48786,37031,47355,48786,32542,36582,48786,32542,36582,48786,32542,36582,48786,32542,43764,48786,18178,32991,48786,28951,32991,48786,28951,32991,48786,28951,28502,48786,32542,28502,48786,32542,32991,48786,18178,28502,49150,18178,28502,48786,32542,16383,49150,49150,16383,49150,49150,16383,49150,49150,16383,49150,49150,16383,49150,49150,47355,49150,37031,32991,49150,37031,28502,49150,32542,28502,49150,18178,28502,49150,18178,20222,49150,19974,20222,49150,19974,20222,38956,18178,20222,49150,19974,17178,16383,16832,16383,38956,18178,20800,38956,16832,20800,38956,16832,17178,16383,16832,20222,49150,19974,16383,38956,19974,16383,38956,19974,16383,38956,19974,16383,49150,49150,16383,49150,49150,16383,16383,18178,16383,16383,18178,49150,38956,23565,49150,16383,29449,41968,38956,16383,49150,16383,23565,41968,16383,16383,37742,38956,16383,16383,49150,49150,47355,16383,49150,47355,49150,21769,47355,49150,21769,47355,49150,21769,47355,48786,32542,47355,48786,32542,47355,48786,32542,47355,48786,32542,47355,45145,25323,47355,45145,25323,47355,45145,25323,47355,38956,29449,47355,38956,29449,47355,45145,21769,47355,49150,37031,47355,16383,49150,47355,16383,49150,47355,48786,37031,47355,48786,37031,47355,16383,29449,47355,16383,29449,47355,38956,29449,49150,16383,29449,47355,49150,37031,32991,48786,37031,32991,49150,37031,28502,48786,32542,47355,48786,21769,36582,49150,32542,36582,49150,32542,47355,48786,32542,28502,49150,16832,26680,48422,16832,26680,48422,16832,26680,48422,16832,20222,38956,16832,26555,49150,16832,26555,49150,18178,20222,38956,16832,20800,38956,16832,20222,38956,18178,26680,48422,16832,20800,38956,18178,28502,48422,16832,26680,48422,18178,28502,49150,16832,28502,48422,18178,26555,49150,18178,28502,49150,16832,26555,49150,18178,26555,49150,18178,26555,49150,18178,20800,38956,18178,26680,48422,18178,28502,48422,18178],"packedNormalsm_uvs":[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1159,0.939],[0.1162,0.939],[0.1162,0.939],[0.1159,0.939],[0.1159,0.939],[0.1163,0.939],[0.1162,0.939],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1184,0.9387],[0.1185,0.9387],[0.1186,0.9387],[0.1184,0.9387],[0.118,0.939],[0.1177,0.939],[0.1177,0.939],[0.1177,0.939],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1162,0.939],[0.1162,0.9315],[0.1159,0.9315],[0.1159,0.939],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1168,0.9423],[0.1168,0.9419],[0.1167,0.9419],[0.1162,0.939],[0.1167,0.9423],[0.1167,0.9423],[0.1167,0.9423],[0.1162,0.939],[0.1162,0.939],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1167,0.9419],[0.1167,0.9419],[0.1163,0.939],[0.1162,0.939],[0.1168,0.9419],[0.1168,0.9419],[0.1167,0.9419],[0.1167,0.9419],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1159,0.939],[0.1159,0.939],[0.1162,0.939],[0.1162,0.939],[0.1159,0.939],[0.1159,0.939],[0.1159,0.939],[0.1163,0.939],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1184,0.9387],[0.1186,0.9387],[0.1186,0.9387],[0.1184,0.9387],[0.1184,0.9387],[0.118,0.939],[0.118,0.939],[0.1177,0.939],[0.1177,0.939],[0.1177,0.939],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1162,0.939],[0.1162,0.939],[0.1159,0.9315],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.1168,0.9423],[0.1167,0.9419],[0.1167,0.9419],[0.1167,0.9419],[0.1162,0.939],[0.1167,0.9423],[0.1167,0.9423],[0.1162,0.939],[0.0,0.0],[0.0,0.0],[0.1167,0.9419],[0.1163,0.939],[0.1168,0.9419],[0.1167,0.9419],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]],"packedWeights":[],"packedIndices":[[0,1,2,206,3,205,4,5,6,214,7,211,207,8,9,216,209,208,217,10,210,218,11,222,219,12,223,220,13,224,226,212,225,227,215,213,221,14,228,15,16,17,231,18,229,233,19,230,20,21,234,235,232,236,22,23,24,238,25,237,26,27,28,29,30,31,244,32,243,245,33,246,250,34,247,251,35,248,255,36,249,252,241,256,253,239,242,254,37,240,38,39,40,258,41,257,42,43,44,260,45,259,261,46,262,264,47,263,265,48,266,268,49,267,50,51,52,270,53,269,54,55,56,272,57,271,58,59,60,274,61,273,62,63,64,276,65,275,66,67,68,69,70,71,278,72,277,73,74,75,282,76,279,283,77,78,286,79,284,287,280,285,288,80,281,289,81,290,292,82,291,83,84,85,294,86,293,87,88,89,300,90,295,301,91,296,302,92,297,303,93,298,305,94,299,95,306,304,96,97,98,308,99,307,100,101,102,310,103,309,104,105,106,313,107,311,108,109,110,315,111,314,112,113,114,115,116,318,319,316,320,317,117,321,118,119,120,323,121,322,122,123,124,325,125,324,126,127,128,327,129,326,130,131,132,329,133,328,134,135,136,333,137,330,334,138,337,338,139,331,342,140,332,141,339,340,142,143,144,344,145,343,345,146,346,348,335,347,349,341,336,147,148,149,351,150,350,151,152,153,353,154,352,155,156,157,355,158,354,159,160,161,357,162,356,163,164,165,359,166,358,167,168,169,170,171,172,361,312,173,364,174,362,365,360,363,175,176,177,367,178,366,179,180,181,369,182,368,183,184,185,371,186,370,187,188,189,373,190,372,191,192,193,375,194,374,195,196,197,377,198,376,199,200,201,381,202,378,382,203,379,383,204,380]],"m_bones":[],"m_animationClips":[]}}]}]},{"terrainImport":[]}],"resourceCart":[{"guid":[178831460,3993387922,2964670205,1928225636],"name":"Default","parentGuid":[0,0,0,0],"type":"kGeneric","preload":true,"meta":"{\"sandbox_archive_version\":55}"},{"guid":[3420273076,1898989905,2838226766,2988281017],"name":"Circle","parentGuid":[178831460,3993387922,2964670205,1928225636],"type":"kTexture","preload":true,"meta":"{\"sandbox_archive_version\":53}"},{"guid":[953679908,159793237,2165885860,1104393525],"name":"Dot","parentGuid":[178831460,3993387922,2964670205,1928225636],"type":"kTexture","preload":true,"meta":"{\"sandbox_archive_version\":53}"},{"guid":[1260272136,125914301,2612360310,1584440831],"name":"Hand","parentGuid":[178831460,3993387922,2964670205,1928225636],"type":"kTexture","preload":true,"meta":"{\"sandbox_archive_version\":53}"},{"guid":[1408875543,2012434220,2572961165,2210574015],"name":"Effect","parentGuid":[178831460,3993387922,2964670205,1928225636],"type":"kGeneric","preload":false,"meta":"{\"sandbox_archive_version\":55}"},{"guid":[4220618723,3642312799,3039118611,4250231450],"name":"UI","parentGuid":[0,0,0,0],"type":"kGeneric","preload":false,"meta":"{\"sandbox_archive_version\":55}"},{"guid":[3010702129,3145483288,2681238331,3517088819],"name":"Audio","parentGuid":[0,0,0,0],"type":"kGeneric","preload":false,"meta":"{\"sandbox_archive_version\":55}"},{"guid":[2997337316,1396330421,3116278934,4165874308],"name":"Texture","parentGuid":[0,0,0,0],"type":"kGeneric","preload":false,"meta":"{\"sandbox_archive_version\":55}"},{"guid":[3127037720,2970960143,2900698145,2085295344],"name":"Model","parentGuid":[0,0,0,0],"type":"kGeneric","preload":false,"meta":"{\"sandbox_archive_version\":55}"}],"mapdata":[{"ObjectsLinker":[{"class":"cWorkspace","name":"Archetypes","guid":[2301495294,1274365006,3003438828,1864040556],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cPlayerInstance","name":"Player","guid":[821939657,2231651804,3205518288,3133023722],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cPlayerAvatarInstance","name":"Avatar","guid":[3670432076,2398635970,2367621499,2949327970],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_Head","guid":[1033186593,159990538,3019814765,1051052745],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_R_Hand","guid":[3791436120,30688507,2214428456,4098368567],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_L_Hand","guid":[2489839981,3214230886,2453942848,2460119817],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_Pelvis","guid":[2061788888,2102806310,2613535594,3818270693],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_R_Foot","guid":[1160600371,1166557346,2654268951,2052879972],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_L_Foot","guid":[3804966852,3358673682,2173073183,1753730585],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBlackholeFolderObject","name":"Local","guid":[417325223,2932100337,2430726746,1418825083],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cIndependentObject","name":"Independent","guid":[2488868306,2351582316,2953489696,3905030743],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cCamera","name":"GameCam","guid":[84103587,3005041602,2995448259,4020449929],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cFolderObject","name":"C_Code","guid":[3505660041,1377324444,2607505656,798530734],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cScriptObject","name":"ClientMainScript","guid":[3286834691,760497087,3178050546,2718823107],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cIndependentObject","name":"Independent","guid":[3627004305,3866512638,2620321223,2908859036],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiScreenUiObject","name":"ControlGui","guid":[3152002301,500581670,2834863041,2890838613],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiFigureObject","name":"TouchFig","guid":[2166888536,686704193,2615741217,2673510721],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiButtonObject","name":"JumpBtn","guid":[269643794,976504742,2395271818,3878267745],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiJoystickObject","name":"Joystick","guid":[2678133478,3590734283,2993206887,719544226],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiSurfaceUiObject","name":"NameGui","guid":[4146740280,3784462226,2760327012,2765239408],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiTextObject","name":"NameBarTxt1","guid":[4182480961,1243630445,2505638190,3021140383],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiTextObject","name":"NameBarTxt2","guid":[3408334953,2456570346,2781213355,3640939331],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiSurfaceUiObject","name":"HealthGui","guid":[369634605,1008748531,2745303685,1844355597],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiImageObject","name":"BackgroundImg","guid":[568360428,1629308004,2824114936,747566214],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiImageObject","name":"HealthBarImg","guid":[1838961149,3644411417,3140159949,3227657251],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cIndependentObject","name":"Independent","guid":[2873573351,1645366652,2298632684,4233248422],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cFolderObject","name":"GuideArchetype","guid":[561473259,162807994,2433453766,3209124006],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiScreenUiObject","name":"ClickGuide","guid":[2365122082,899434690,2179617276,3710057178],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiFigureObject","name":"FigBackground","guid":[193533327,97273373,2447791134,1407769823],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiImageObject","name":"ImgDot","guid":[775533922,2914337731,2824470072,1287739025],"spaceId":"kArchetypeSpace","objectType":-440162662},{"class":"cUiImageObject","name":"ImgHand","guid":[3206132332,3936635091,2669444799,1004457278],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiImageObject","name":"ImgCircle","guid":[1289910241,2183086102,2544630924,1952969503],"spaceId":"kArchetypeSpace","objectType":1530668880},{"class":"cUiFigureObject","name":"FigTextBox","guid":[2708136990,3530313139,3204269919,1596665144],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiTextObject","name":"TxtContent","guid":[3313636831,2756263958,2171545255,2669991234],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiButtonObject","name":"BtnClose","guid":[3801986601,3327740245,2585213971,1154776719],"spaceId":"kArchetypeSpace","objectType":524288},{"class":"cScriptObject","name":"GuideEffectScript","guid":[2410717176,3615114731,2482557484,3761060926],"spaceId":"kArchetypeSpace","objectType":0}],"ObjectsData":[{"class":"cWorkspace","name":"Archetypes","guid":[2301495294,1274365006,3003438828,1864040556],"parentGuid":[0,0,0,0],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Archetypes"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sWorkspaceComponent","data":{}},{"id":11,"class":"sConfigPhysicsComponent","data":{"m_collisionGroupMaskFlags":[]}}]},{"class":"cPlayerInstance","name":"Player","guid":[821939657,2231651804,3205518288,3133023722],"parentGuid":[2301495294,1274365006,3003438828,1864040556],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Player"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sRigidBodyComponent","data":{"m_isStatic":false,"m_density":1000.0,"m_frictionRate":-0.0,"m_rough":-0.0,"m_restitution":-0.0,"m_freezeRotation":true,"m_gravityScale":4.0,"m_statusFlag":10}},{"id":20,"class":"sCharacterControllerComponent","data":{"m_jumpUpVelocity":9.8}},{"id":40,"class":"sCharacterStateComponent","data":{"m_respawnTime":3.0,"m_healthDisplayMode":"Always","m_displayName":true}},{"id":50,"class":"sRenderComponent","data":{}},{"id":60,"class":"sNetworkComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{"m_syncRotation":[0.0,0.0,0.0,1.0],"m_distrSimVersion":0}}]},{"class":"cPlayerAvatarInstance","name":"Avatar","guid":[3670432076,2398635970,2367621499,2949327970],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Avatar"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerModelInstanceComponent","data":{"m_head":{"attriValue":"DefaultMale","valueList":["DefaultMale","Male_Head2","Male_Head3"]},"m_clothes":{"attriValue":"DefaultMale","valueList":["DefaultMale","Male_Chest_Naked_01","Male_Chest_TshirtShort_A001","Male_Chest_TshirtShort_A002","Male_Chest_TshirtShort_A003","Male_Chest_TshirtShort_A004","Male_Chest_TshirtShort_A005","Male_Chest_TshirtShort_A006","Male_Chest_TshirtShort_A007","Male_Chest_TshirtShort_A008","Male_Chest_TshirtShort_A009","Male_Chest_TshirtShort_A010","Male_Chest_TshirtShort_B001","Male_Chest_TshirtShort_B002","Male_Chest_TshirtShort_B003","Male_Chest_TshirtShort_B004","Male_Chest_TshirtShort_B005","Male_Chest_TshirtShort_B02001","Male_Chest_TshirtShort_B02002","Male_Chest_TshirtShort_B02003","Male_Chest_TshirtShort_B02004","Male_Chest_TshirtShort_B03001","Male_Chest_TshirtShort_B03002","Male_Chest_TshirtShort_03001","Male_Chest_TshirtShort_03002","Male_Chest_TshirtShort_03003","Male_Chest_TshirtShort_03004","Male_Chest_TshirtShort_03005","Male_Chest_SweaterLong_A001","Male_Chest_SweaterLong_A002","Male_Chest_SweaterLong_A003","Male_Chest_SweaterLong_A004","Male_Chest_SweaterLong_A005","Male_Chest_SweaterLong_A006","Male_Chest_SweaterLong_A007","Male_Chest_SweaterLong_A008","Male_Chest_SweaterLong_A009","Male_Chest_SweaterLong_A010","Male_Chest_SweaterLong_A011","Male_Chest_SweaterLong_A012","Male_Chest_SweaterLong_A013","Male_Chest_SweaterLong_A014","Male_Chest_SweaterLong_A015","Male_Chest_SweaterLong_A016","Male_Chest_SweaterLong_A017","Male_Chest_Jacket_Baseball_A001","Male_Chest_Jacket_Baseball_A002","Male_Chest_Jacket_Baseball_A003","Male_Chest_Jacket_Baseball_A004","Male_Chest_Jacket_Baseball_A005","Male_001Jacket","Male_Jacket_Leis01","RedJacket","Male_Jacket_Leis02","Male_Jacket_Leis03","Male_006Jacket","Male_007Jacket","Male_008Tshirt","Male_009Jacket","Male_010Tshirt","Male_011Tshirt","Male_012Jacket","Male_Chest_Robe_India_001","Male_Chest_JacketIndiaSilk_001","Male_AviatorJacket","Male_MexicJacket","Male_SpaceJacket","Male_BaseballJacket","Male_BaseballJacket_02","Male_UniverJacket","Male_UniverJacket_01","Male_OwlJacket","Male_OwlJacket_02","Male_Chest_ArmorGriffin_001","Male_Chest_ArmorGriffin_002","Unisex_Chest_ArmorIron_001","Unisex_Chest_ArmorIron_002","Male_WendigoJacket","Male_WendigoJacket_02","Male_NutJacket","Male_Chest_UniformPolice_001","Male_Chest_TshitSki_001","Male_Chest_JacketRobtDog_001","Male_Chest_MuscleSuitShark_001","Male_Chest_MuscleSuitShark_002","Male_Chest_TshirtWaste_001","Male_Chest_TshirtWaste_00","Male_Chest_JacketBiker_001","Male_Chest_JacketMotor_001","Male_Chest_TshirtSteam_001","Male_Chest_JacketRobtEva_001","Male_Chest_JacketRobtEva_002","Male_Chest_JacketRobtEva_003","Male_Chest_JacketRobtEva_004","Male_Chest_JacketAI_001","Male_Chest_JacketAI_002","Male_Chest_MadMaxVest_001","Male_Chest_MadMaxVest_002","Male_Chest_MadMaxVest_003","Male_Chest_TshirtCowboy_001","Male_Zombies01Tshirt","Male_Zombies03Jacket","Male_Zombies04Tshirt","Male_Zombies06Jacket","Male_Chest_JacketElf_001","Male_Chest_JacketCasual_001","Male_Chest_TshirtSArmy_001","Male_Chest_UniformSoccer_001","Male_Chest_JacketFire_001","Male_Chest_TshirtSStreetball_01_001","Male_Chest_TshirtSStreetball_02_002","Male_Chest_JacketEnergy_01_001","Male_Chest_SuitSuit_02_001","Male_Chest_SuitSuit_TV_001","Male_Chest_JacketLeisure_001","Male_Chest_ShirtLeisure_001","Male_Chest_TshirtSkater_001","Male_Chest_JacketWaste_002","Male_Chest_JacketWaste_02_002","Male_Chest_SweaterUnicorn_001","Male_Chest_JacketGreenBerets_001","Male_Chest_JacketSnow_01_001","Male_Chest_JacketSnow_01_002"]},"m_trousers":{"attriValue":"DefaultMale","valueList":["DefaultMale","Male_Jeans01Trousers","Male_Leis01Trousers","Male_003Trousers","Male_Leis01Pants","Male_Leis03Trousers","Male_006Trousers","Male_007Trousers","Male_008Trousers","Male_009Trousers","Male_010Trousers","Male_011Trousers","Male_012Pants","Male_Leg_Pants_India_001","Male_Leg_TrousersIndiaSilk_001","Male_AviatorTrousers","Male_AviatorTrousers_02","Male_MexicTrousers","Male_SpaceTrousers","Male_BaseballTrousers","Male_BaseballTrousers_02","Male_UniverTrousers","Male_UniverTrousers_01","Male_OwlTrousers","Male_OwlTrousers_02","Male_Leg_ArmorGriffin_001","Male_Leg_ArmorGriffin_002","Male_Leg_ArmorIron_001","Male_Leg_ArmorIron_002","Male_WendigoTrousers","Male_WendigoTrousers_02","Male_NutTrousers","Male_Leg_PantsLPolice_001","Male_Leg_PantsLPolice_002","Male_Leg_PantsLSki_001","Male_Leg_PantsLRobtDog_001","Male_Leg_TrousersWaste_001","Male_Leg_TrousersWaste_00","Male_Leg_TrousersBiker_001","Male_Leg_TrousersLMotor_001","Male_Leg_TrousersSteam_001","Male_Leg_PantsLRobtEva_001","Male_Leg_PantsLRobtEva_002","Male_Leg_PantsLAI_001","Male_Leg_TrousersMadMax_001","Male_Leg_TrousersMadMax_002","Male_Leg_TrousersCowboy_001","Male_Zombies01Pants","Male_Zombies03Trousers","Male_Zombies04Trousers","Male_Zombies06Trousers","Male_Leg_TrousersElf_001","Male_Leg_TrousersCasual_001","Male_Leg_PantsLArmy_001","Male_Leg_PantsSoccer_001","Male_Leg_FireTrousers","Male_Leg_Streetball_01PantsS","Male_Leg_Energy_01_MPantsS","Male_Leg_BeachShorts_A001","Male_Leg_BeachShorts_A002","Male_Leg_BeachShorts_A003","Male_Leg_BeachShorts_A004","Male_Leg_BeachShorts_A005","Male_Leg_BeachShorts_A006","Male_Leg_BeachShorts_A007","Male_Leg_BeachShorts_A008","Male_Leg_PantsShark_001","Male_Leg_PantsShark_002","Male_Leg_Suit_02_MTrousers","Male_Leg_Suit_TV_MTrousers","Male_Leg_PantsLLeisure_001","Male_Leg_PantsSkater_001","Male_Leg_PantsSWaste_002","Male_Leg_PantsLUnicorn_001","Male_Leg_TrousersGreenBerets_001","Male_Leg_PantsLSnow_01_001","Male_Leg_PantsLSnow_01_002"]},"m_hair":{"attriValue":"DefaultMale","valueList":["DefaultMale","Hair_Brown01M","Hair_Blonde01M","Hair_Blonde02M","Hair_Orange01M","Hair_White01M","Hair_Green01M","Male_Head_Hair_010","Male_Head_Hair_014","Male_Head_Hair_015","Male_Head_Hair_018","Male_Head_Hair_019","Male_Head_Hair_020","Male_Head_Hair_023","Male_Head_Hair_024","Male_Head_Hair_028","Male_Head_Hair_030","Male_Head_Hair_033","Hair_Zombies06_M"]},"m_hairColor":{"attriValue":"","valueList":["DefaultMale","Hair_Male_02","Hair_Male_03","Hair_Male_04","Hair_Male_05","Hair_Male_06","Hair_Male_07","Hair_Male_08","Hair_Male_09","Hair_Male_10","Hair_Male_11","Hair_Male_12","Hair_Male_13","Hair_Male_14","Hair_Male_15","Hair_Male_16","Hair_Male_17","Hair_Male_18","Hair_Male_19","Hair_Male_20","Hair_Male_21","Hair_Male_22","Hair_Male_23","Hair_Male_24"]},"m_hands":{"attriValue":"DefaultMale","valueList":["DefaultMale","Default_Hands","Male_GLeather01","Male_AviatorGloves","Male_SpaceGloves","Male_BaseballGloves","Male_UniverGloves","Male_UniverGloves_01","Male_OwlGloves","Unisex_Hand_GlovesGriffin_001","Unisex_Hand_GlovesIron_001","Male_WendigoGloves","Male_WendigoGloves_02","Unisex_Hand_GlovesSki_001","Unisex_Hand_GlovesRobtDog_001","Male_Hand_GlovesBiker_001","Unisex_Hand_GlovesRobtEva_001","Unisex_Hand_GlovesRobtEva_002","Unisex_Hand_GlovesAI_001","Male_Hand_GlovesSteam_001","Male_Hand_GlovesElf_001","Male_Hand_GlovesFire_001","Male_Hand_GlovesStreetball_001"]},"m_shoes":{"attriValue":"DefaultMale","valueList":["DefaultMale","Male_Feet_Naked_01","LeatherShoe","Male_Leis01Shoes","Unisex_Feet_CanvasShoes_A001","Unisex_Feet_CanvasShoes_A002","Unisex_Feet_CanvasShoes_A003","Unisex_Feet_CanvasShoes_A004","Unisex_Feet_CanvasShoes_A005","Unisex_Feet_CanvasShoes_A006","Unisex_Feet_CanvasShoes_A007","Unisex_Feet_CanvasShoes_A008","Unisex_Feet_CanvasShoes_A009","Unisex_Feet_CanvasShoes_A010","Unisex_Feet_Sneakers_01001","Unisex_Feet_Sneakers_01002","Unisex_Feet_Sneakers_01003","Unisex_Feet_Sneakers_01004","Unisex_Feet_Sneakers_01005","Unisex_Feet_Sneakers_01006","Unisex_Feet_Sneakers_01007","Unisex_Feet_Sneakers_01008","Unisex_Feet_Sneakers_01009","Unisex_Feet_Sneakers_01010","Unisex_Feet_Sneakers_01011","Unisex_Feet_Sneakers_01012","Unisex_Feet_Sneakers_01013","Unisex_Feet_Sneakers_01014","Unisex_Feet_Sneakers_01015","Unisex_Feet_Sneakers_01016","Male_003Shoes","Male_BLeather01","Male_Leis03Shoes","Male_006Shoes","Male_007Shoes","Male_008Shoes","Male_009Shoes","Unisex_Feet_BasketballShoes_003","Male_010Shoes","Male_011Boots","Male_012Boots","Male_Feet_Shoes_India_001","Male_Feet_ShoesIndiaSilk_001","Male_AviatorShoes","Male_MexicBoots","Male_SpaceBoots","Male_BaseballShoes","Male_UniverShoes","Male_UniverShoes_01","Male_OwlBoots","Unisex_Feet_ShoesGriffin_001","Unisex_Feet_ShoesIron_001","Male_WendigoShoes","Male_WendigoShoes_02","Male_NutBoots","Unisex_Feet_ShoesPolice_001","Unisex_Feet_BootsSki_001","Unisex_Feet_ShoesSki_001","Male_Feet_ShoesRobtDog_001","Unisex_Feet_SlippersShark_001","Male_Feet_BootsWaste_001","Male_Feet_BootsBiker_001","Male_Feet_BootsMotor_001","Male_Feet_BootsSteam_001","Unisex_Feet_ShoesRobtEva_001","Unisex_Feet_ShoesRobtEva_002","Unisex_Feet_ShoesAI_001","Male_Feet_BootsMadMax_001","Male_Feet_BootsCowboy_001","Male_Zombies01Shoes","Male_Zombies03Boots","Male_Zombies04Boots","Male_Zombies06Shoes","Male_Feet_BootsElf_001","Male_Feet_ShoesCasual_001","Unisex_Feet_ShoesDiving_001","Unisex_Feet_FinsDiving_001","Unisex_Feet_FinsDiving_002","Unisex_Feet_FinsDiving_003","Unisex_Feet_FinsDiving_004","Unisex_Feet_FinsDiving_005","Unisex_Feet_FinsDiving_006","Unisex_Feet_FinsDiving_007","Unisex_Feet_BootArmy_001","Male_Soccer_001_Shoes","Unisex_Feet_ShoesFire_001","Male_Streetball_01_Shoes","Male_Feet_BootsEnergy_01_M_001","Male_Feet_BootsSuit_02_M_001","Male_Feet_BootsSuit_TV_M_001","Female_Soccer_001_Shoes","Female_waste_04_Shoes","Female_Feet_ShoesLeisure_001","Male_Feet_ShoesLeisure_001","Male_Feet_ShoesSkater_001","Female_Feet_BootsWaste_002","Male_Feet_BootsUnicorn_001","Male_Feet_BootsGreenBerets_001","Male_Feet_BootsSnow_01_001"]},"m_skinColor":{"attriValue":"DefaultMale","valueList":["DefaultMale","Color2","Color3","Color4","Color5","Color6","Color7","Color8","Color9","Color10","Color11","Color12","Color13"]},"m_headAccessory":{"attriValue":"Empty_Head","valueList":["Empty_Head","Male_ComHat_001","Male_ComHat003","Male_ComHat004","Male_ComHat005","Male_ComHat006","Male_ComHat007","Male_ComHat00702","Male_ComHat00703","Unisex_Head_Hat_016","Male_008Hat","Male_010Hat","Male_011Hat","Male_012Hat","Male_Head_Hat_Leisure_001","Male_Head_Hat_Skater_001","Male_Head_ComHelmet_002","Male_ComHelmet003","Male_ComHelmet004","Male_ComHelmet005","Male_013Hat","Female_013Hat","Male_Head_HatCowboy_001","Male_Head_HatCasual_001","Male_AviatorHat","Male_MexicHat","Male_SpaceHelmet","Male_Baseball01Hat","Male_Baseball02Hat","Male_Baseball03Hat","Male_Baseball04Hat","Male_UniverHelmet","Male_UniverHelmet_01","Male_Owl_Helmet","Male_Head_HelmetGriffin_001","Unisex_Head_HelmetIron_001","Male_Wendigo_Helmet","Male_Wendigo_Helmet_02","Male_Nut_Helmet","Male_Head_Hat_Unicorn","Unisex_Head_MaskPolice_001","Unisex_Head_CapPolice_001","Unisex_Head_CapSki_001","Male_Head_HelmetRobtDog_001","Male_Head_HelmetShark_001","Male_Head_HelmetBiker_001","Female_Head_HelmetBiker_001","Female_Head_HelmetMotor_001","Male_Head_HelmetMotor_001","Male_Head_HatSteam_001","Unisex_Head_HelmetRobtEva_001","Unisex_Head_HelmetRobtEva_002","Unisex_Head_HelmetAI_001","Male_Head_HelmetSuit_TV_001","Female_Head_HelmetSuit_TV_001","Male_Head_Hat_India_001","Male_Head_HelmetIndiaSilk_001","Male_Head_HelmetIndiaSilk_002","Unisex_Head_HelmetArmy_001","Unisex_Head_HelmetFire_001","Male_Zombies01Hat","Male_Zombies03_Helmet","Male_Zombies04_Helmet","Male_Zombies06_Hat","Male_Head_HatElf_001","Unisex_Head_HelmetDiving_001","Unisex_Head_HelmetMadMax","Unisex_Head_HelmetGreenBerets","Unisex_Head_HelmetSnow_01_001","Unisex_Head_HatSnow_01_001","Unisex_Head_Headset_001","Unisex_Head_Headset_002","Unisex_Head_Headset_003","Unisex_Head_Headset_004","Unisex_Head_Headset_005","Unisex_Head_Hat_012","Unisex_Head_Hat_013","Unisex_Head_Hat_01401","Unisex_Head_Hat_01402","Unisex_Head_Hat_015"]},"m_faceAccessory":{"attriValue":"Empty_Face","valueList":["Empty_Face","Glasses","Unisex_Head_GlassLeisure_001","Unisex_Head_GlassSkater_001","Unisex_Head_GlassEnergy_001","Female_MadMax_Glasses","Unisex_Head_Glass_00101","Unisex_Head_Glass_00102","Unisex_Head_Glass_00201","Unisex_Head_Glass_00202","Unisex_Head_Glass_00203","Unisex_Head_Glass_003","Unisex_Head_Glass_004","Unisex_Head_Glass_005","Unisex_Head_Glass_006","Unisex_Head_Glass_007","Unisex_Head_Glass_008","Unisex_Head_Glass_010","Unisex_Head_Glass_011","Unisex_Head_Glass_012","Unisex_Head_Glass_013","Unisex_Head_Goggle_001","Unisex_Head_Goggle_002","Unisex_Head_Goggle_003","Unisex_Head_Goggle_004","Unisex_Head_Goggle_005","Unisex_Head_Goggle_006","Unisex_Head_Goggle_007","Unisex_Head_Decoration_00501","Unisex_Head_Decoration_00601","HeadSet","Unisex_Head_MaskMadMax","Unisex_Head_MaskFire_001","Unisex_Head_Mask_001","Unisex_Head_Mask_002","Unisex_Head_Mask_003","Unisex_Head_Mask_004","Unisex_Head_Mask_005","Unisex_Head_Mask_00701","Unisex_Head_Mask_00702","Unisex_Head_Mask_00703","Unisex_Head_Mask_008","Unisex_Head_Mask_00901","Unisex_Head_Mask_00902","Unisex_Head_MaskGreenBerets_001","Unisex_Head_Decoration_00101","Unisex_Head_Decoration_002","Unisex_Head_Decoration_003","Unisex_Head_Decoration_004","Unisex_Head_Earpods_Leisure_001"]},"m_bodyAccessory":{"attriValue":"Empty_Body","valueList":["Empty_Body","Male_AviatorScarf","Male_AviatorScarf_02","Male_AviatorScarf_03","Male_Zombies06_ChestSup","Unisex_Chest_LifeVest_01","Male_009Bag","Male_012Bag","Female_Chest_Hobo_002","Unisex_Body_BagLeisure_001","Male_AviatorBag","Male_MexicUkulele","Male_SpaceBag","Male_BaseballBag","Male_UniverBag","Male_WendigoBag","Unisex_Back_BackpackPolice_001","Unisex_Back_BackpackSki_001","Female_Back_BackpackSteam_001","Unisex_Chest_BackpackEnergy_001","Male_Zombies04Bag","Female_Zombies05Bag","Male_Zombies06Bag","Unisex_Chest_Backpack_00801","Unisex_Chest_Backpack_00901","Unisex_Chest_Backpack_01001","Unisex_Chest_Backpack_01101","Unisex_Chest_Backpack_01201","Unisex_Chest_ShoulderBag_00201","Unisex_Chest_ShoulderBag_00301","Unisex_Chest_ShoulderBag_00401","Unisex_Chest_ShoulderBag_00601","Male_Back_WingsElf_001","Male_Back_WingsUnicorn_001","Unisex_Back_BackpackCasual_001","Unisex_Chest_BagFire_001","Unisex_Chest_BackpackDiving_001","Female_Chest_OxygenDiving_001","Female_Chest_OxygenDiving_002","Male_BchestSup","Male_ComChestSup001","Male_ComChestSup002","Male_ComChestSup003","Unisex_Chest_FlakVestArmy_001","Unisex_Chest_FlakVest_ColaVending","Unisex_Chest_FlakVest_Chalkboard","Unisex_Chest_FlakVest_Light_00101","Unisex_Chest_FlakVest_Light_00102","Unisex_Chest_FlakVest_Pizzabox","Unisex_Chest_FlakVest_Recorder","Unisex_Chest_FlakVestStreetball_001","Unisex_Chest_FlakVestMadMax_001","Unisex_Chest_FlakVestMotor_001","Unisex_Chest_FlakVestGreenBerets_001","Unisex_Chest_FlakVestGreenBerets_002","Unisex_Chest_FlakVestSnow_01_001","LifeBuoy","Unisex_Pelvis_Lifebuoy_Duck_01","Unisex_Pelvis_Lifebuoy_Donut_01","Unisex_Pelvis_Lifebuoy_Donut_02","Unisex_Pelvis_Lifebuoy_Watermelon","Unisex_Pelvis_Lifebuoy_Tire","NutSabre","Male_Pelvis_Cowboy_GunBag","Unisex_BagWaste_002","Watch","Female_CasualWatch","Unisex_Hand_WatchDiving_001","Male_010Wrist","Female_CasualWrist","Male_IndiaSilkWrist","Male_SteamWrist","Male_011Wrist","Unisex_Arm_WristWaste_002","Unisex_Hand_WatchLeisure_01","Unisex_Hand_WatchSkater_01","Unisex_Hand_WristbandSkater_01","Unisex_Hand_WristbandSkater_002","Unisex_Hand_WristbandMadMax_01","Unisex_Hand_WristbandStreetball_01"]},"m_eyes":{"attriValue":"Default_Eyes_M","valueList":["Default_Eyes_M","Idle02_Eyes_M","Idle03_Eyes_M","Idle04_Eyes_M","Idle05_Eyes_M","Idle06_Eyes_M","Idle07_Eyes_M","Idle08_Eyes_M","Idle09_Eyes_M","Idle10_Eyes_M","Idle11_Eyes_M","Idle12_Eyes_M"]},"m_eyesColor":{"attriValue":"","valueList":["DefaultMale","Eyes_C_02","Eyes_C_03","Eyes_C_04","Eyes_C_05","Eyes_C_06","Eyes_C_07","Eyes_C_08","Eyes_C_09"]},"m_brows":{"attriValue":"Default_Eyebrow_M","valueList":["Default_Eyebrow_M","Idle02_Eyebrow_M","Idle03_Eyebrow_M","Idle04_Eyebrow_M","Idle05_Eyebrow_M","Idle06_Eyebrow_M","Idle07_Eyebrow_M","Idle08_Eyebrow_M","Idle09_Eyebrow_M","Idle10_Eyebrow_M","Idle11_Eyebrow_M","Idle12_Eyebrow_M"]},"m_nose":{"attriValue":"Default_Nose_M","valueList":["Default_Nose_M"]},"m_mouth":{"attriValue":"Default_Mouth_M","valueList":["Default_Mouth_M","Idle02_Mouth_M","Idle03_Mouth_M","Idle04_Mouth_M","Idle05_Mouth_M","Idle06_Mouth_M","Idle07_Mouth_M","Idle08_Mouth_M","Idle09_Mouth_M","Idle10_Mouth_M","Idle11_Mouth_M","Idle12_Mouth_M"]},"m_beard":{"attriValue":"Default_Beard_M","valueList":["Default_Beard_M","Beard_01_M","Beard_02_M"]},"m_faceDecoration":{"attriValue":"Default_FaceDecorate_M","valueList":["Default_FaceDecorate_M","Decoration_01_M","Decoration_02_M","Decoration_03_M","Decoration_04_M"]}}},{"id":20,"class":"sAnimationComponent","data":{}},{"id":25,"class":"sPlayerExpressionComponent","data":{}},{"id":45,"class":"sAnimationIKFullBodyComponent","data":{}},{"id":40,"class":"sPlayerModelInstanceRenderComponent","data":{}}]},{"class":"cBoneAnchor","name":"Bone_Head","guid":[1033186593,159990538,3019814765,1051052745],"parentGuid":[3670432076,2398635970,2367621499,2949327970],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-0.0,1.3431,-0.0498],"m_localRotation":[0.5163,-0.4831,-0.5163,0.4831]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_Head"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_Head"}}]},{"class":"cBoneAnchor","name":"Bone_R_Hand","guid":[3791436120,30688507,2214428456,4098368567],"parentGuid":[3670432076,2398635970,2367621499,2949327970],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.42,0.817,-0.0306],"m_localRotation":[-0.141,0.02,0.8559,0.497]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_R_Hand"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_R_Hand"}}]},{"class":"cBoneAnchor","name":"Bone_L_Hand","guid":[2489839981,3214230886,2453942848,2460119817],"parentGuid":[3670432076,2398635970,2367621499,2949327970],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-0.42,0.817,-0.0306],"m_localRotation":[0.8559,0.497,-0.141,0.02]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_L_Hand"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_L_Hand"}}]},{"class":"cBoneAnchor","name":"Bone_Pelvis","guid":[2061788888,2102806310,2613535594,3818270693],"parentGuid":[3670432076,2398635970,2367621499,2949327970],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-0.0,0.786,-0.0674],"m_localRotation":[0.5,-0.5,-0.4999,0.4999]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_Pelvis"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_Pelvis"}}]},{"class":"cBoneAnchor","name":"Bone_R_Foot","guid":[1160600371,1166557346,2654268951,2052879972],"parentGuid":[3670432076,2398635970,2367621499,2949327970],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.1584,0.1195,-0.1073],"m_localRotation":[0.5487,0.5487,0.4459,0.4459]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_R_Foot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_R_Foot"}}]},{"class":"cBoneAnchor","name":"Bone_L_Foot","guid":[3804966852,3358673682,2173073183,1753730585],"parentGuid":[3670432076,2398635970,2367621499,2949327970],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-0.1584,0.1195,-0.1073],"m_localRotation":[0.4459,0.4459,0.5487,0.5487]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_L_Foot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_L_Foot"}}]},{"class":"cBlackholeFolderObject","name":"Local","guid":[417325223,2932100337,2430726746,1418825083],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Local"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cIndependentObject","name":"Independent","guid":[2488868306,2351582316,2953489696,3905030743],"parentGuid":[417325223,2932100337,2430726746,1418825083],"components":[{"id":0,"class":"sIndependentTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Independent"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cCamera","name":"GameCam","guid":[84103587,3005041602,2995448259,4020449929],"parentGuid":[2488868306,2351582316,2953489696,3905030743],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"GameCam"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sCameraComponent","data":{"m_viewPortHeight":454,"m_viewPortWidth":1228,"m_nearClip":0.0296}},{"id":11,"class":"sCameraRenderComponent","data":{}},{"id":20,"class":"sCameraBehaviorComponent","data":{"m_cameraMaxZoomDistance":50.0}},{"id":30,"class":"sAudioListenerComponent","data":{}}]},{"class":"cFolderObject","name":"C_Code","guid":[3505660041,1377324444,2607505656,798530734],"parentGuid":[417325223,2932100337,2430726746,1418825083],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"C_Code"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cScriptObject","name":"ClientMainScript","guid":[3286834691,760497087,3178050546,2718823107],"parentGuid":[3505660041,1377324444,2607505656,798530734],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ClientMainScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 客户端代码入口\r\n-- @script Client Main Function\r\n-- @copyright Lilith Games, Avatar Team\r\nClient:Run()\r\n"}}]},{"class":"cIndependentObject","name":"Independent","guid":[3627004305,3866512638,2620321223,2908859036],"parentGuid":[417325223,2932100337,2430726746,1418825083],"components":[{"id":0,"class":"sIndependentTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Independent"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cUiScreenUiObject","name":"ControlGui","guid":[3152002301,500581670,2834863041,2890838613],"parentGuid":[417325223,2932100337,2430726746,1418825083],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ControlGui"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIScreenRenderComponent","data":{}},{"id":26,"class":"sUiScreenUiComponent","data":{"m_widgetSize":[1920.0,1080.0],"m_order":1,"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,0.0],"m_anchorsY":[0.0,0.0],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0]}}]},{"class":"cUiFigureObject","name":"TouchFig","guid":[2166888536,686704193,2615741217,2673510721],"parentGuid":[3152002301,500581670,2834863041,2890838613],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"TouchFig"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":24,"class":"sUiFigureComponent","data":{"m_widgetSize":[2016.295,889.9224],"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,1.0],"m_anchorsY":[0.0,1.0],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_prePivot":[0.0,0.0],"m_preAnchorsX":[0.0,1.0],"m_preAnchorsY":[0.0,1.0],"m_finalSize":[2000.0001,1551.923],"m_autoScale":true,"m_autoScaleType":"ByParentScale","m_bgColor":[1.0,1.0,1.0,0.0],"m_borderColor":[0.0,0.0,0.0,0.0]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiButtonObject","name":"JumpBtn","guid":[269643794,976504742,2395271818,3878267745],"parentGuid":[3152002301,500581670,2834863041,2890838613],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"JumpBtn"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":26,"class":"sUiButtonComponent","data":{"m_addedSize":[200.0,200.0],"m_widgetSize":[194.1089,194.1089],"m_order":1,"m_pivot":[0.0,0.0],"m_anchorsX":[0.85,0.85],"m_anchorsY":[0.1,0.1],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomRight","m_alignmentPercent":[1.0,0.0],"m_acceptRaycastWhenEdit":true,"m_prePivot":[0.0,0.0],"m_preAnchorsX":[0.85,0.85],"m_preAnchorsY":[0.1,0.1],"m_finalSize":[200.0,200.0],"m_autoScale":true,"m_autoScaleType":"ByParentDiagonal","m_image":{"m_guid":[1381378012,3623568531,2182762728,2959803675],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_fillAmount":0.0,"m_imageColor":[1.0196,1.0196,1.0196,1.0],"m_averageColor":[0.0,0.0,0.0,1.0],"m_averageColorReciprocal":[5.0,5.0,5.0,1.6776]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiJoystickObject","name":"Joystick","guid":[2678133478,3590734283,2993206887,719544226],"parentGuid":[3152002301,500581670,2834863041,2890838613],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Joystick"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":30,"class":"sUiJoystickComponent","data":{"m_widgetSize":[291.1632,291.1632],"m_order":2,"m_pivot":[0.0,0.0],"m_anchorsX":[0.1,0.1],"m_anchorsY":[0.1,0.1],"m_anchor":"kAlignTopLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_prePivot":[0.0,0.0],"m_preAnchorsX":[0.1,0.1],"m_preAnchorsY":[0.1,0.1],"m_finalSize":[300.0,300.0],"m_autoScale":true,"m_autoScaleType":"ByParentDiagonal","m_threshold":0.1,"m_workArea":[230.6141,230.6141],"m_backGround":{"m_guid":[1676341669,384255279,2994375601,539764901],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_handle":{"m_guid":[1309922238,2547074866,2257169120,2540834883],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_arrow":{"m_guid":[3072216954,3382394894,3198588415,2980353886],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_normalized":true}}]},{"class":"cUiSurfaceUiObject","name":"NameGui","guid":[4146740280,3784462226,2760327012,2765239408],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,2.0,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NameGui"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUISurfaceRenderComponent","data":{}},{"id":26,"class":"sUiSurfaceUiComponent","data":{"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,0.0],"m_anchorsY":[0.0,0.0],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_billboard":true,"m_size":[300.0,80.0],"m_disappearDistance":15,"m_originSize":[300.0,80.0]}}]},{"class":"cUiTextObject","name":"NameBarTxt1","guid":[4182480961,1243630445,2505638190,3021140383],"parentGuid":[4146740280,3784462226,2760327012,2765239408],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NameBarTxt1"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":23,"class":"sUiTextComponent","data":{"m_addedSize":[300.0,80.0],"m_widgetSize":[300.0,80.0],"m_anchor":"kAlignBottomLeft","m_oldTreeLevelVersion":true,"m_finalSize":[300.0,80.0],"m_offset":[1.0,6.0],"m_autoScale":true,"m_autoScaleType":"ByParentScale","m_text":"","m_textColor":[0.1291,0.0,0.0,1.0],"m_fontSize":32,"m_wrap":true}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiTextObject","name":"NameBarTxt2","guid":[3408334953,2456570346,2781213355,3640939331],"parentGuid":[4146740280,3784462226,2760327012,2765239408],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NameBarTxt2"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":23,"class":"sUiTextComponent","data":{"m_addedSize":[300.0,80.0],"m_widgetSize":[300.0,80.0],"m_order":1,"m_anchor":"kAlignBottomLeft","m_finalSize":[300.0,80.0],"m_offset":[-2.0,10.0],"m_autoScale":true,"m_autoScaleType":"ByParentScale","m_text":"","m_textColor":[1.0,1.0,1.0,1.0],"m_fontSize":32,"m_wrap":true}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiSurfaceUiObject","name":"HealthGui","guid":[369634605,1008748531,2745303685,1844355597],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,1.9198,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"HealthGui"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUISurfaceRenderComponent","data":{}},{"id":26,"class":"sUiSurfaceUiComponent","data":{"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,0.0],"m_anchorsY":[0.0,0.0],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_billboard":true,"m_size":[160.0,80.0],"m_disappearDistance":50000,"m_originSize":[160.0,80.0]}}]},{"class":"cUiImageObject","name":"BackgroundImg","guid":[568360428,1629308004,2824114936,747566214],"parentGuid":[369634605,1008748531,2745303685,1844355597],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BackgroundImg"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":22,"class":"sUiImageComponent","data":{"m_addedSize":[160.0,31.0],"m_widgetSize":[160.0,31.0],"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,0.0],"m_anchorsY":[0.0,0.0],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_acceptRaycastWhenEdit":true,"m_prePivot":[0.0,0.0],"m_preAnchorsX":[0.0,0.0],"m_preAnchorsY":[0.0,0.0],"m_finalSize":[160.0,31.0],"m_offset":[-0.0,6.0],"m_imagePriSize":[136.0,28.0],"m_textureRef":{"m_guid":[2748549193,222842754,2941154731,726271496],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_imageType":"kSliced","m_fillAmount":0.0,"m_imageColor":[1.0,1.0,1.0,0.9555],"m_averageColor":[0.0,0.0,0.0,1.0],"m_averageColorReciprocal":[1.0,1.0,1.0,5.6666]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiImageObject","name":"HealthBarImg","guid":[1838961149,3644411417,3140159949,3227657251],"parentGuid":[568360428,1629308004,2824114936,747566214],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"HealthBarImg"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":22,"class":"sUiImageComponent","data":{"m_widgetSize":[144.0,12.3999],"m_pivot":[0.0,0.0],"m_anchorsX":[0.05,0.9498],"m_anchorsY":[0.3,0.6998],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_acceptRaycastWhenEdit":true,"m_prePivot":[0.0,0.0],"m_preAnchorsX":[0.05,0.9498],"m_preAnchorsY":[0.3,0.6998],"m_finalSize":[143.968,12.3937],"m_imagePriSize":[124.0,16.0],"m_textureRef":{"m_guid":[364921788,1323712570,2497125887,1146669227],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_imageType":"kSliced","m_fillAmount":0.0,"m_imageColor":[4.5625,1.0,3.1612,1.0],"m_averageColor":[0.0,0.0,0.0,1.0],"m_averageColorReciprocal":[15.9371,1.0,8.2257,1.0]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cIndependentObject","name":"Independent","guid":[2873573351,1645366652,2298632684,4233248422],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sIndependentTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Independent"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cFolderObject","name":"GuideArchetype","guid":[561473259,162807994,2433453766,3209124006],"parentGuid":[2301495294,1274365006,3003438828,1864040556],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"GuideArchetype"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cUiScreenUiObject","name":"ClickGuide","guid":[2365122082,899434690,2179617276,3710057178],"parentGuid":[561473259,162807994,2433453766,3209124006],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ClickGuide"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIScreenRenderComponent","data":{}},{"id":26,"class":"sUiScreenUiComponent","data":{"m_order":100}}]},{"class":"cUiFigureObject","name":"FigBackground","guid":[193533327,97273373,2447791134,1407769823],"parentGuid":[2365122082,899434690,2179617276,3710057178],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"FigBackground"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":24,"class":"sUiFigureComponent","data":{"m_widgetSize":[2041.6667,1000.0],"m_anchorsX":[0.0,1.0],"m_anchorsY":[0.0,1.0],"m_acceptRaycastWhenEdit":true,"m_preAnchorsX":[0.0,1.0],"m_preAnchorsY":[0.0,1.0],"m_finalSize":[2000.0001,1551.923],"m_bgColor":[0.0,0.0,0.0,0.3921],"m_borderColor":[0.0,0.0,0.0,0.3921]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiImageObject","name":"ImgDot","guid":[775533922,2914337731,2824470072,1287739025],"parentGuid":[2365122082,899434690,2179617276,3710057178],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ImgDot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":22,"class":"sUiImageComponent","data":{"m_addedSize":[47.0,47.0],"m_widgetSize":[47.0,47.0],"m_order":1,"m_acceptRaycastWhenEdit":true,"m_finalSize":[47.0,47.0],"m_imagePriSize":[47.0,47.0],"m_textureRef":{"m_guid":[953679908,159793237,2165885860,1104393525],"m_revision":-1,"m_type":"kTexture","m_autoGenerated":false},"m_imageType":"kSliced","m_fillAmount":0.0,"m_averageColor":[0.0,0.0,0.0,1.0],"m_averageColorReciprocal":[1.0,1.0,1.0,1.0428]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiImageObject","name":"ImgHand","guid":[3206132332,3936635091,2669444799,1004457278],"parentGuid":[775533922,2914337731,2824470072,1287739025],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ImgHand"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":22,"class":"sUiImageComponent","data":{"m_addedSize":[151.0,192.0],"m_widgetSize":[151.0,192.0],"m_pivot":[0.3499,1.5],"m_anchorPercent":[0.3499,1.5],"m_acceptRaycastWhenEdit":true,"m_prePivot":[0.3499,1.5],"m_finalSize":[151.0,192.0],"m_imagePriSize":[151.0,192.0],"m_textureRef":{"m_guid":[1260272136,125914301,2612360310,1584440831],"m_revision":-1,"m_type":"kTexture","m_autoGenerated":false},"m_imageType":"kSliced","m_fillAmount":0.0,"m_averageColor":[0.0,0.0,0.0,1.0],"m_averageColorReciprocal":[1.0,1.0,1.0,1.0671]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiImageObject","name":"ImgCircle","guid":[1289910241,2183086102,2544630924,1952969503],"parentGuid":[775533922,2914337731,2824470072,1287739025],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ImgCircle"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":22,"class":"sUiImageComponent","data":{"m_addedSize":[276.0,276.0],"m_widgetSize":[276.0,276.0],"m_order":1,"m_acceptRaycastWhenEdit":true,"m_finalSize":[276.0,276.0],"m_imagePriSize":[276.0,276.0],"m_textureRef":{"m_guid":[3420273076,1898989905,2838226766,2988281017],"m_revision":-1,"m_type":"kTexture","m_autoGenerated":false},"m_imageType":"kSliced","m_fillAmount":0.0,"m_averageColor":[0.0,0.0,0.0,1.0],"m_averageColorReciprocal":[1.0,1.0,1.0,1.1137]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiFigureObject","name":"FigTextBox","guid":[2708136990,3530313139,3204269919,1596665144],"parentGuid":[775533922,2914337731,2824470072,1287739025],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"FigTextBox"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":24,"class":"sUiFigureComponent","data":{"m_addedSize":[400.0,100.0],"m_widgetSize":[400.0,100.0],"m_order":2,"m_anchorsY":[3.0,3.0],"m_acceptRaycastWhenEdit":true,"m_preAnchorsY":[3.0,3.0],"m_finalSize":[400.0,100.0],"m_bgColor":[0.0,0.0,0.0,0.3921],"m_borderColor":[0.0,0.0,0.0,0.3921]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiTextObject","name":"TxtContent","guid":[3313636831,2756263958,2171545255,2669991234],"parentGuid":[2708136990,3530313139,3204269919,1596665144],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"TxtContent"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":23,"class":"sUiTextComponent","data":{"m_addedSize":[200.0,60.0],"m_widgetSize":[200.0,60.0],"m_order":1,"m_acceptRaycastWhenEdit":true,"m_finalSize":[200.0,60.0],"m_text":"","m_textColor":[1.0,1.0,1.0,1.0],"m_fontSize":24}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiButtonObject","name":"BtnClose","guid":[3801986601,3327740245,2585213971,1154776719],"parentGuid":[775533922,2914337731,2824470072,1287739025],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BtnClose"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":26,"class":"sUiButtonComponent","data":{"m_addedSize":[140.0,140.0],"m_widgetSize":[140.0,140.0],"m_order":3,"m_acceptRaycastWhenEdit":true,"m_finalSize":[140.0,140.0],"m_alpha":0.0,"m_fillAmount":0.0}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cScriptObject","name":"GuideEffectScript","guid":[2410717176,3615114731,2482557484,3761060926],"parentGuid":[2365122082,899434690,2179617276,3710057178],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"GuideEffectScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"---引导系统-客户端表现\r\n---@script Guide effect\r\n---@copyright Lilith Games, Avatar Team\r\n---@author Sid Zhang\r\n\r\nlocal root = script.Parent\r\nlocal tweenerHand = Tween:TweenProperty(root.ImgDot.ImgHand, {Pivot = Vector2(0.35, 1)}, 0.5, Enum.EaseCurve.Linear)\r\nlocal tweenerCircle =\r\n    Tween:TweenProperty(root.ImgDot.ImgCircle, {Size = Vector2(276, 276), Alpha = 0}, 0.5, Enum.EaseCurve.Linear)\r\n\r\n::Repeat::\r\n--重置UI位置与状态\r\nroot.ImgDot.ImgHand.Pivot = Vector2(0.35, 1.5)\r\nroot.ImgDot.ImgCircle.Size = Vector2(48, 48)\r\nroot.ImgDot.ImgCircle.Alpha = 1\r\ntweenerHand:Play()\r\ntweenerHand:WaitForComplete()\r\ntweenerCircle:Play()\r\ntweenerCircle:WaitForComplete()\r\ngoto Repeat\r\n"}}]}]},{"ObjectsLinker":[{"class":"cWorkspace","name":"World","guid":[1981988479,3555894,2597800867,69741929],"spaceId":"kDefaultSpace","objectType":0},{"class":"cWorkspace","name":"Global","guid":[344576033,1668630255,2683907297,2226597768],"spaceId":"kDefaultSpace","objectType":0},{"class":"cDataStoreObject","name":"DataStore","guid":[3161908908,3361359298,2468494744,1705162253],"spaceId":"kDefaultSpace","objectType":0},{"class":"cScriptObject","name":"LuaFunctionScript","guid":[2783201338,2636205455,2564339011,1843429949],"spaceId":"kDefaultSpace","objectType":0},{"class":"cScriptObject","name":"ModuleRequireScript","guid":[789428111,3886039363,2156446074,3559120475],"spaceId":"kDefaultSpace","objectType":0},{"class":"cScriptObject","name":"AutoAssignTeamScript","guid":[811022213,2158838612,2670341129,820752393],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Utility","guid":[626626282,3227665360,2471910562,2840544587],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ModuleUtilModule","guid":[1931854124,2576109163,2694171240,1407146350],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"NetUtilModule","guid":[877830752,869352727,3042692887,2948948613],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"CsvUtilModule","guid":[974164082,3633467084,2781912883,1451329930],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"XlsUtilModule","guid":[2760847323,3965272240,2950769927,3980104073],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"EventUtilModule","guid":[2566228644,2776910007,2667900515,194242277],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"TimeUtilModule","guid":[3212895662,3876605484,2451409624,1852532118],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"LogUtilModule","guid":[1448450812,1700152430,3083838744,455591299],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"CamUtilModule","guid":[1786588942,1014908186,2189044832,747029913],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"UuidModule","guid":[4157188643,3705227052,3158561090,4053995093],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"LuaJsonUtilModule","guid":[1171767027,1956007823,2562650671,2698147667],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ObjPoolUtilModule","guid":[2729864637,1304447132,2322341388,2859273176],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"SoundUtilModule","guid":[375943343,233195050,2377557310,1976802289],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"LinkedListModule","guid":[572803863,1537884583,2902871108,3023603150],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"GlobalFuncModule","guid":[397078907,1337606489,2918347355,1376574677],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"TweenControllerModule","guid":[3340226311,3486273272,3143424947,180252541],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ValueChangeUtilModule","guid":[506887186,2798406641,2460390889,2104928690],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Framework","guid":[756373066,1240223530,2766704094,915472147],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"FrameworkConfigModule","guid":[3532304481,3064676706,3106629846,811992798],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ServerHeartbeatModule","guid":[4201358790,153109338,3063225923,2088318747],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ClientHeartbeatModule","guid":[2448379167,2886812809,2770381150,2704067643],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ServerModule","guid":[2630836918,4157751681,2512528126,1629800954],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ClientModule","guid":[2395017761,2395361208,3179134946,4246078414],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ServerBaseModule","guid":[2864628079,2098938141,2169623745,1280720590],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ClientBaseModule","guid":[1957111763,3183362511,3175239265,4168800515],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Plugin","guid":[2555489138,626346364,2851147263,1364204280],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"FUNC_Guide","guid":[684900468,2789166335,2666626870,2188212943],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"GuideSystemModule","guid":[2070445638,524698677,3104412276,3887386575],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Define","guid":[2737473538,3344386760,2691081356,600893088],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"GlobalDataModule","guid":[1468398307,3695920924,2815319038,3596233864],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ConstModule","guid":[2512024877,1669350945,3212507937,4057137757],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"EventsModule","guid":[3985164048,3143978161,3122137539,183444988],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ConfigModule","guid":[2110201861,617827622,2622314683,2453149769],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Module","guid":[1574945571,3461236255,2335300488,1410656948],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"S_Module","guid":[760758812,3011002765,2609222735,3236427035],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"C_Module","guid":[3651921500,3839968525,2765586875,2228388046],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"LanguageUtilModule","guid":[1327910891,3901181274,2716120486,2266956693],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"PlayerGuiDefaultModule","guid":[664667402,21253351,2924081121,1278400519],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"PlayerControlModule","guid":[1899466661,1113342787,2889724115,878688312],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Cls_Module","guid":[522079265,1772703138,3001358313,3723987968],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Editor_Module","guid":[1822279021,412438229,2868384553,280931416],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Xls","guid":[3561931272,2228374286,3075622864,2620868908],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"Example1XlsModule","guid":[1154807438,2590788022,3089941547,2078280727],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"Example2XlsModule","guid":[3966878609,3696577721,2175744138,2596481351],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"GlobalSettingXlsModule","guid":[915862330,741691007,3064296356,1451895238],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"LanguagePackXlsModule","guid":[700825784,2334608193,2463848717,1647971739],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"SoundXlsModule","guid":[3708642180,138366140,2150857251,245324002],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Csv","guid":[294313154,1450328249,2442680246,272497625],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"S_Code","guid":[630163054,4187112824,2753371896,1919329423],"spaceId":"kDefaultSpace","objectType":0},{"class":"cScriptObject","name":"ServerMainScript","guid":[344478647,1240680084,3003146376,138016020],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"SpawnLocations","guid":[3060414528,2729002180,2754306229,2661207025],"spaceId":"kDefaultSpace","objectType":0},{"class":"cStartPortal","name":"StartPortal00","guid":[2311234828,1873955616,2655392405,2525362369],"spaceId":"kDefaultSpace","objectType":0},{"class":"cStartPortal","name":"StartPortal01","guid":[2880873389,3573762209,2456263445,1546252123],"spaceId":"kDefaultSpace","objectType":0},{"class":"cStartPortal","name":"StartPortal02","guid":[3258803195,2884980247,2417960272,149547500],"spaceId":"kDefaultSpace","objectType":0},{"class":"cStartPortal","name":"StartPortal03","guid":[4114460255,208751620,2876153555,2633735762],"spaceId":"kDefaultSpace","objectType":0},{"class":"cAudioSource","name":"BGM","guid":[1596674502,2319271992,2900844459,2801180766],"spaceId":"kDefaultSpace","objectType":-842150451},{"class":"cSkydome","name":"Sky","guid":[3956874685,1991789763,3220541584,1456680764],"spaceId":"kDefaultSpace","objectType":-842150451},{"class":"cFolderObject","name":"Players","guid":[3397398191,850542637,3138524115,1333674022],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[718760084,1257915969,2962466066,2150526306],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[438081159,4019275113,2394302102,997050187],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[154289415,229392516,2254790969,287930189],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[1151332762,2713075851,2532352188,4124889855],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[784260868,2609333952,2774312238,2440002730],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[36220398,4069804567,3087648968,1513344952],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[301805571,3183757047,2970218906,1035586513],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[329052330,2108966125,2246354006,3727422990],"spaceId":"kDefaultSpace","objectType":0},{"class":"cTerrainObject","name":"Terrain","guid":[980033814,3447341367,2913170761,3546742988],"spaceId":"kDefaultSpace","objectType":0},{"class":"cStaticSpaceFolderObject","name":"StaticSpace","guid":[2324326883,3665710638,3070246021,2579386889],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"MiniGames","guid":[396515827,708922282,2306289634,3109041923],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_01_Hunt","guid":[2667965429,2403419976,2743456291,2998620951],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_01_Hunt","guid":[2469667971,3052095412,2449968994,2749907796],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_02_WhackAMole","guid":[3198449401,1673938808,2597611757,2930126696],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_02_WhackAMole","guid":[3082382232,1769620559,3011288236,2122890785],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_03_Maze","guid":[3851526498,3707258573,2899238947,1773448565],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_03_Maze","guid":[3907201476,246303561,2322220695,1877762446],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_04_Cannon","guid":[2513975504,1942569189,2500175883,1031199731],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_04_Cannon","guid":[322163096,3438231732,2929137633,707108746],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_05_Frog","guid":[1042911082,1498367273,2799529261,2538951798],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_05_Frog","guid":[3998212685,1680294560,2638195454,85776884],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_06_Zeppelin","guid":[3044858164,4203956316,2157425506,2675753844],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_06_Zeppelin","guid":[2435468848,2367701808,2203545630,403892723],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_07_Flower","guid":[3726188777,4005514020,2993197397,2378683986],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_07_Flower","guid":[739418978,2680179873,2872596382,3938338143],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_08_Snail","guid":[3548721304,2487370205,2637999918,2270470109],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_08_Snail","guid":[2736089631,3125037388,2345441387,18159098],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_09_Race","guid":[4279357843,909721658,2853254141,2395222756],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_09_Race","guid":[3972508465,1974288998,2439495245,2632466339],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_10_Chair","guid":[2951313505,3613541167,3039630149,1835564294],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_10_Chair","guid":[1276226525,4156836961,2328934734,490897331],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"Game_11_MonsterArena","guid":[2385560136,2422555983,3211566810,1962649665],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor_11_MonsterArena","guid":[4258616065,2564309721,2534698110,610198852],"spaceId":"kDefaultSpace","objectType":0}],"ObjectsData":[{"class":"cWorkspace","name":"World","guid":[1981988479,3555894,2597800867,69741929],"parentGuid":[0,0,0,0],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"World"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sWorkspaceComponent","data":{}},{"id":11,"class":"sConfigPhysicsComponent","data":{"m_collisionGroupMaskFlags":[0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]},{"class":"cWorkspace","name":"Global","guid":[344576033,1668630255,2683907297,2226597768],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Global"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sWorkspaceComponent","data":{}},{"id":11,"class":"sConfigPhysicsComponent","data":{"m_collisionGroupMaskFlags":[]}}]},{"class":"cDataStoreObject","name":"DataStore","guid":[3161908908,3361359298,2468494744,1705162253],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"DataStore"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":200,"class":"sDataStoreComponent","data":{"m_dataSheet":[],"m_archive":[]}}]},{"class":"cScriptObject","name":"LuaFunctionScript","guid":[2783201338,2636205455,2564339011,1843429949],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"LuaFunctionScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 提供一组常用函数，以及对 Lua 标准库的扩展\r\n-- @script Lua function extension libraries\r\n-- @author Lilith Games, Avatar Team\r\n-- @see https://wiki.lilithgames.com/x/tSkMAg\r\n\r\n--- 检查并尝试转换为数值，如果无法转换则返回 0\r\n-- @param mixed value 要检查的值\r\n-- @param [integer base] 进制，默认为十进制\r\n-- @return number\r\nfunction checknumber(value, base)\r\n    return tonumber(value, base) or 0\r\nend\r\n\r\n--- 检查是否是有效的number类型\r\n-- @param number\r\nfunction isValidNumber(num)\r\n    return num ~= nil and num > 0\r\nend\r\n\r\n--- 检查并尝试转换为整数，如果无法转换则返回 0\r\n-- @param mixed value 要检查的值\r\n-- @return integer\r\nfunction checkint(value)\r\n    return math.round(checknumber(value))\r\nend\r\n\r\n--- 检查并尝试转换为布尔值，除了 nil 和 false，其他任何值都会返回 true\r\n-- @param mixed value 要检查的值\r\n-- @return boolean\r\nfunction checkbool(value)\r\n    return (value ~= nil and value ~= false)\r\nend\r\n\r\n--- 检查值是否是一个表格，如果不是则返回一个空表格\r\n-- @param mixed value 要检查的值\r\n-- @return table\r\nfunction checktable(value)\r\n    if type(value) ~= 'table' then\r\n        value = {}\r\n    end\r\n    return value\r\nend\r\n\r\n--- 处理对象\r\n-- @param mixed obj Lua 对象\r\n-- @param function method 对象方法\r\n-- @return function\r\nfunction handler(obj, method)\r\n    return function(...)\r\n        return method(obj, ...)\r\n    end\r\nend\r\n\r\n--- 计算表格包含的字段数量\r\n-- Lua table 的 \"#\" 操作只对依次排序的数值下标数组有效，table.nums() 则计算 table 中所有不为 nil 的值的个数。\r\n-- @param table\r\nfunction table.nums(t)\r\n    if t == nil then\r\n        return 0\r\n    end\r\n    local count = 0\r\n    for _ in pairs(t) do\r\n        count = count + 1\r\n    end\r\n    return count\r\nend\r\n\r\n--- 返回指定表格中的所有键\r\n-- @param k-v table\r\n-- @return keys' table\r\n-- @usage example\r\n-- local hashtable = {a = 1, b = 2, c = 3}\r\n-- local keys = table.keys(hashtable)\r\n-- >> keys = {\"a\", \"b\", \"c\"}\r\nfunction table.keys(hashtable)\r\n    local keys = {}\r\n    for k, _ in pairs(hashtable) do\r\n        table.insert(keys, k)\r\n    end\r\n    return keys\r\nend\r\n\r\n--- 返回指定表格中的所有值\r\n-- @param k-v table\r\n-- @return values' table\r\n-- @usage example\r\n-- local hashtable = {a = 1, b = 2, c = 3}\r\n-- local values = table.values(hashtable)\r\n-- >> values = {1, 2, 3}\r\nfunction table.values(hashtable)\r\n    local values = {}\r\n    local i = 1\r\n    for k, v in pairs(hashtable) do\r\n        values[i] = v\r\n        i = i + 1\r\n    end\r\n    return values\r\nend\r\n\r\n--- 将来源表格中所有键及其值复制到目标表格对象中，如果存在同名键，则覆盖其值\r\n-- @param target table\r\n-- @param source table\r\n-- @usage example\r\n-- local dest = {a = 1, b = 2}\r\n-- local src  = {c = 3, d = 4}\r\n-- table.merge(dest, src)\r\n-- >> dest = {a = 1, b = 2, c = 3, d = 4}\r\nfunction table.merge(dest, src)\r\n    for k, v in pairs(src) do\r\n        dest[k] = v\r\n    end\r\nend\r\n\r\n--- 深度将来源表格中所有键及其值复制到目标表格对象中，如果存在同名键，则覆盖其值,如果存在子表,则遍历子表进行复制\r\nfunction table.deepMerge(dest, src)\r\n    for k, v in pairs(src) do\r\n        if type(v) == 'table' then\r\n            if dest[k] == nil then\r\n                dest[k] = {}\r\n            end\r\n            table.deepMerge(dest[k], v)\r\n        else\r\n            dest[k] = v\r\n        end\r\n    end\r\nend\r\n\r\n--- 将来源表格中所有键及其值复制到目标表格对象中，如果存在同名键，则覆盖其值\r\n-- @param ... 多个表，第一个是目标表格\r\n-- @return 返回一个新表\r\n---@author Sharif Ma\r\nfunction table.MergeTables(...)\r\n    local tabs = {...}\r\n    if not tabs or #tabs == 0 then\r\n        return {}\r\n    end\r\n    local origin = {}\r\n    for k, v in pairs(tabs[1]) do\r\n        origin[k] = v\r\n    end\r\n    for i = 2, #tabs do\r\n        if origin then\r\n            if tabs[i] then\r\n                for _, v in pairs(tabs[i]) do\r\n                    table.insert(origin, v)\r\n                end\r\n            end\r\n        else\r\n            origin = tabs[i]\r\n        end\r\n    end\r\n    return origin\r\nend\r\n\r\n--- 在目标表格的指定位置插入来源表格，如果没有指定位置则连接两个表格\r\n-- @param target table\r\n-- @param source table\r\n-- @param start index\r\n-- @usage example #1\r\n-- local dest = {1, 2, 3}\r\n-- local src  = {4, 5, 6}\r\n-- table.insertto(dest, src)\r\n-- >> dest = {1, 2, 3, 4, 5, 6}\r\n-- @usage example #2\r\n-- local dest = {1, 2, 3}\r\n-- local src  = {4, 5, 6}\r\n-- table.insertto(dest, src, 5)\r\n-- >> dest = {1, 2, 3, nil, 4, 5, 6}\r\nfunction table.insertto(dest, src, begin)\r\n    if begin == nil then\r\n        begin = #dest + 1\r\n    else\r\n        begin = checkint(begin)\r\n        if begin <= 0 then\r\n            begin = #dest + 1\r\n        end\r\n    end\r\n\r\n    local len = #src\r\n    for i = 0, len - 1 do\r\n        dest[i + begin] = src[i + 1]\r\n    end\r\nend\r\n\r\n--- 从表格中查找指定值，返回其索引，如果没找到返回 false\r\n-- @param array table\r\n-- @param target value\r\n-- @param start index\r\n-- @return index or false\r\n-- @usage example\r\n-- local array = {\"a\", \"b\", \"c\"}\r\n-- print(table.indexof(array, \"b\"))\r\n-- >> 2\r\nfunction table.indexof(array, value, begin)\r\n    if array ~= nil then\r\n        for i = begin or 1, #array do\r\n            if array[i] == value then\r\n                return i\r\n            end\r\n        end\r\n    end\r\n    return 0\r\nend\r\n\r\n--- 检查表格中是否存在指定值\r\n-- @param array table\r\n-- @param target value\r\n-- @return @boolean\r\nfunction table.exists(array, value)\r\n    return table.indexof(array, value) > 0\r\nend\r\n\r\n--- 清空数组表格\r\n-- @param array table\r\nfunction table.cleararray(array)\r\n    if array ~= nil then\r\n        local count = #array\r\n        while count > 0 do\r\n            table.remove(array, count)\r\n            count = #array\r\n        end\r\n    end\r\nend\r\n\r\n--- 清空k-v表格\r\n-- @param k-v table\r\nfunction table.clearhashtable(hashtable)\r\n    if hashtable ~= nil then\r\n        for k, v in pairs(hashtable) do\r\n            hashtable[k] = nil\r\n        end\r\n    end\r\nend\r\n\r\n--- 清空表格\r\n-- @param table\r\n-- @see table.clearhashtable\r\nfunction table.cleartable(t)\r\n    table.clearhashtable(t)\r\nend\r\n\r\n--- 截取Array其中一段，startIndex从1开始 return截取后的新数组\r\n-- @param table array table\r\n-- @param @number start index\r\n-- @param @number length\r\n-- @return @table array table\r\n-- @usage example\r\n-- local array = {\"a\", \"b\", \"c\", \"d\"}\r\n-- print(table.subArray(array, 2, 2))\r\n-- >> {\"b\", \"c\"}\r\nfunction table.subArray(array, startIndex, length)\r\n    if array ~= nil then\r\n        local count = table.nums(array)\r\n        local tempArray = array\r\n        array = {}\r\n        if startIndex <= count then\r\n            local maxlength = count - startIndex + 1\r\n            length = length > maxlength and maxlength or length\r\n            local endIndex = startIndex + length - 1\r\n            for i = startIndex, endIndex do\r\n                table.insert(array, tempArray[i])\r\n            end\r\n        end\r\n    end\r\n    return array\r\nend\r\n\r\n--- 截取Array的后半段，startIndex从1开始 return截取后的新数组\r\n-- @param table array table\r\n-- @param @number start index\r\n-- @return @table array table\r\nfunction table.subArrayByStartIndex(array, startIndex)\r\n    if array ~= nil then\r\n        local count = table.nums(array)\r\n        local length = count - startIndex + 1\r\n        return table.subArray(array, startIndex, length)\r\n    end\r\n    return array\r\nend\r\n\r\n--- 从表格中查找指定值，返回其 key，如果没找到返回 nil\r\n-- @param table hash table\r\n-- @param any value\r\n-- @return key of value\r\n-- @usage\r\n-- local hashtable = {name = \"dualface\", comp = \"chukong\"}\r\n-- print(table.keyof(hashtable, \"chukong\"))\r\n-- >> comp\r\nfunction table.keyof(hashtable, value)\r\n    for k, v in pairs(hashtable) do\r\n        if v == value then\r\n            return k\r\n        end\r\n    end\r\n    return nil\r\nend\r\n\r\n--- 从表格中删除指定值，返回删除的值的个数\r\n-- @usage\r\n-- local array = {\"a\", \"b\", \"c\", \"c\"}\r\n-- print(table.removebyvalue(array, \"c\", true))\r\n-- >> 输出 2\r\nfunction table.removebyvalue(array, value, removeall)\r\n    local c, i, max = 0, 1, #array\r\n    while i <= max do\r\n        if array[i] == value then\r\n            table.remove(array, i)\r\n            c = c + 1\r\n            i = i - 1\r\n            max = max - 1\r\n            if not removeall then\r\n                break\r\n            end\r\n        end\r\n        i = i + 1\r\n    end\r\n    return c\r\nend\r\n\r\n--- 数组混淆\r\nfunction table.shuffle(_tbl)\r\n    local j\r\n    for i = #_tbl, 2, -1 do\r\n        j = math.random(i)\r\n        _tbl[i], _tbl[j] = _tbl[j], _tbl[i]\r\n    end\r\n    return _tbl\r\nend\r\n\r\n--- 对表格中每一个值执行一次指定的函数，并用函数返回值更新表格内容\r\n-- @param table\r\n-- @param function fn 参数指定的函数具有两个参数，并且返回一个值。原型如下：\r\n-- function map_function(value, key)\r\n--     return value\r\n-- end\r\n-- @usage\r\n-- local t = {name = \"dualface\", comp = \"chukong\"}\r\n-- table.map(t, function(v, k)\r\n--    -- 在每一个值前后添加括号\r\n--    return \"[\" .. v .. \"]\"\r\n-- end)\r\n-- 输出修改后的表格内容\r\n-- for k, v in pairs(t) do\r\n--     print(k, v)\r\n-- end\r\n-- >> 输出\r\n-- name [dualface]\r\n-- comp [chukong]\r\nfunction table.map(t, fn)\r\n    for k, v in pairs(t) do\r\n        t[k] = fn(v, k)\r\n    end\r\nend\r\n\r\n--- 对表格中每一个值执行一次指定的函数，但不改变表格内容\r\n-- @param table\r\n-- @param function fn 参数指定的函数具有两个参数，没有返回值。原型如下：\r\n-- function map_function(value, key)\r\n--     -- no return here\r\n-- end\r\n-- @usage\r\n-- local t = {name = \"dualface\", comp = \"chukong\"}\r\n-- table.walk(t, function(v, k)\r\n--     -- 输出每一个值\r\n--     print(v)\r\n-- end)\r\nfunction table.walk(t, fn)\r\n    for k, v in pairs(t) do\r\n        fn(v, k)\r\n    end\r\nend\r\n\r\n--- 对表格中每一个值执行一次指定的函数，如果该函数返回 false，则对应的值会从表格中删除\r\n-- @param table\r\n-- @param function fn 参数指定的函数具有两个参数，并且返回一个 boolean 值。原型如下：\r\n-- !!!!该方法有局限性，执行后会修改原表格t中值\r\n-- function map_function(value, key)\r\n--     return true or false\r\n-- end\r\n-- @usage\r\n-- local t = {name = \"dualface\", comp = \"chukong\"}\r\n-- table.filter(t, function(v, k)\r\n--     return v ~= \"dualface\" -- 当值等于 dualface 时过滤掉该值\r\n-- end)\r\n-- 输出修改后的表格内容\r\n-- for k, v in pairs(t) do\r\n--     print(k, v)\r\n-- end\r\n-- >> 输出 comp chukong\r\nfunction table.filter(t, fn)\r\n    for k, v in pairs(t) do\r\n        if not fn(v, k) then\r\n            t[k] = nil\r\n        end\r\n    end\r\nend\r\n\r\n--- 找到表格中每个符合matchFunc的条目\r\n-- @param array table\r\n-- @param match function, return T/F\r\n-- @return all elements matched, default is {}\r\nfunction table.findAll(array, matchFunc)\r\n    local ret, idx = {}, 1\r\n    for i = 1, #array do\r\n        if matchFunc(array[i]) then\r\n            ret[idx] = array[i]\r\n            idx = idx + 1\r\n        end\r\n    end\r\n    return ret\r\nend\r\n\r\n--- 找到表格中每个符合matchFunc的条目，并执行walkFunc\r\n-- @param array table\r\n-- @param match function, return T/F\r\n-- @param walk function\r\nfunction table.findAllAndWalk(array, matchFunc, walkFunc)\r\n    for i = 1, #array do\r\n        if matchFunc(array[i]) then\r\n            walkFunc(array[i])\r\n        end\r\n    end\r\nend\r\n\r\n--- 在表格中插入一个新值\r\n-- @param array table\r\n-- @param new element\r\nfunction table.insert_once(T, elem)\r\n    for _, v in ipairs(T) do\r\n        if v == elem then\r\n            return\r\n        end\r\n    end\r\n    table.insert(T, elem)\r\nend\r\n\r\n--- 遍历表格，确保其中的值唯一\r\n-- @function [parent=#table] unique\r\n-- @param table t 表格\r\n-- @param boolean bArray t是否是数组,是数组,t中重复的项被移除后,后续的项会前移\r\n-- @return table#table  包含所有唯一值的新表格\r\n-- @usage\r\n-- 遍历表格，确保其中的值唯一\r\n-- local t = {\"a\", \"a\", \"b\", \"c\"} -- 重复的 a 会被过滤掉\r\n-- local n = table.unique(t)\r\n-- for k, v in pairs(n) do\r\n--     print(v)\r\n-- end\r\n-- >> 输出 a b c\r\nfunction table.unique(t, bArray)\r\n    local check = {}\r\n    local n = {}\r\n    local idx = 1\r\n    for k, v in pairs(t) do\r\n        if not check[v] then\r\n            if bArray then\r\n                n[idx] = v\r\n                idx = idx + 1\r\n            else\r\n                n[k] = v\r\n            end\r\n            check[v] = true\r\n        end\r\n    end\r\n    return n\r\nend\r\n\r\n--- table 深度复制\r\n-- @param table\r\n-- @return a net table with same data\r\nfunction table.deepcopy(object)\r\n    local lookup_table = {}\r\n    local function _copy(object)\r\n        if type(object) ~= 'table' then\r\n            return object\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {}\r\n        lookup_table[object] = new_table\r\n        for key, value in pairs(object) do\r\n            new_table[_copy(key)] = _copy(value)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end\r\n    return _copy(object)\r\nend\r\n\r\n--- table 浅度复制(不处理metatable)\r\nfunction table.shallowcopy(orig)\r\n    local orig_type = type(orig)\r\n    local copy\r\n    if orig_type == 'table' then\r\n        copy = {}\r\n        for orig_key, orig_value in next, orig, nil do\r\n            copy[table.shallowcopy(orig_key)] = table.shallowcopy(orig_value)\r\n        end\r\n    else\r\n        copy = orig\r\n    end\r\n    return copy\r\nend\r\n\r\n--- 获取or创建一个子表\r\nfunction table.need(tb, key)\r\n    if type(tb) == 'table' then\r\n        local subTb = tb[key]\r\n        if subTb == nil then\r\n            subTb = {}\r\n            tb[key] = subTb\r\n        end\r\n        return subTb\r\n    end\r\n    return\r\nend\r\n\r\n--- 打印table中的所有内容\r\n-- @param data table\r\n-- @param @boolean showMetatable 是否显示元表\r\nfunction table.dump(data, showMetatable)\r\n    local result, tab = {}, '    '\r\n    local function _dump(data, showMetatable, lastCount)\r\n        if type(data) ~= 'table' then\r\n            if type(data) == 'string' then\r\n                table.insert(result, '\"')\r\n                table.insert(result, data)\r\n                table.insert(result, '\"')\r\n            else\r\n                table.insert(result, tostring(data))\r\n            end\r\n        else\r\n            --Format\r\n            local count = lastCount or 0\r\n            count = count + 1\r\n            table.insert(result, '{\\n')\r\n            --Metatable\r\n            if showMetatable then\r\n                for i = 1, count do\r\n                    table.insert(result, tab)\r\n                end\r\n                local mt = getmetatable(data)\r\n                table.insert(result, '\"__metatable\" = ')\r\n                _dump(mt, showMetatable, count)\r\n                table.insert(result, ',\\n')\r\n            end\r\n            --Key\r\n            for key, value in pairs(data) do\r\n                for i = 1, count do\r\n                    table.insert(result, tab)\r\n                end\r\n                if type(key) == 'string' then\r\n                    table.insert(result, '\"')\r\n                    table.insert(result, key)\r\n                    table.insert(result, '\" = ')\r\n                elseif type(key) == 'number' then\r\n                    table.insert(result, '[')\r\n                    table.insert(result, key)\r\n                    table.insert(result, '] = ')\r\n                else\r\n                    table.insert(result, tostring(key))\r\n                end\r\n                _dump(value, showMetatable, count)\r\n                table.insert(result, ',\\n')\r\n            end\r\n            --Format\r\n            for i = 1, lastCount or 0 do\r\n                table.insert(result, tab)\r\n            end\r\n            table.insert(result, '}')\r\n        end\r\n        --Format\r\n        if not lastCount then\r\n            table.insert(result, '\\n')\r\n        end\r\n    end\r\n    _dump(data, showMetatable, 0)\r\n\r\n    -- print('dump: \\n' .. table.concat(result))\r\n    return 'dump: \\n' .. table.concat(result)\r\nend\r\n\r\n--- 用指定字符或字符串分割输入字符串，返回包含分割结果的数组\r\n-- @param @string input 输入的字符串\r\n-- @param @string delimiter 分隔符\r\n-- @return array\r\n-- @usage example #1\r\n-- local input = \"Hello,World\"\r\n-- local res = string.split(input, \",\")\r\n-- >> res = {\"Hello\", \"World\"}\r\n-- @usage example #2\r\n-- local input = \"Hello-+-World-+-Quick\"\r\n-- local res = string.split(input, \"-+-\")\r\n-- >> res = {\"Hello\", \"World\", \"Quick\"}\r\nfunction string.split(input, delimiter)\r\n    input = tostring(input)\r\n    delimiter = tostring(delimiter)\r\n    if (delimiter == '') then\r\n        return false\r\n    end\r\n    local pos, arr = 0, {}\r\n    -- for each divider found\r\n    for st, sp in function()\r\n        return string.find(input, delimiter, pos, true)\r\n    end do\r\n        table.insert(arr, string.sub(input, pos, st - 1))\r\n        pos = sp + 1\r\n    end\r\n    table.insert(arr, string.sub(input, pos))\r\n    return arr\r\nend\r\n\r\n--- 判断字符串是否为空或者长度为零\r\n-- @param @string 输入的字符串\r\nfunction string.isnilorempty(inputStr)\r\n    return inputStr == nil or inputStr == ''\r\nend\r\n\r\n--- 去除输入字符串头部的空白字符，返回结果\r\n-- @param @string input\r\n-- @return @string\r\n-- @usage example\r\n-- local input = \"  ABC\"\r\n-- print(string.ltrim(input))\r\n-- >> 输出 ABC，输入字符串前面的两个空格被去掉了\r\n-- 空白字符包括：\r\n-- -   空格\r\n-- -   制表符 \\t\r\n-- -   换行符 \\n\r\n-- -   回到行首符 \\r\r\nfunction string.ltrim(input)\r\n    return string.gsub(input, '^[ \\t\\n\\r]+', '')\r\nend\r\n\r\n--- 去除输入字符串尾部的空白字符，返回结果\r\n-- @param @string input\r\n-- @return @string\r\n-- @usage example\r\n-- local input = \"ABC  \"\r\n-- print(string.rtrim(input))\r\n-- >> 输出 ABC，输入字符串最后的两个空格被去掉了\r\nfunction string.rtrim(input)\r\n    return string.gsub(input, '[ \\t\\n\\r]+$', '')\r\nend\r\n\r\n--- 去掉字符串首尾的空白字符，返回结果\r\n-- @param @string input\r\n-- @return @string\r\nfunction string.trim(input)\r\n    input = string.gsub(input, '^[ \\t\\n\\r]+', '')\r\n    return string.gsub(input, '[ \\t\\n\\r]+$', '')\r\nend\r\n\r\n--- 将字符串的第一个字符转为大写，返回结果\r\n-- @param @string input\r\n-- @return @string\r\n-- @usage example\r\n-- local input = \"hello\"\r\n-- print(string.ucfirst(input))\r\n-- >> 输出 Hello\r\nfunction string.ucfirst(input)\r\n    return string.upper(string.sub(input, 1, 1)) .. string.sub(input, 2)\r\nend\r\n\r\nfunction string.firstToUpper(str)\r\n    return (str:gsub('^%l', string.upper))\r\nend\r\n\r\n--- 计算 UTF8 字符串的长度，每一个中文算一个字符\r\n-- @param @string input\r\n-- @return @number cnt\r\n-- @usage example\r\n-- local input = \"你好World\"\r\n-- print(string.utf8len(input))\r\n-- >> 输出 7\r\nfunction string.utf8len(input)\r\n    local len = string.len(input)\r\n    local left = len\r\n    local cnt = 0\r\n    local arr = {0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc}\r\n    while left ~= 0 do\r\n        local tmp = string.byte(input, -left)\r\n        local i = #arr\r\n        while arr[i] do\r\n            if tmp >= arr[i] then\r\n                left = left - i\r\n                break\r\n            end\r\n            i = i - 1\r\n        end\r\n        cnt = cnt + 1\r\n    end\r\n    return cnt\r\nend\r\n\r\n--- 替换字符串内容\r\n-- @param @string input\r\n-- @param @number start index\r\n-- @param new context\r\n-- @return a new string\r\nfunction string.replace(str, index, char)\r\n    return table.concat {str:sub(1, index - 1), char, str:sub(index + 1)}\r\nend\r\n\r\n--- 检查字符串是否为指定字符串开头\r\n-- @param @string target\r\n-- @param @string start\r\n-- @return @boolean\r\nfunction string.startswith(str, start)\r\n    return str:sub(1, #start) == start\r\nend\r\n\r\n--- 检查字符串是否以指定字符串结尾\r\n-- @param @string target\r\n-- @param @string start\r\n-- @return @boolean\r\nfunction string.endswith(str, ending)\r\n    return ending == '' or str:sub(-(#ending)) == ending\r\nend\r\n\r\n--- 四舍五入\r\n-- @param a number\r\n-- @return a round number\r\nfunction math.round(value)\r\n    return math.floor(value + 0.5)\r\nend\r\n\r\n--- [0, 1]区间限定函数\r\n-- @param a number\r\n-- @return a clamped number\r\nfunction math.clamp01(value)\r\n    return math.min(1, math.max(0, value))\r\nend\r\n\r\n---最小数值和最大数值指定返回值的范围\r\n-- @param a number\r\n-- @param min threshold\r\n-- @param max threshold\r\n-- @return a clamped number\r\nfunction math.Clamp(value, min, max)\r\n    if value < min then\r\n        return min\r\n    end\r\n    if value > max then\r\n        return max\r\n    end\r\n    return value\r\nend\r\n\r\n--- 高斯岁间变量\r\nfunction math.GaussRandom()\r\n    local u = math.random()\r\n    local v = math.random()\r\n    local z = math.sqrt(-2 * math.log(u)) * math.cos(2 * math.pi * v)\r\n    z = (z + 3) / 6\r\n    z = 2 * z - 1\r\n    if (math.abs(z) > 1) then\r\n        return math.GaussRandom()\r\n    end\r\n    return z\r\nend\r\n\r\n--- 数据结构 队列\r\n-- @usage queue example\r\n-- local myQueue = Queue:New()\r\n-- myQueue:Enqueue('a')\r\n-- myQueue:Enqueue('b')\r\n-- myQueue:Enqueue('c')\r\n-- myQueue:PrintElement()\r\n-- print(myQueue:Dequeue())\r\n-- myQueue:PrintElement()\r\n-- myQueue:Clear()\r\n-- myQueue:PrintElement()\r\nQueue = {}\r\nfunction Queue:New()\r\n    local inst = {\r\n        _first = -1,\r\n        _last = -1,\r\n        _size = 0,\r\n        _queue = {}\r\n    }\r\n    setmetatable(inst, {__index = self})\r\n    return inst\r\nend\r\n\r\nfunction Queue:IsEmpty()\r\n    if self._size == 0 then\r\n        return true\r\n    end\r\n    return false\r\nend\r\n\r\nfunction Queue:Enqueue(inElement)\r\n    if self._size == 0 then\r\n        self._first = 0\r\n        self._last = 1\r\n        self._size = 1\r\n        self._queue[self._last] = inElement\r\n    else\r\n        self._last = self._last + 1\r\n        self._queue[self._last] = inElement\r\n        self._size = self._size + 1\r\n    end\r\nend\r\n\r\nfunction Queue:Dequeue()\r\n    if self:IsEmpty() then\r\n        print('Error: the queue is empty')\r\n        return\r\n    end\r\n    self._size = self._size - 1\r\n    self._first = self._first + 1\r\n    local value = self._queue[self._first]\r\n    return value\r\nend\r\n\r\nfunction Queue:Clear()\r\n    self._queue = nil\r\n    self._queue = {}\r\n    self._size = 0\r\n    self._first = -1\r\n    self._last = -1\r\nend\r\n\r\nfunction Queue:Size()\r\n    return self._size or 0\r\nend\r\n\r\nfunction Queue:PrintElement()\r\n    if self._size == 0 then\r\n        print('{}')\r\n    else\r\n        local f = self._first + 1\r\n        local l = self._last\r\n        local str\r\n        local flag = true\r\n        while f ~= l do\r\n            if flag == true then\r\n                str = '{' .. tostring(self._queue[f])\r\n                f = f + 1\r\n                flag = false\r\n            else\r\n                str = str .. ',' .. tostring(self._queue[f])\r\n                f = f + 1\r\n            end\r\n        end\r\n        str = str .. ',' .. tostring(self._queue[l]) .. '}'\r\n        print(str)\r\n    end\r\nend\r\n\r\nfunction Queue:GetValue(index)\r\n    if self:IsEmpty() or index == nil or index == 0 then\r\n        print('Error: Get Value Failure!')\r\n        return\r\n    end\r\n    if index > 0 then\r\n        return self._queue[self._first + index]\r\n    else\r\n        return self._queue[self._last + index + 1]\r\n    end\r\nend\r\n\r\nfunction Queue:GetValues()\r\n    if self:IsEmpty() then\r\n        return\r\n    end\r\n    local data = {}\r\n    for i = self._first + 1, self._last, 1 do\r\n        data[#data + 1] = self._queue[i]\r\n    end\r\n    return data\r\nend\r\n\r\n--- 数据结构 栈\r\n-- @usage example\r\n-- local myStack = Stack:New()\r\n-- myStack:Push(\"a\")\r\n-- myStack:Push(\"b\")\r\n-- myStack:Push(\"c\")\r\n-- myStack:PrintElement()\r\n-- print(myStack:Pop())\r\n-- myStack:PrintElement()\r\n-- myStack:Clear()\r\n-- myStack:PrintElement()\r\nStack = {}\r\nfunction Stack:New()\r\n    local inst = {\r\n        _last = 0,\r\n        _stack = {}\r\n    }\r\n    setmetatable(inst, {__index = self})\r\n\r\n    return inst\r\nend\r\n\r\nfunction Stack:IsEmpty()\r\n    if self._last == 0 then\r\n        return true\r\n    end\r\n    return false\r\nend\r\n\r\nfunction Stack:Push(inElement)\r\n    self._last = self._last + 1\r\n    self._stack[self._last] = inElement\r\nend\r\n\r\nfunction Stack:Pop()\r\n    if self:IsEmpty() then\r\n        --print(\"Error: the stack is empty\")\r\n        return\r\n    end\r\n    local value = self._stack[self._last]\r\n    self._stack[self._last] = nil\r\n    self._last = self._last - 1\r\n    return value\r\nend\r\n\r\nfunction Stack:Exists(element, compairFunc)\r\n    if compairFunc == nil then\r\n        compairFunc = function(a, b)\r\n            return a == b\r\n        end\r\n    end\r\n    for i = self._last, 1, -1 do\r\n        if compairFunc(element, self._stack[i]) then\r\n            return i\r\n        end\r\n    end\r\n    return -1\r\nend\r\n\r\nfunction Stack:RemoveAt(index)\r\n    if index < 1 or index > self._last then\r\n        return\r\n    end\r\n    table.remove(self._stack, index)\r\n    self._last = self._last - 1\r\nend\r\n\r\nfunction Stack:Clear()\r\n    self._stack = nil\r\n    self._stack = {}\r\n    self._last = 0\r\nend\r\n\r\nfunction Stack:Size()\r\n    return self._last\r\nend\r\n\r\nfunction Stack:PrintElement()\r\n    local str = '{'\r\n    for i = self._last, 1, -1 do\r\n        str = str .. tostring(self._stack[i]) .. ','\r\n    end\r\n    str = str .. '}'\r\n    print(str)\r\nend\r\n"}}]},{"class":"cScriptObject","name":"ModuleRequireScript","guid":[789428111,3886039363,2156446074,3559120475],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ModuleRequireScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 将Global.Module目录下每一个用到模块提前require,定义为全局变量\r\n-- @script Module Defines\r\n-- @copyright Lilith Games, Avatar Team\r\n\r\n-- Utilities\r\nModuleUtil = require(Utility.ModuleUtilModule)\r\nLuaJsonUtil = require(Utility.LuaJsonUtilModule)\r\nNetUtil = require(Utility.NetUtilModule)\r\nCsvUtil = require(Utility.CsvUtilModule)\r\nXlsUtil = require(Utility.XlsUtilModule)\r\nEventUtil = require(Utility.EventUtilModule)\r\nUUID = require(Utility.UuidModule)\r\nTweenController = require(Utility.TweenControllerModule)\r\nGlobalFunc = require(Utility.GlobalFuncModule)\r\nLinkedList = Utility.LinkedListModule\r\nValueChangeUtil = require(Utility.ValueChangeUtilModule)\r\nTimeUtil = require(Utility.TimeUtilModule)\r\nTimeUtil.Init()\r\n\r\n-- Framework\r\nModuleUtil.LoadModules(Framework)\r\n\r\n-- Globle Defines, Server and Clinet Modules\r\nModuleUtil.LoadModules(Define)\r\nModuleUtil.LoadXlsModules(Xls, Config)\r\nModuleUtil.LoadModules(Module.S_Module)\r\nModuleUtil.LoadModules(Module.C_Module)\r\nModuleUtil.LoadModules(Module.Cls_Module)\r\n\r\n-- Plugin Modules\r\nGuideSystem = require(world.Global.Plugin.FUNC_Guide.GuideSystemModule)\r\n"}}]},{"class":"cScriptObject","name":"AutoAssignTeamScript","guid":[811022213,2158838612,2670341129,820752393],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"AutoAssignTeamScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 玩家加入\r\n-- @script Auto assign\r\n-- @copyright Lilith Games, Avatar Team\r\n\r\n--- 编辑器默认方法\r\n-- run once when script init\r\nfunction autoAssign()\r\n    local container = world:FindTeams()\r\n    local min = 1\r\n    local teamTojoin = {}\r\n    local playerfolder = world.Players\r\n    for i = 1, #container, 1 do\r\n        if container[i].CurrentMaxMemberNum > 0 then\r\n            temp = container[i].CurrentMemberNum / (container[i].CurrentMaxMemberNum)\r\n            if (temp < min and temp ~= 1) then\r\n                teamTojoin = {}\r\n                min = temp\r\n                table.insert(teamTojoin, container[i])\r\n            elseif temp == min and temp ~= 1 then\r\n                table.insert(teamTojoin, container[i])\r\n            end\r\n        end\r\n    end\r\n    local a = 1\r\n    if #teamTojoin > 0 then\r\n        a = math.random(1, #teamTojoin)\r\n        return teamTojoin[a]\r\n    else\r\n        return nil\r\n    end\r\nend\r\n"}}]},{"class":"cFolderObject","name":"Utility","guid":[626626282,3227665360,2471910562,2840544587],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Utility"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cModuleScriptObject","name":"ModuleUtilModule","guid":[1931854124,2576109163,2694171240,1407146350],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ModuleUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 模块工具\r\n-- @module Module utilities\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Yuancheng Zhang\r\n\r\nlocal ModuleUtil = {}\r\n\r\n--- 加载模块目录\r\n-- @param _root 模块目录的节点\r\n-- @param _scope 载入后脚本的作用域\r\nfunction ModuleUtil.LoadModules(_root, _scope)\r\n    _scope = _scope or _G\r\n    assert(_root, '[ModuleUtil] Node does NOT exist!')\r\n    local tmp = _root:GetChildren()\r\n    for _, v in pairs(tmp) do\r\n        name = (v.Name):gsub('Module', '')\r\n        -- print('[ModuleUtil] Load: ' .. name)\r\n        _scope[name] = require(v)\r\n    end\r\nend\r\n\r\n--- 加载XLS表格目录\r\n-- @param _root 模块目录的节点\r\nfunction ModuleUtil.LoadXlsModules(_root, _config)\r\n    assert(_root, '[ModuleUtil] Node does NOT exist!')\r\n    assert(_config, '[ModuleUtil] Config does NOT exist!')\r\n    local tmp = _root:GetChildren()\r\n    for _, v in pairs(tmp) do\r\n        name = (v.Name):gsub('XlsModule', '')\r\n        print('[ModuleUtil] Load: ' .. name)\r\n        _config[name] = require(v)\r\n    end\r\nend\r\n\r\n--- 加载多个模块目录\r\nfunction ModuleUtil.LoadAllModules(...)\r\n    local args = table.pack(...)\r\n    for i = 1, args.n do\r\n        if args[i] then\r\n            ModuleUtil.LoadModules(args[i])\r\n        end\r\n    end\r\nend\r\n\r\n--- 将有包含特定方法的模块筛选出来，并放在一个table中\r\n-- @param _root 模块目录的节点\r\n-- @param @string _fn 方法名 function_name\r\n-- @param @table _list 存放的table\r\nfunction ModuleUtil.GetModuleListWithFunc(_root, _fn, _list)\r\n    assert(_root, '[ModuleUtil] Node does NOT exist!')\r\n    assert(not string.isnilorempty(_fn), '[ModuleUtil] Function name is nil or empty!')\r\n    assert(_list, '[ModuleUtil] List is NOT initialized!')\r\n    local tmp, name = _root:GetChildren()\r\n    for _, v in pairs(tmp) do\r\n        name = (v.Name):gsub('Module', '')\r\n        if _G[name] and _G[name][_fn] and type(_G[name][_fn]) == 'function' then\r\n            table.insert(_list, _G[name])\r\n        end\r\n    end\r\nend\r\n\r\n--- 新建一个模块实例（ServerBase or ClientBase）\r\nfunction ModuleUtil.New(_name, _baseClass)\r\n    local t = class(_name, _baseClass)\r\n    return t, t:GetSelf()\r\nend\r\n\r\nreturn ModuleUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"NetUtilModule","guid":[877830752,869352727,3042692887,2948948613],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NetUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 网路工具/事件工具\r\n-- @module Network utilities\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Sharif Ma, Yuancheng Zhang, Yen Yuan\r\nlocal NetUtil = {}\r\n\r\n-- 格式化事件参数, Table=>JSON\r\nlocal FormatArgs\r\n\r\n--! 事件参数校验, true:开启校验\r\nlocal valid, ValidateArgs = true\r\n\r\n--! 打印事件日志, true:开启打印\r\nlocal showLog, PrintEventLog = false\r\n\r\nlocal FireEnum = {\r\n    SERVER = 1,\r\n    CLIENT = 2,\r\n    BROADCAST = 3\r\n}\r\n\r\n--! 外部接口\r\n\r\n--- 向服务器发送消息\r\n-- @param @string _eventName 事件的名字(严格对应)\r\n-- @param ... 事件参数\r\nfunction NetUtil.Fire_S(_eventName, ...)\r\n    ValidateArgs(FireEnum.SERVER, _eventName)\r\n    local args = {...}\r\n    world.S_Event[_eventName]:Fire(table.unpack(args))\r\n    PrintEventLog(FireEnum.SERVER, _eventName, nil, args)\r\nend\r\n\r\n--- 向指定的玩家发送消息\r\n-- @param @string _eventName 事件的名字\r\n-- @param _player 玩家对象\r\n-- @param ... 事件参数\r\nfunction NetUtil.Fire_C(_eventName, _player, ...)\r\n\tif(_player == nil) then\r\n\t\treturn\r\n\tend\r\n    ValidateArgs(FireEnum.CLIENT, _eventName, _player)\r\n    local args = {...}\r\n    _player.C_Event[_eventName]:Fire(table.unpack(args))\r\n    PrintEventLog(FireEnum.CLIENT, _eventName, _player, args)\r\nend\r\n\r\n--- 客户端广播\r\n-- @param @string _eventName 事件的名字(严格对应)\r\n-- @param ... 事件参数\r\nfunction NetUtil.Broadcast(_eventName, ...)\r\n    ValidateArgs(FireEnum.BROADCAST, _eventName, ...)\r\n    local args = {...}\r\n    world.Players:BroadcastEvent(_eventName, table.unpack(args))\r\n    PrintEventLog(FireEnum.BROADCAST, _eventName, nil, args)\r\nend\r\n\r\n--! 私有函数\r\n\r\n--- 格式化事件参数\r\nFormatArgs = function(...)\r\n    local args = {...}\r\n    for k, v in pairs(args) do\r\n        if type(v) == 'table' then\r\n            args[k] = string.format('JSON%sJSON', LuaJsonUtil:encode(v))\r\n        end\r\n    end\r\n    return args\r\nend\r\n\r\n--! 辅助功能\r\n\r\n--- 事件参数校验\r\nValidateArgs =\r\n    valid and\r\n    function(_fireEnum, _eventName, _player)\r\n        if _fireEnum == FireEnum.SERVER then\r\n            --! Fire_S 检查参数\r\n            assert(not string.isnilorempty(_eventName), '[NetUtil][Fire_S] 事件名为空')\r\n            assert(world.S_Event[_eventName], string.format('[NetUtil][Fire_S] 服务器不存在事件: %s', _eventName))\r\n        elseif _fireEnum == FireEnum.CLIENT then\r\n            --! Fire_C 检查参数\r\n            assert(not string.isnilorempty(_eventName), '[NetUtil] 事件名为空')\r\n            assert(\r\n                _player and _player.ClassName == 'PlayerInstance',\r\n                string.format('[NetUtil][Fire_C]第2个参数需要是玩家对象, 错误事件: %s', _eventName)\r\n            )\r\n            assert(\r\n                _player.C_Event[_eventName],\r\n                string.format('[NetUtil][Fire_C] 客户端玩家不存在事件: %s, 玩家: %s', _player.Name, _eventName)\r\n            )\r\n        elseif _fireEnum == FireEnum.BROADCAST then\r\n            --! Broadcase 检查参数\r\n            assert(not string.isnilorempty(_eventName), '[NetUtil][Broadcast] 事件名为空')\r\n        end\r\n    end or\r\n    function()\r\n    end\r\n\r\n--- 打印事件日志\r\nPrintEventLog = showLog and function(_fireEnum, _eventName, _player, _args)\r\n        if _fireEnum == FireEnum.SERVER then\r\n            --* Fire_S 参数打印\r\n            print(string.format('[NetUtil][服务器] %s, 参数 = %s, %s', _eventName, #_args, table.dump(_args)))\r\n        elseif _fireEnum == FireEnum.CLIENT then\r\n            --* Fire_C 参数打印\r\n            print(\r\n                string.format(\r\n                    '[NetUtil][客户端] %s, 玩家=%s, 参数 = %s, %s',\r\n                    _eventName,\r\n                    _player.Name,\r\n                    #_args,\r\n                    table.dump(_args)\r\n                )\r\n            )\r\n        elseif _fireEnum == FireEnum.BROADCAST then\r\n            --* Broadcase 参数打印\r\n            print(string.format('[NetUtil][客户端][广播] %s, 参数 = %s, %s', _eventName, #_args, table.dump(_args)))\r\n        end\r\n    end or function()\r\n    end\r\n\r\nreturn NetUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"CsvUtilModule","guid":[974164082,3633467084,2781912883,1451329930],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"CsvUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 读表工具: 将CSV导入成Lua Table，支持单一主键和多主键\r\n-- @module CSV Utility\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Yuancheng Zhang\r\n-- @see https://wiki.lilithgames.com/x/RGEMAg\r\nlocal CsvUtil = {}\r\n\r\n--! 打印事件日志, true:开启打印\r\nlocal showLog, PrintGlobalKV, PrintLog = true\r\n\r\n--- 将表中的字符串改为数字\r\n-- @param _t input table\r\nlocal function StrToNum(_t)\r\n    for k, v in pairs(_t) do\r\n        _t[k] = tonumber(v)\r\n    end\r\n    return _t\r\nend\r\n\r\n--- 类型解析配置表\r\nlocal parser = {\r\n    int = function(_raw)\r\n        return tonumber(_raw)\r\n    end,\r\n    float = function(_raw)\r\n        return tonumber(_raw)\r\n    end,\r\n    string = function(_raw)\r\n        return _raw\r\n    end,\r\n    boolean = function(_raw)\r\n        return string.lower(_raw) == 'true'\r\n    end,\r\n    vector2 = function(_raw)\r\n        return Vector2(table.unpack(StrToNum(string.split(_raw, ','))))\r\n    end,\r\n    vector3 = function(_raw)\r\n        return Vector3(table.unpack(StrToNum(string.split(_raw, ','))))\r\n    end,\r\n    euler = function(_raw)\r\n        return EulerDegree(table.unpack(StrToNum(string.split(_raw, ','))))\r\n    end,\r\n    color = function(_raw)\r\n        return Color(table.unpack(StrToNum(string.split(_raw, ','))))\r\n    end\r\n}\r\n\r\n--- 读取配置表,会根据id生成lua表\r\n-- @param _type String 数据类型\r\n-- @parm _stringValue String 数据\r\n-- @return value 解析出来的数值\r\nlocal function GetValue(_type, _stringValue)\r\n    _type = string.lower(_type)\r\n    assert(parser[_type], string.format('[CsvUtil][GlobalSetting] \"%s\" Type字段的值不是目前所支持的数据类型', _type))\r\n    return parser[_type](_stringValue)\r\nend\r\n\r\n--- 读取配置表,会根据id生成lua表\r\n-- @param _csv 表格\r\n-- @parma ... 表格的主键ids,可以为单一主键或多主键(多主键的id顺序决定lua table的结构)\r\n-- @usage exmaple #1 如果, 单一键值为主键\r\n-- Level.csv 表格内容为:\r\n-- ----------------------------------\r\n-- | String   | String     | Int    |\r\n-- | level_id | level_name | reward |\r\n-- | easy_01  | Level 01   | 100    |\r\n-- | easy_02  | Level 02   | 140    |\r\n-- | hard_01  | Level 03   | 280    |\r\n-- | hard_02  | Level 04   | 320    |\r\n-- ----------------------------------\r\n-- 调用函数 local levelCsv = CsvUtil.GetCsvInfo(Level, 'level_id') 导入的lua表格结果为:\r\n-- levelCsv = {\r\n--     easy_01 = {\r\n--         level_id = 'easy_01',\r\n--         level_name = 'Level 01',\r\n--         reward = 100\r\n--     },\r\n--     easy_02 = {\r\n--         level_id = 'easy_02',\r\n--         level_name = 'Level 02',\r\n--         reward = 140\r\n--     },\r\n--     hard_01 = {\r\n--         level_id = 'hard_01',\r\n--         level_name = 'Level 03',\r\n--         reward = 280\r\n--     },\r\n--     hard_02 = {\r\n--         level_id = 'hard_02',\r\n--         level_name = 'Level 04',\r\n--         reward = 320\r\n--     }\r\n-- }\r\n-- @usage exmaple #2 如果, 多键值为主键\r\n-- Enemy.csv 表格内容为:\r\n-- ----------------------------------\r\n-- | String   | String     | Int    |\r\n-- | enemy_id | difficulty | hp     |\r\n-- | foe_01   | easy       | 100    |\r\n-- | foe_01   | hard       | 150    |\r\n-- | foe_02   | easy       | 300    |\r\n-- | foe_02   | hard       | 400    |\r\n-- ----------------------------------\r\n-- 调用函数 local enemyCsv = CsvUtil.GetCsvInfo(Enemy, 'enemy_id', 'difficulty') 导入的lua表格结果为:\r\n-- enemyCsv = {\r\n--     foe_01 = {\r\n--         easy = {\r\n--             enemy_id = 'foe_01',\r\n--             difficulty = 'easy',\r\n--             hp = 100\r\n--         },\r\n--         hard = {\r\n--             enemy_id = 'foe_02',\r\n--             difficulty = 'hard',\r\n--             hp = 150\r\n--         }\r\n--     },\r\n--     foe_02 = {\r\n--         esay = {\r\n--             enemy_id = 'foe_02',\r\n--             difficulty = 'easy',\r\n--             hp = 300\r\n--         },\r\n--         hard = {\r\n--             enemy_id = 'foe_02',\r\n--             difficulty = 'hard',\r\n--             hp = 400\r\n--         }\r\n--     }\r\n-- }\r\n-- 使用lua table中的数据方法:\r\n-- health = enemyCsv.foe_01.hard.hp 或 health = enemyCsv['foe_01']['hard']['hp']\r\n-- health的值为150\r\nfunction CsvUtil.GetCsvInfo(_csv, ...)\r\n    local rawTable = _csv:GetRows()\r\n    local ids = {...}\r\n    if #ids < 1 or (#ids == 1 and ids[1] == 'Type') then\r\n        -- 默认用Type索引，直接返回\r\n        return rawTable\r\n    end\r\n    local result = {}\r\n    local tmp, key, id, idstr  -- 临时变量\r\n    for _, v in pairs(rawTable) do\r\n        tmp = result\r\n        idstr = {}\r\n        for i = 1, #ids do\r\n            id = ids[i]\r\n            key = v[id]\r\n            idstr[i] = tostring(id) .. ','\r\n            assert(not string.isnilorempty(key), string.format('[CsvUtil] CSV表格没有找到此id, CSV:%s, id: %s', _csv.Name, id))\r\n            if i == #ids then\r\n                -- 最后的键，确定唯一性\r\n                assert(\r\n                    not tmp[key],\r\n                    string.format('[CsvUtil] CSV数据重复, ids不是唯一的, CSV: %s, ids: %s', _csv.Name, table.concat(idstr))\r\n                )\r\n                tmp[key] = v\r\n            else\r\n                -- 多键，之后还有\r\n                if tmp[key] == nil then\r\n                    tmp[key] = {}\r\n                end\r\n                tmp = tmp[key]\r\n            end\r\n        end\r\n    end\r\n    return result\r\nend\r\n\r\n--- 读取Config全局配置表\r\n-- GlobleSetting.csv 表格内容为:\r\n-- ---------------------------------------------------------\r\n-- | String      | String  | String        | String        |\r\n-- | Key         | Type    | Value         | Des           |\r\n-- ---------------------------------------------------------\r\n-- | CubeMax     | Int     | 200           | 最大Cube数     |\r\n-- | BattleTime  | Float   | 5.45          | 战斗时间       |\r\n-- | GameTitle   | String  | Boom Party    | 游戏标题       |\r\n-- | IsFree      | Boolean | true          | 是否免费       |\r\n-- | UiMapOrigin | Vector2 | 3,4           | UI地图原点位置 |\r\n-- | TreePos     | Vector3 | 12,3,-3       | 树的位置       |\r\n-- | TreeRot     | Euler   | 45,90,0       | 树的旋转       |\r\n-- | TreeColor   | Color   | 255,255,255,0 | 树的颜色       |\r\nfunction CsvUtil.GetGlobalCsvInfo(_csv)\r\n    local rawTable = _csv:GetRows()\r\n    if table.nums(rawTable) == 0 then\r\n        return\r\n    end\r\n    assert(rawTable['1'].Key, '[CsvUtil] 全局配置表的没有\"Key\"')\r\n    assert(rawTable['1'].Type, '[CsvUtil] 全局配置表的没有\"Type\"')\r\n    assert(rawTable['1'].Value, '[CsvUtil] 全局配置表的没有\"Value\"')\r\n    local result = {}\r\n    for _, v in pairs(rawTable) do\r\n        result[v.Key] = GetValue(v['Type'], v['Value'])\r\n        PrintGlobalKV(v.Key, v.Type, result[v.Key]) -- * 输出KV键值对\r\n    end\r\n    return result\r\nend\r\n\r\n--- 表格预加载，预加载配置模块：World.Global.Define.ConfigModule\r\nfunction CsvUtil.PreloadCsv(_preloadList, _csvRoot, _config)\r\n    assert(_preloadList and #_preloadList > 0, '[CsvUtil] ConfigModule中没有预加载表格')\r\n    for _, pl in pairs(_preloadList) do\r\n        if not string.isnilorempty(pl.csv) then\r\n            pl.name = string.isnilorempty(pl.name) and pl.csv or pl.name\r\n            PrintLog(string.format('[CsvUtil] Load: %s.csv', pl.csv))\r\n            if pl.csv == 'GlobalSetting' and _csvRoot[pl.csv] then\r\n                _config[pl.name] = CsvUtil.GetGlobalCsvInfo(_csvRoot[pl.csv])\r\n            elseif not string.isnilorempty(pl.csv) and _csvRoot[pl.csv] then\r\n                pl.ids = pl.ids or {}\r\n                _config[pl.name] = CsvUtil.GetCsvInfo(_csvRoot[pl.csv], table.unpack(pl.ids))\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--! 辅助功能\r\n\r\n--- 输出全局变量键值对\r\nPrintGlobalKV =\r\n    showLog and\r\n    function(_key, _type, _value)\r\n        _type = string.lower(_type)\r\n        local showTypes = {\r\n            vector2 = 'Vector2',\r\n            vector3 = 'Vector3',\r\n            euler = 'EulerDegree',\r\n            color = 'Color'\r\n        }\r\n        if showTypes[_type] then\r\n            print(string.format('[CsvUtil][GlobalSetting] %s = %s%s ', _key, showTypes[_type], _value))\r\n        else\r\n            print(string.format('[CsvUtil][GlobalSetting] %s = %s ', _key, _value))\r\n        end\r\n    end or\r\n    function()\r\n    end\r\n\r\nPrintLog = showLog and function(...)\r\n        print(...)\r\n    end or function()\r\n    end\r\n\r\nreturn CsvUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"XlsUtilModule","guid":[2760847323,3965272240,2950769927,3980104073],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"XlsUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 读表工具: 将导入成Lua Table，支持单一主键和多主键\r\n-- @module XLS Utility\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Yuancheng Zhang\r\n-- @see https://wiki.lilithgames.com/x/RGEMAg\r\nlocal XlsUtil = {}\r\n\r\n--! 打印事件日志, true:开启打印\r\nlocal showLog, PrintGlobalKV, PrintLog = true\r\n\r\n--- 将表中的字符串改为数字\r\n-- @param _t input table\r\nlocal function StrToNum(_t)\r\n    for k, v in pairs(_t) do\r\n        _t[k] = tonumber(v)\r\n    end\r\n    return _t\r\nend\r\n\r\n--- 类型解析配置表\r\nlocal parser = {\r\n    int = function(_raw)\r\n        return math.floor(tonumber(_raw))\r\n    end,\r\n    float = function(_raw)\r\n        return tonumber(_raw)\r\n    end,\r\n    string = function(_raw)\r\n        return _raw\r\n    end,\r\n    boolean = function(_raw)\r\n        return string.lower(_raw) == 'true'\r\n    end,\r\n    vector2 = function(_raw)\r\n        return Vector2(table.unpack(StrToNum(string.split(_raw, ','))))\r\n    end,\r\n    vector3 = function(_raw)\r\n        return Vector3(table.unpack(StrToNum(string.split(_raw, ','))))\r\n    end,\r\n    euler = function(_raw)\r\n        return EulerDegree(table.unpack(StrToNum(string.split(_raw, ','))))\r\n    end,\r\n    color = function(_raw)\r\n        return Color(table.unpack(StrToNum(string.split(_raw, ','))))\r\n    end\r\n}\r\n\r\n--- 读取配置表,会根据id生成lua表\r\n-- @param _type String 数据类型\r\n-- @parm _stringValue String 数据\r\n-- @return value 解析出来的数值\r\nlocal function GetValue(_type, _stringValue)\r\n    _type = string.lower(_type)\r\n    assert(parser[_type], string.format('[XlsUtil][GlobalSetting] \"%s\" Type字段的值不是目前所支持的数据类型', _type))\r\n    return parser[_type](_stringValue)\r\nend\r\n\r\n--- 根据id转换lua table\r\nfunction XlsUtil.GetXlsInfo(_xls, ...)\r\n    local ids = {...}\r\n    if #ids < 1 or (#ids == 1 and ids[1] == 'Type') then\r\n        -- 默认用Type索引，直接返回\r\n        return _xls\r\n    end\r\n    local rawTable = _xls\r\n    local result = {}\r\n    local tmp, key, id, idstr  -- 临时变量\r\n    for _, v in pairs(rawTable) do\r\n        tmp = result\r\n        idstr = {}\r\n        for i = 1, #ids do\r\n            id = ids[i]\r\n            key = v[id]\r\n            idstr[i] = tostring(id) .. ','\r\n            assert(\r\n                not string.isnilorempty(key),\r\n                string.format('[XlsUtil] Excel表格没有找到此id, Excel:%s, id: %s', _xls.Name, id)\r\n            )\r\n            if i == #ids then\r\n                -- 最后的键，确定唯一性\r\n                assert(\r\n                    not tmp[key],\r\n                    string.format('[XlsUtil] Excel数据重复, ids不是唯一的, Excel: %s, ids: %s', _xls.Name, table.concat(idstr))\r\n                )\r\n                tmp[key] = v\r\n            else\r\n                -- 多键，之后还有\r\n                if tmp[key] == nil then\r\n                    tmp[key] = {}\r\n                end\r\n                tmp = tmp[key]\r\n            end\r\n        end\r\n    end\r\n    return result\r\nend\r\n\r\n--- 读取Config全局配置表\r\nfunction XlsUtil.GetGlobalXlsInfo(_xls)\r\n    local rawTable = _xls\r\n    if table.nums(rawTable) == 0 then\r\n        return\r\n    end\r\n    assert(rawTable[1].Key, '[XlsUtil] 全局配置表的没有\"Key\"')\r\n    assert(rawTable[1].Type, '[XlsUtil] 全局配置表的没有\"Type\"')\r\n    assert(rawTable[1].Value, '[XlsUtil] 全局配置表的没有\"Value\"')\r\n    local result = {}\r\n    for _, v in pairs(rawTable) do\r\n        result[v.Key] = GetValue(v['Type'], v['Value'])\r\n        PrintGlobalKV(v.Key, v.Type, result[v.Key]) -- * 输出KV键值对\r\n    end\r\n    return result\r\nend\r\n\r\n--- 表格预加载，预加载配置模块：World.Global.Define.ConfigModule\r\nfunction XlsUtil.PreloadXls(_preloadList, _xlsRoot, _config)\r\n    -- todo: load xls lua talbe\r\n    assert(_preloadList and #_preloadList > 0, 'ConfigModule中没有预加载表格')\r\n\r\n    for _, pl in pairs(_preloadList) do\r\n        if not string.isnilorempty(pl.xls) then\r\n            pl.name = string.isnilorempty(pl.name) and pl.xls or pl.name\r\n            pl.module = string.isnilorempty(pl.module) and pl.xls .. 'Xls' or pl.module\r\n            PrintLog(string.format('[XlsUtil] Load: %s', pl.module))\r\n            if pl.xls == 'GlobalSetting' and _xlsRoot[pl.module .. 'Module'] then\r\n                _config[pl.name] = XlsUtil.GetGlobalXlsInfo(_G[pl.module])\r\n            elseif not string.isnilorempty(pl.xls) and _G[pl.module] then\r\n                pl.ids = pl.ids or {}\r\n                _config[pl.name] = XlsUtil.GetXlsInfo(_G[pl.module], table.unpack(pl.ids))\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--! 辅助功能\r\n\r\n--- 输出全局变量键值对\r\nPrintGlobalKV =\r\n    showLog and\r\n    function(_key, _type, _value)\r\n        _type = string.lower(_type)\r\n        local showTypes = {\r\n            vector2 = 'Vector2',\r\n            vector3 = 'Vector3',\r\n            euler = 'EulerDegree',\r\n            color = 'Color'\r\n        }\r\n        if showTypes[_type] then\r\n            print(string.format('[XlsUtil][GlobalSetting] %s = %s%s ', _key, showTypes[_type], _value))\r\n        else\r\n            print(string.format('[XlsUtil][GlobalSetting] %s = %s ', _key, _value))\r\n        end\r\n    end or\r\n    function()\r\n    end\r\n\r\nPrintLog = showLog and function(...)\r\n        print(...)\r\n    end or function()\r\n    end\r\n\r\nreturn XlsUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"EventUtilModule","guid":[2566228644,2776910007,2667900515,194242277],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"EventUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 事件绑定工具\r\n-- @module Event Connects Handler\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Yuancheng Zhang, Yen Yuan\r\nlocal EventUtil = {}\r\n\r\n--- 检查是否为Json化的字符串\r\n-- @param _str @string 输入的字符串\r\n-- @return @boolean true: json table string\r\nlocal function IsJsonTable(_str)\r\n    return type(_str) == 'string' and string.endswith(_str, 'JSON') and string.startswith(_str, 'JSON')\r\nend\r\n\r\n--- 处理Handler的传入参数\r\n--@param variable args\r\n--@return variable args\r\nlocal function ArgsAux(...)\r\n    local _s = {...}\r\n    for k, v in pairs(_s) do\r\n        if IsJsonTable(v) then\r\n            local json = string.sub(v, 5, -5)\r\n            _s[k] = LuaJsonUtil:decode(json)\r\n        end\r\n    end\r\n    return table.unpack(_s)\r\nend\r\n\r\n--- 遍历所有的events,找到module中对应名称的handler,建立Connect\r\n-- @param _eventFolder 事件所在的节点folder\r\n-- @param _module 模块\r\n-- @param _this module的self指针,用于闭包\r\nfunction EventUtil.LinkConnects(_eventFolder, _module, _this)\r\n    assert(\r\n        _eventFolder and _module and _this,\r\n        string.format('[EventUtil] 参数有空值: %s, %s, %s', _eventFolder, _module, _this)\r\n    )\r\n    local events = _eventFolder:GetChildren()\r\n    for _, evt in pairs(events) do\r\n        if string.endswith(evt.Name, 'Event') then\r\n            local handler = _module[evt.Name .. 'Handler']\r\n            if handler ~= nil then\r\n                -- print('[EventUtil]', _eventFolder, _module, evt)\r\n                evt:Connect(\r\n                    function(...)\r\n                        handler(_this, ArgsAux(...))\r\n                    end\r\n                )\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nreturn EventUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"TimeUtilModule","guid":[3212895662,3876605484,2451409624,1852532118],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"TimeUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 时间管理器模块\r\n-- @module Module Time Manager\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Bingyun Chen, Yuancheng Zhang\r\n-- @see the functions defined by JavaScript syntax\r\n\r\nlocal TimeUtil = {}\r\n\r\n-- All registered events\r\nlocal eventList = {}\r\n\r\n-- Current active event list\r\nlocal activeEvents = {}\r\n\r\nlocal running = false\r\n\r\n-- Set update delta time\r\nlocal DELTA_TIME = .05\r\n\r\n--- Find all registered events to trigger\r\nlocal function CheckEvents()\r\n    -- now = os.time()\r\n    local now = Timer.GetTimeMillisecond()\r\n    local i, event = 1\r\n    while i <= #eventList do\r\n        event = eventList[i]\r\n        if event.triggerTime <= now then\r\n            table.insert(activeEvents, event)\r\n            if event.loop then\r\n                event.triggerTime = event.triggerTime + event.delay\r\n                i = i + 1\r\n            else\r\n                table.remove(eventList, i)\r\n            end\r\n        else\r\n            i = i + 1\r\n        end\r\n    end\r\nend\r\n\r\n--- Trigger events\r\nlocal function TriggerEvents()\r\n    local i = 1\r\n    while i <= #activeEvents do\r\n        event = activeEvents[i]\r\n        invoke(event.func)\r\n        table.remove(activeEvents, i)\r\n    end\r\nend\r\n\r\n--- Update\r\nlocal function StartUpdate()\r\n    while running do\r\n        -- print(os.time())\r\n        CheckEvents()\r\n        TriggerEvents()\r\n        wait(DELTA_TIME)\r\n    end\r\nend\r\n\r\n--- Initialization\r\nfunction TimeUtil.Init()\r\n    TimeUtil.Start()\r\nend\r\n\r\n--- Run Update()\r\nfunction TimeUtil.Start()\r\n    running = true\r\n    invoke(StartUpdate)\r\nend\r\n\r\n--- Stop Update()\r\nfunction TimeUtil.Stop()\r\n    running = false\r\nend\r\n\r\n--- Call a function after a specified number of milliseconds,\r\n-- use ClearTimeout() method to prevent the function from running\r\n-- @param _func execution function to call\r\n-- @param _delayTime\r\n-- @return timer id\r\n-- @see https://www.w3schools.com/jsref/met_win_settimeout.asp\r\nfunction TimeUtil.SetTimeout(_func, _seconds)\r\n    assert(_func, '[TimeUtil] TimeUtil.SetTimeout() _func 不能为空')\r\n    assert(_seconds >= 0, '[TimeUtil] TimeUtil.SetTimeout() 延迟时间需大于等于0')\r\n    if _seconds == 0 then\r\n        print('[TimeUtil] TimeUtil.SetTimeout() 事件立即执行')\r\n        invoke(_func)\r\n        return\r\n    end\r\n    local id = #eventList + 1\r\n    -- convert to milliseconds\r\n    local ms = math.floor(_seconds * 1000)\r\n    local timestamp = ms + Timer.GetTimeMillisecond()\r\n    table.insert(\r\n        eventList,\r\n        {\r\n            id = id,\r\n            func = _func,\r\n            delay = ms,\r\n            triggerTime = timestamp\r\n        }\r\n    )\r\n    return id\r\nend\r\n\r\n--- Call a function or evaluates an expression at specified intervals (in milliseconds),\r\n-- the method will continue calling the function until ClearInterval() is called, or the game is over.\r\n-- @param _func execution function to call\r\n-- @param _delayTime\r\n-- @return timer id\r\n-- @see https://www.w3schools.com/jsref/met_win_setinterval.asp\r\nfunction TimeUtil.SetInterval(_func, _seconds)\r\n    assert(_func, '[TimeUtil] TimeUtil.SetInterval() _func 不能为空')\r\n    assert(_seconds > 0, '[TimeUtil] TimeUtil.SetInterval() 延迟时间需大于0')\r\n    local id = #eventList + 1\r\n    -- convert to milliseconds\r\n    local ms = math.floor(_seconds * 1000)\r\n    local timestamp = ms + Timer.GetTimeMillisecond()\r\n    table.insert(\r\n        eventList,\r\n        {\r\n            id = id,\r\n            func = _func,\r\n            delay = ms,\r\n            triggerTime = timestamp,\r\n            loop = true\r\n        }\r\n    )\r\n    return id\r\nend\r\n\r\n--- Clear a timer set with the SetTimeout() method\r\n-- @param _id timmer id\r\n-- @see https://www.w3schools.com/jsref/met_win_cleartimeout.asp\r\nfunction TimeUtil.ClearTimeout(_id)\r\n    for k, e in pairs(eventList) do\r\n        if e.id == _id then\r\n            table.remove(eventList, k)\r\n            break\r\n        end\r\n    end\r\nend\r\n\r\n--- Clear a timer set with the SetInterval() method, used as ClearTimeout()\r\n-- @see https://www.w3schools.com/jsref/met_win_clearinterval.asp\r\nTimeUtil.ClearInterval = TimeUtil.ClearTimeout\r\n\r\nreturn TimeUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"LogUtilModule","guid":[1448450812,1700152430,3083838744,455591299],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"LogUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- Debug工具\r\n-- @module Debug utilities\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Yuancheng Zhang\r\nlocal LogUtil = {}\r\n\r\n--- 日志级别枚举\r\nLogUtil.LevelEnum = {\r\n    -- 指出细粒度信息事件对调试应用程序是非常有帮助的 主要用于开发过程中打印一些运行信息\r\n    DEBUG = 1,\r\n    -- 消息在粗粒度级别上突出强调应用程序的运行过程\r\n    -- 打印一些你感兴趣的或者重要的信息 这个可以用于生产环境中输出程序运行的一些重要信息\r\n    -- 但是不能滥用 避免打印过多的日志\r\n    INFO = 2,\r\n    -- 表明会出现潜在错误的情形 有些信息不是错误信息 但是也要给程序员的一些提示\r\n    -- 指出虽然发生错误事件 但仍然不影响系统的继续运行\r\n    -- 打印错误和异常信息 如果不想输出太多的日志 可以使用这个级别\r\n    ERROR = 3\r\n}\r\n\r\n--- 日志级别\r\nLogUtil.level = LogUtil.LevelEnum.DEBUG\r\n\r\n--- 开关\r\nLogUtil.debugMode = true\r\n\r\nfunction LogUtil.Test(...)\r\n    if LogUtil.debugMode and LogUtil.level <= LogUtil.LevelEnum.DEBUG then\r\n        print('[TEST]', ...)\r\n    end\r\nend\r\n\r\nfunction LogUtil.Debug(...)\r\n    if LogUtil.debugMode and LogUtil.level <= LogUtil.LevelEnum.DEBUG then\r\n        print('[DEBUG]', ...)\r\n    end\r\nend\r\n\r\nfunction LogUtil.Info(...)\r\n    if LogUtil.debugMode and LogUtil.level <= LogUtil.LevelEnum.INFO then\r\n        print('[INFO]', ...)\r\n    end\r\nend\r\n\r\nreturn LogUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"CamUtilModule","guid":[1786588942,1014908186,2189044832,747029913],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"CamUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"---摄像机工具类\r\n---@module Cam Utility\r\n---@copyright Lilith Games, Avatar Team\r\n---@author Sharif Ma\r\n---@class CamUtil\r\nlocal CamUtil = {}\r\n\r\n---将摄像机在水平面上转动到和角色朝向一致的角度\r\n---@param _player PlayerInstance 摄像机看向的物体\r\n---@param _cam Camera 转动的摄像机\r\n---@param _time number 转动过程的事件，不填则瞬间转动\r\nfunction CamUtil.ToRoleForward(_player, _cam, _time)\r\n    _time = _time or 0\r\n    local dir = _player.Position - _cam.Position\r\n    local forward = _player.Forward\r\n    local alpha = Vector2.Angle(Vector2(dir.x, dir.z), Vector2(forward.x, forward.z))\r\n    local left = _player.Left\r\n    if Vector3.Angle(left, dir) > 90 then\r\n        alpha = 360 - alpha\r\n    end\r\n    if _time == 0 then\r\n        _cam:CameraMoveInDegree(Vector2(alpha, 0))\r\n        return\r\n    end\r\n    invoke(\r\n        function()\r\n            local curTime = 0\r\n            while true do\r\n                local dt = wait()\r\n                local dtDe = alpha * dt / _time\r\n                _cam:CameraMoveInDegree(Vector2(dtDe, 0))\r\n                curTime = curTime + dt\r\n                if curTime >= _time then\r\n                    return\r\n                end\r\n            end\r\n        end\r\n    )\r\nend\r\n\r\nreturn CamUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"UuidModule","guid":[4157188643,3705227052,3158561090,4053995093],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"UuidModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"---------------------------------------------------------------------------------------\r\n-- Copyright 2012 Rackspace (original), 2013 Thijs Schreijer (modifications)\r\n--\r\n-- Licensed under the Apache License, Version 2.0 (the \"License\");\r\n-- you may not use this file except in compliance with the License.\r\n-- You may obtain a copy of the License at\r\n--\r\n--     http://www.apache.org/licenses/LICENSE-2.0\r\n--\r\n-- Unless required by applicable law or agreed to in writing, software\r\n-- distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n-- See the License for the specific language governing permissions and\r\n-- limitations under the License.\r\n--\r\n-- see http://www.ietf.org/rfc/rfc4122.txt\r\n--\r\n-- Note that this is not a true version 4 (random) UUID.  Since `os.time()` precision is only 1 second, it would be hard\r\n-- to guarantee spacial uniqueness when two hosts generate a uuid after being seeded during the same second.  This\r\n-- is solved by using the node field from a version 1 UUID.  It represents the mac address.\r\n--\r\n-- 28-apr-2013 modified by Thijs Schreijer from the original [Rackspace code](https://github.com/kans/zirgo/blob/807250b1af6725bad4776c931c89a784c1e34db2/util/uuid.lua) as a generic Lua module.\r\n-- Regarding the above mention on `os.time()`; the modifications use the `socket.gettime()` function from LuaSocket\r\n-- if available and hence reduce that problem (provided LuaSocket has been loaded before uuid).\r\n--\r\n-- **6-nov-2015 Please take note of this issue**; [https://github.com/Mashape/kong/issues/478](https://github.com/Mashape/kong/issues/478)\r\n-- It demonstrates the problem of using time as a random seed. Specifically when used from multiple processes.\r\n-- So make sure to seed only once, application wide. And to not have multiple processes do that\r\n-- simultaneously (like nginx does for example).\r\n\r\nlocal M = {}\r\n\r\nlocal bitsize = 32 -- bitsize assumed for Lua VM. See randomseed function below.\r\nlocal lua_version = tonumber(_VERSION:match('%d%.*%d*')) -- grab Lua version used\r\n\r\nlocal MATRIX_AND = {{0, 0}, {0, 1}}\r\nlocal MATRIX_OR = {{0, 1}, {1, 1}}\r\nlocal HEXES = '0123456789abcdef'\r\n\r\nlocal math_floor = math.floor\r\nlocal math_random = math.random\r\nlocal math_abs = math.abs\r\nlocal string_sub = string.sub\r\nlocal to_number = tonumber\r\nlocal assert = assert\r\nlocal type = type\r\n\r\n-- performs the bitwise operation specified by truth matrix on two numbers.\r\nlocal function BITWISE(x, y, matrix)\r\n    local z = 0\r\n    local pow = 1\r\n    while x > 0 or y > 0 do\r\n        z = z + (matrix[x % 2 + 1][y % 2 + 1] * pow)\r\n        pow = pow * 2\r\n        x = math_floor(x / 2)\r\n        y = math_floor(y / 2)\r\n    end\r\n    return z\r\nend\r\n\r\nlocal function INT2HEX(x)\r\n    local s, base = '', 16\r\n    local d\r\n    while x > 0 do\r\n        d = x % base + 1\r\n        x = math_floor(x / base)\r\n        s = string_sub(HEXES, d, d) .. s\r\n    end\r\n    while #s < 2 do\r\n        s = '0' .. s\r\n    end\r\n    return s\r\nend\r\n\r\n----------------------------------------------------------------------------\r\n-- Creates a new uuid. Either provide a unique hex string, or make sure the\r\n-- random seed is properly set. The module table itself is a shortcut to this\r\n-- function, so `my_uuid = uuid.new()` equals `my_uuid = uuid()`.\r\n--\r\n-- For proper use there are 3 options;\r\n--\r\n-- 1. first require `luasocket`, then call `uuid.seed()`, and request a uuid using no\r\n-- parameter, eg. `my_uuid = uuid()`\r\n-- 2. use `uuid` without `luasocket`, set a random seed using `uuid.randomseed(some_good_seed)`,\r\n-- and request a uuid using no parameter, eg. `my_uuid = uuid()`\r\n-- 3. use `uuid` without `luasocket`, and request a uuid using an unique hex string,\r\n-- eg. `my_uuid = uuid(my_networkcard_macaddress)`\r\n--\r\n-- @return a properly formatted uuid string\r\n-- @param hwaddr (optional) string containing a unique hex value (e.g.: `00:0c:29:69:41:c6`), to be used to compensate for the lesser `math_random()` function. Use a mac address for solid results. If omitted, a fully randomized uuid will be generated, but then you must ensure that the random seed is set properly!\r\n-- @usage\r\n-- local uuid = require(\"uuid\")\r\n-- print(\"here's a new uuid: \",uuid())\r\nfunction M.new(hwaddr)\r\n    -- bytes are treated as 8bit unsigned bytes.\r\n    local bytes = {\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255),\r\n        math_random(0, 255)\r\n    }\r\n\r\n    if hwaddr then\r\n        assert(type(hwaddr) == 'string', 'Expected hex string, got ' .. type(hwaddr))\r\n        -- Cleanup provided string, assume mac address, so start from back and cleanup until we've got 12 characters\r\n        local i, str = #hwaddr, hwaddr\r\n        hwaddr = ''\r\n        while i > 0 and #hwaddr < 12 do\r\n            local c = str:sub(i, i):lower()\r\n            if HEXES:find(c, 1, true) then\r\n                -- valid HEX character, so append it\r\n                hwaddr = c .. hwaddr\r\n            end\r\n            i = i - 1\r\n        end\r\n        assert(\r\n            #hwaddr == 12,\r\n            \"Provided string did not contain at least 12 hex characters, retrieved '\" ..\r\n                hwaddr .. \"' from '\" .. str .. \"'\"\r\n        )\r\n\r\n        -- no split() in lua. :(\r\n        bytes[11] = to_number(hwaddr:sub(1, 2), 16)\r\n        bytes[12] = to_number(hwaddr:sub(3, 4), 16)\r\n        bytes[13] = to_number(hwaddr:sub(5, 6), 16)\r\n        bytes[14] = to_number(hwaddr:sub(7, 8), 16)\r\n        bytes[15] = to_number(hwaddr:sub(9, 10), 16)\r\n        bytes[16] = to_number(hwaddr:sub(11, 12), 16)\r\n    end\r\n\r\n    -- set the version\r\n    bytes[7] = BITWISE(bytes[7], 0x0f, MATRIX_AND)\r\n    bytes[7] = BITWISE(bytes[7], 0x40, MATRIX_OR)\r\n    -- set the variant\r\n    bytes[9] = BITWISE(bytes[7], 0x3f, MATRIX_AND)\r\n    bytes[9] = BITWISE(bytes[7], 0x80, MATRIX_OR)\r\n    return INT2HEX(bytes[1]) ..\r\n        INT2HEX(bytes[2]) ..\r\n            INT2HEX(bytes[3]) ..\r\n                INT2HEX(bytes[4]) ..\r\n                    '-' ..\r\n                        INT2HEX(bytes[5]) ..\r\n                            INT2HEX(bytes[6]) ..\r\n                                '-' ..\r\n                                    INT2HEX(bytes[7]) ..\r\n                                        INT2HEX(bytes[8]) ..\r\n                                            '-' ..\r\n                                                INT2HEX(bytes[9]) ..\r\n                                                    INT2HEX(bytes[10]) ..\r\n                                                        '-' ..\r\n                                                            INT2HEX(bytes[11]) ..\r\n                                                                INT2HEX(bytes[12]) ..\r\n                                                                    INT2HEX(bytes[13]) ..\r\n                                                                        INT2HEX(bytes[14]) ..\r\n                                                                            INT2HEX(bytes[15]) .. INT2HEX(bytes[16])\r\nend\r\n\r\n----------------------------------------------------------------------------\r\n-- Improved randomseed function.\r\n-- Lua 5.1 and 5.2 both truncate the seed given if it exceeds the integer\r\n-- range. If this happens, the seed will be 0 or 1 and all randomness will\r\n-- be gone (each application run will generate the same sequence of random\r\n-- numbers in that case). This improved version drops the most significant\r\n-- bits in those cases to get the seed within the proper range again.\r\n-- @param seed the random seed to set (integer from 0 - 2^32, negative values will be made positive)\r\n-- @return the (potentially modified) seed used\r\n-- @usage\r\n-- local socket = require(\"socket\")  -- gettime() has higher precision than os.time()\r\n-- local uuid = require(\"uuid\")\r\n-- -- see also example at uuid.seed()\r\n-- uuid.randomseed(socket.gettime()*10000)\r\n-- print(\"here's a new uuid: \",uuid())\r\nfunction M.randomseed(seed)\r\n    seed = math_floor(math_abs(seed))\r\n    if seed >= (2 ^ bitsize) then\r\n        -- integer overflow, so reduce to prevent a bad seed\r\n        seed = seed - math_floor(seed / 2 ^ bitsize) * (2 ^ bitsize)\r\n    end\r\n    if lua_version < 5.2 then\r\n        -- 5.1 uses (incorrect) signed int\r\n        math.randomseed(seed - 2 ^ (bitsize - 1))\r\n    else\r\n        -- 5.2 uses (correct) unsigned int\r\n        math.randomseed(seed)\r\n    end\r\n    return seed\r\nend\r\n\r\n----------------------------------------------------------------------------\r\n-- Seeds the random generator.\r\n-- It does so in 2 possible ways;\r\n--\r\n-- 1. use `os.time()`: this only offers resolution to one second (used when\r\n-- LuaSocket hasn't been loaded yet\r\n-- 2. use luasocket `gettime()` function, but it only does so when LuaSocket\r\n-- has been required already.\r\n-- @usage\r\n-- local socket = require(\"socket\")  -- gettime() has higher precision than os.time()\r\n-- -- LuaSocket loaded, so below line does the same as the example from randomseed()\r\n-- uuid.seed()\r\n-- print(\"here's a new uuid: \",uuid())\r\nfunction M.seed()\r\n    -- if package.loaded['socket'] and package.loaded['socket'].gettime then\r\n    --     return M.randomseed(package.loaded['socket'].gettime() * 10000)\r\n    -- else\r\n    return M.randomseed(os.time())\r\n    -- end\r\nend\r\n\r\nreturn setmetatable(\r\n    M,\r\n    {\r\n        __call = function(self, hwaddr)\r\n            return self.new(hwaddr)\r\n        end\r\n    }\r\n)\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"LuaJsonUtilModule","guid":[1171767027,1956007823,2562650671,2698147667],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"LuaJsonUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- -*- coding: utf-8 -*-\r\n---\r\n--- Simple JSON encoding and decoding in pure Lua.\r\n---\r\n--- Copyright 2010-2014 Jeffrey Friedl\r\n--- http://regex.info/blog/\r\n---\r\n--- Latest version: http://regex.info/blog/lua/json\r\n---\r\n--- This code is released under a Creative Commons CC-BY \"Attribution\" License:\r\n--- http://creativecommons.org/licenses/by/3.0/deed.en_US\r\n---\r\n--- It can be used for any purpose so long as the copyright notice above,\r\n--- the web-page links above, and the 'AUTHOR_NOTE' string below are\r\n--- maintained. Enjoy.\r\n---\r\nlocal VERSION = 20141223.14 --- version history at end of file\r\nlocal AUTHOR_NOTE = '-[ JSON.lua package by Jeffrey Friedl (http://regex.info/blog/lua/json) version 20141223.14 ]-'\r\n\r\n---\r\n--- The 'AUTHOR_NOTE' variable exists so that information about the source\r\n--- of the package is maintained even in compiled versions. It's also\r\n--- included in OBJDEF below mostly to quiet warnings about unused variables.\r\n---\r\n---@module LuaJson\r\nlocal OBJDEF = {\r\n    VERSION = VERSION,\r\n    AUTHOR_NOTE = AUTHOR_NOTE\r\n}\r\n\r\n---\r\n--- Simple JSON encoding and decoding in pure Lua.\r\n--- http://www.json.org/\r\n---\r\n--\r\n--   JSON = assert(loadfile \"JSON.lua\")() -- one-time load of the routines\r\n--\r\n--   local lua_value = JSON:decode(raw_json_text)\r\n--\r\n--   local raw_json_text    = JSON:encode(lua_table_or_value)\r\n--   local pretty_json_text = JSON:encode_pretty(lua_table_or_value) -- \"pretty printed\" version for human readability\r\n--\r\n--\r\n--\r\n-- DECODING (from a JSON string to a Lua table)\r\n--\r\n--\r\n--   JSON = assert(loadfile \"JSON.lua\")() -- one-time load of the routines\r\n--\r\n--   local lua_value = JSON:decode(raw_json_text)\r\n--\r\n--   If the JSON text is for an object or an array, e.g.\r\n--     { \"what\": \"books\", \"count\": 3 }\r\n--   or\r\n--     [ \"Larry\", \"Curly\", \"Moe\" ]\r\n--\r\n--   the result is a Lua table, e.g.\r\n--     { what = \"books\", count = 3 }\r\n--   or\r\n--     { \"Larry\", \"Curly\", \"Moe\" }\r\n--\r\n--\r\n--   The encode and decode routines accept an optional second argument,\r\n--   \"etc\", which is not used during encoding or decoding, but upon error\r\n--   is passed along to error handlers. It can be of any type (including nil).\r\n--\r\n--\r\n--\r\n-- ERROR HANDLING\r\n--\r\n--   With most errors during decoding, this code calls\r\n--\r\n--      JSON:onDecodeError(message, text, location, etc)\r\n--\r\n--   with a message about the error, and if known, the JSON text being\r\n--   parsed and the byte count where the problem was discovered. You can\r\n--   replace the default JSON:onDecodeError() with your own function.\r\n--\r\n--   The default onDecodeError() merely augments the message with data\r\n--   about the text and the location if known (and if a second 'etc'\r\n--   argument had been provided to decode(), its value is tacked onto the\r\n--   message as well), and then calls JSON.assert(), which itself defaults\r\n--   to Lua's built-in assert(), and can also be overridden.\r\n--\r\n--   For example, in an Adobe Lightroom plugin, you might use something like\r\n--\r\n--          function JSON:onDecodeError(message, text, location, etc)\r\n--             LrErrors.throwUserError(\"Internal Error: invalid JSON data\")\r\n--          end\r\n--\r\n--   or even just\r\n--\r\n--          function JSON.assert(message)\r\n--             LrErrors.throwUserError(\"Internal Error: \" .. message)\r\n--          end\r\n--\r\n--   If JSON:decode() is passed a nil, this is called instead:\r\n--\r\n--      JSON:onDecodeOfNilError(message, nil, nil, etc)\r\n--\r\n--   and if JSON:decode() is passed HTML instead of JSON, this is called:\r\n--\r\n--      JSON:onDecodeOfHTMLError(message, text, nil, etc)\r\n--\r\n--   The use of the fourth 'etc' argument allows stronger coordination\r\n--   between decoding and error reporting, especially when you provide your\r\n--   own error-handling routines. Continuing with the the Adobe Lightroom\r\n--   plugin example:\r\n--\r\n--          function JSON:onDecodeError(message, text, location, etc)\r\n--             local note = \"Internal Error: invalid JSON data\"\r\n--             if type(etc) = 'table' and etc.photo then\r\n--                note = note .. \" while processing for \" .. etc.photo:getFormattedMetadata('fileName')\r\n--             end\r\n--             LrErrors.throwUserError(note)\r\n--          end\r\n--\r\n--            :\r\n--            :\r\n--\r\n--          for i, photo in ipairs(photosToProcess) do\r\n--               :\r\n--               :\r\n--               local data = JSON:decode(someJsonText, { photo = photo })\r\n--               :\r\n--               :\r\n--          end\r\n--\r\n--\r\n--\r\n--\r\n--\r\n-- DECODING AND STRICT TYPES\r\n--\r\n--   Because both JSON objects and JSON arrays are converted to Lua tables,\r\n--   it's not normally possible to tell which original JSON type a\r\n--   particular Lua table was derived from, or guarantee decode-encode\r\n--   round-trip equivalency.\r\n--\r\n--   However, if you enable strictTypes, e.g.\r\n--\r\n--      JSON = assert(loadfile \"JSON.lua\")() --load the routines\r\n--      JSON.strictTypes = true\r\n--\r\n--   then the Lua table resulting from the decoding of a JSON object or\r\n--   JSON array is marked via Lua metatable, so that when re-encoded with\r\n--   JSON:encode() it ends up as the appropriate JSON type.\r\n--\r\n--   (This is not the default because other routines may not work well with\r\n--   tables that have a metatable set, for example, Lightroom API calls.)\r\n--\r\n--\r\n-- ENCODING (from a lua table to a JSON string)\r\n--\r\n--   JSON = assert(loadfile \"JSON.lua\")() -- one-time load of the routines\r\n--\r\n--   local raw_json_text    = JSON:encode(lua_table_or_value)\r\n--   local pretty_json_text = JSON:encode_pretty(lua_table_or_value) -- \"pretty printed\" version for human readability\r\n--   local custom_pretty    = JSON:encode(lua_table_or_value, etc, { pretty = true, indent = \"|  \", align_keys = false })\r\n--\r\n--   On error during encoding, this code calls:\r\n--\r\n--     JSON:onEncodeError(message, etc)\r\n--\r\n--   which you can override in your local JSON object.\r\n--\r\n--   The 'etc' in the error call is the second argument to encode()\r\n--   and encode_pretty(), or nil if it wasn't provided.\r\n--\r\n--\r\n-- PRETTY-PRINTING\r\n--\r\n--   An optional third argument, a table of options, allows a bit of\r\n--   configuration about how the encoding takes place:\r\n--\r\n--     pretty = JSON:encode(val, etc, {\r\n--                                       pretty = true,      -- if false, no other options matter\r\n--                                       indent = \"   \",     -- this provides for a three-space indent per nesting level\r\n--                                       align_keys = false, -- see below\r\n--                                     })\r\n--\r\n--   encode() and encode_pretty() are identical except that encode_pretty()\r\n--   provides a default options table if none given in the call:\r\n--\r\n--       { pretty = true, align_keys = false, indent = \"  \" }\r\n--\r\n--   For example, if\r\n--\r\n--      JSON:encode(data)\r\n--\r\n--   produces:\r\n--\r\n--      {\"city\":\"Kyoto\",\"climate\":{\"avg_temp\":16,\"humidity\":\"high\",\"snowfall\":\"minimal\"},\"country\":\"Japan\",\"wards\":11}\r\n--\r\n--   then\r\n--\r\n--      JSON:encode_pretty(data)\r\n--\r\n--   produces:\r\n--\r\n--      {\r\n--        \"city\": \"Kyoto\",\r\n--        \"climate\": {\r\n--          \"avg_temp\": 16,\r\n--          \"humidity\": \"high\",\r\n--          \"snowfall\": \"minimal\"\r\n--        },\r\n--        \"country\": \"Japan\",\r\n--        \"wards\": 11\r\n--      }\r\n--\r\n--   The following three lines return identical results:\r\n--       JSON:encode_pretty(data)\r\n--       JSON:encode_pretty(data, nil, { pretty = true, align_keys = false, indent = \"  \" })\r\n--       JSON:encode       (data, nil, { pretty = true, align_keys = false, indent = \"  \" })\r\n--\r\n--   An example of setting your own indent string:\r\n--\r\n--     JSON:encode_pretty(data, nil, { pretty = true, indent = \"|    \" })\r\n--\r\n--   produces:\r\n--\r\n--      {\r\n--      |    \"city\": \"Kyoto\",\r\n--      |    \"climate\": {\r\n--      |    |    \"avg_temp\": 16,\r\n--      |    |    \"humidity\": \"high\",\r\n--      |    |    \"snowfall\": \"minimal\"\r\n--      |    },\r\n--      |    \"country\": \"Japan\",\r\n--      |    \"wards\": 11\r\n--      }\r\n--\r\n--   An example of setting align_keys to true:\r\n--\r\n--     JSON:encode_pretty(data, nil, { pretty = true, indent = \"  \", align_keys = true })\r\n--\r\n--   produces:\r\n--\r\n--      {\r\n--           \"city\": \"Kyoto\",\r\n--        \"climate\": {\r\n--                     \"avg_temp\": 16,\r\n--                     \"humidity\": \"high\",\r\n--                     \"snowfall\": \"minimal\"\r\n--                   },\r\n--        \"country\": \"Japan\",\r\n--          \"wards\": 11\r\n--      }\r\n--\r\n--   which I must admit is kinda ugly, sorry. This was the default for\r\n--   encode_pretty() prior to version 20141223.14.\r\n--\r\n--\r\n--  AMBIGUOUS SITUATIONS DURING THE ENCODING\r\n--\r\n--   During the encode, if a Lua table being encoded contains both string\r\n--   and numeric keys, it fits neither JSON's idea of an object, nor its\r\n--   idea of an array. To get around this, when any string key exists (or\r\n--   when non-positive numeric keys exist), numeric keys are converted to\r\n--   strings.\r\n--\r\n--   For example,\r\n--     JSON:encode({ \"one\", \"two\", \"three\", SOMESTRING = \"some string\" }))\r\n--   produces the JSON object\r\n--     {\"1\":\"one\",\"2\":\"two\",\"3\":\"three\",\"SOMESTRING\":\"some string\"}\r\n--\r\n--   To prohibit this conversion and instead make it an error condition, set\r\n--      JSON.noKeyConversion = true\r\n--\r\n\r\n--\r\n-- SUMMARY OF METHODS YOU CAN OVERRIDE IN YOUR LOCAL LUA JSON OBJECT\r\n--\r\n--    assert\r\n--    onDecodeError\r\n--    onDecodeOfNilError\r\n--    onDecodeOfHTMLError\r\n--    onEncodeError\r\n--\r\n--  If you want to create a separate Lua JSON object with its own error handlers,\r\n--  you can reload JSON.lua or use the :new() method.\r\n--\r\n---------------------------------------------------------------------------\r\n\r\nlocal default_pretty_indent = '  '\r\nlocal default_pretty_options = {pretty = true, align_keys = false, indent = default_pretty_indent}\r\n\r\nlocal isArray = {\r\n    __tostring = function()\r\n        return 'JSON array'\r\n    end\r\n}\r\nisArray.__index = isArray\r\nlocal isObject = {\r\n    __tostring = function()\r\n        return 'JSON object'\r\n    end\r\n}\r\nisObject.__index = isObject\r\n\r\nfunction OBJDEF:newArray(tbl)\r\n    return setmetatable(tbl or {}, isArray)\r\nend\r\n\r\nfunction OBJDEF:newObject(tbl)\r\n    return setmetatable(tbl or {}, isObject)\r\nend\r\n\r\nlocal function unicode_codepoint_as_utf8(codepoint)\r\n    --\r\n    -- codepoint is a number\r\n    --\r\n    if codepoint <= 127 then\r\n        return string.char(codepoint)\r\n    elseif codepoint <= 2047 then\r\n        --\r\n        -- 110yyyxx 10xxxxxx         <-- useful notation from http://en.wikipedia.org/wiki/Utf8\r\n        --\r\n        local highpart = math.floor(codepoint / 0x40)\r\n        local lowpart = codepoint - (0x40 * highpart)\r\n        return string.char(0xC0 + highpart, 0x80 + lowpart)\r\n    elseif codepoint <= 65535 then\r\n        --\r\n        -- 1110yyyy 10yyyyxx 10xxxxxx\r\n        --\r\n        local highpart = math.floor(codepoint / 0x1000)\r\n        local remainder = codepoint - 0x1000 * highpart\r\n        local midpart = math.floor(remainder / 0x40)\r\n        local lowpart = remainder - 0x40 * midpart\r\n\r\n        highpart = 0xE0 + highpart\r\n        midpart = 0x80 + midpart\r\n        lowpart = 0x80 + lowpart\r\n\r\n        --\r\n        -- Check for an invalid character (thanks Andy R. at Adobe).\r\n        -- See table 3.7, page 93, in http://www.unicode.org/versions/Unicode5.2.0/ch03.pdf#G28070\r\n        --\r\n        if\r\n            (highpart == 0xE0 and midpart < 0xA0) or (highpart == 0xED and midpart > 0x9F) or\r\n                (highpart == 0xF0 and midpart < 0x90) or\r\n                (highpart == 0xF4 and midpart > 0x8F)\r\n         then\r\n            return '?'\r\n        else\r\n            return string.char(highpart, midpart, lowpart)\r\n        end\r\n    else\r\n        --\r\n        -- 11110zzz 10zzyyyy 10yyyyxx 10xxxxxx\r\n        --\r\n        local highpart = math.floor(codepoint / 0x40000)\r\n        local remainder = codepoint - 0x40000 * highpart\r\n        local midA = math.floor(remainder / 0x1000)\r\n        remainder = remainder - 0x1000 * midA\r\n        local midB = math.floor(remainder / 0x40)\r\n        local lowpart = remainder - 0x40 * midB\r\n\r\n        return string.char(0xF0 + highpart, 0x80 + midA, 0x80 + midB, 0x80 + lowpart)\r\n    end\r\nend\r\n\r\nfunction OBJDEF:onDecodeError(message, text, location, etc)\r\n    if text then\r\n        if location then\r\n            message = string.format('%s at char %d of: %s', message, location, text)\r\n        else\r\n            message = string.format('%s: %s', message, text)\r\n        end\r\n    end\r\n\r\n    if etc ~= nil then\r\n        message = message .. ' (' .. OBJDEF:encode(etc) .. ')'\r\n    end\r\n\r\n    if self.assert then\r\n        self.assert(false, message)\r\n    else\r\n        assert(false, message)\r\n    end\r\nend\r\n\r\nOBJDEF.onDecodeOfNilError = OBJDEF.onDecodeError\r\nOBJDEF.onDecodeOfHTMLError = OBJDEF.onDecodeError\r\n\r\nfunction OBJDEF:onEncodeError(message, etc)\r\n    if etc ~= nil then\r\n        message = message .. ' (' .. OBJDEF:encode(etc) .. ')'\r\n    end\r\n\r\n    if self.assert then\r\n        self.assert(false, message)\r\n    else\r\n        assert(false, message)\r\n    end\r\nend\r\n\r\nlocal function grok_number(self, text, start, etc)\r\n    --\r\n    -- Grab the integer part\r\n    --\r\n    local integer_part = text:match('^-?[1-9]%d*', start) or text:match('^-?0', start)\r\n\r\n    if not integer_part then\r\n        self:onDecodeError('expected number', text, start, etc)\r\n    end\r\n\r\n    local i = start + integer_part:len()\r\n\r\n    --\r\n    -- Grab an optional decimal part\r\n    --\r\n    local decimal_part = text:match('^%.%d+', i) or ''\r\n\r\n    i = i + decimal_part:len()\r\n\r\n    --\r\n    -- Grab an optional exponential part\r\n    --\r\n    local exponent_part = text:match('^[eE][-+]?%d+', i) or ''\r\n\r\n    i = i + exponent_part:len()\r\n\r\n    local full_number_text = integer_part .. decimal_part .. exponent_part\r\n    local as_number = tonumber(full_number_text)\r\n\r\n    if not as_number then\r\n        self:onDecodeError('bad number', text, start, etc)\r\n    end\r\n\r\n    return as_number, i\r\nend\r\n\r\nlocal function grok_string(self, text, start, etc)\r\n    if text:sub(start, start) ~= '\"' then\r\n        self:onDecodeError(\"expected string's opening quote\", text, start, etc)\r\n    end\r\n\r\n    local i = start + 1 -- +1 to bypass the initial quote\r\n    local text_len = text:len()\r\n    local VALUE = ''\r\n    while i <= text_len do\r\n        local c = text:sub(i, i)\r\n        if c == '\"' then\r\n            return VALUE, i + 1\r\n        end\r\n        if c ~= '\\\\' then\r\n            VALUE = VALUE .. c\r\n            i = i + 1\r\n        elseif text:match('^\\\\b', i) then\r\n            VALUE = VALUE .. '\\b'\r\n            i = i + 2\r\n        elseif text:match('^\\\\f', i) then\r\n            VALUE = VALUE .. '\\f'\r\n            i = i + 2\r\n        elseif text:match('^\\\\n', i) then\r\n            VALUE = VALUE .. '\\n'\r\n            i = i + 2\r\n        elseif text:match('^\\\\r', i) then\r\n            VALUE = VALUE .. '\\r'\r\n            i = i + 2\r\n        elseif text:match('^\\\\t', i) then\r\n            VALUE = VALUE .. '\\t'\r\n            i = i + 2\r\n        else\r\n            local hex =\r\n                text:match(\r\n                '^\\\\u([0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])',\r\n                i\r\n            )\r\n            if hex then\r\n                i = i + 6 -- bypass what we just read\r\n\r\n                -- We have a Unicode codepoint. It could be standalone, or if in the proper range and\r\n                -- followed by another in a specific range, it'll be a two-code surrogate pair.\r\n                local codepoint = tonumber(hex, 16)\r\n                if codepoint >= 0xD800 and codepoint <= 0xDBFF then\r\n                    -- it's a hi surrogate... see whether we have a following low\r\n                    local lo_surrogate =\r\n                        text:match('^\\\\u([dD][cdefCDEF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])', i)\r\n                    if lo_surrogate then\r\n                        i = i + 6 -- bypass the low surrogate we just read\r\n                        codepoint = 0x2400 + (codepoint - 0xD800) * 0x400 + tonumber(lo_surrogate, 16)\r\n                    else\r\n                        -- not a proper low, so we'll just leave the first codepoint as is and spit it out.\r\n                    end\r\n                end\r\n                VALUE = VALUE .. unicode_codepoint_as_utf8(codepoint)\r\n            else\r\n                -- just pass through what's escaped\r\n                VALUE = VALUE .. text:match('^\\\\(.)', i)\r\n                i = i + 2\r\n            end\r\n        end\r\n    end\r\n\r\n    self:onDecodeError('unclosed string', text, start, etc)\r\nend\r\n\r\nlocal function skip_whitespace(text, start)\r\n    local _, match_end = text:find('^[ \\n\\r\\t]+', start) -- [http://www.ietf.org/rfc/rfc4627.txt] Section 2\r\n    if match_end then\r\n        return match_end + 1\r\n    else\r\n        return start\r\n    end\r\nend\r\n\r\nlocal grok_one  -- assigned later\r\n\r\nlocal function grok_object(self, text, start, etc)\r\n    if text:sub(start, start) ~= '{' then\r\n        self:onDecodeError(\"expected '{'\", text, start, etc)\r\n    end\r\n\r\n    local i = skip_whitespace(text, start + 1) -- +1 to skip the '{'\r\n\r\n    local VALUE = self.strictTypes and self:newObject {} or {}\r\n\r\n    if text:sub(i, i) == '}' then\r\n        return VALUE, i + 1\r\n    end\r\n    local text_len = text:len()\r\n    while i <= text_len do\r\n        local key, new_i = grok_string(self, text, i, etc)\r\n\r\n        i = skip_whitespace(text, new_i)\r\n\r\n        if text:sub(i, i) ~= ':' then\r\n            self:onDecodeError('expected colon', text, i, etc)\r\n        end\r\n\r\n        i = skip_whitespace(text, i + 1)\r\n\r\n        local new_val, new_i = grok_one(self, text, i)\r\n\r\n        VALUE[key] = new_val\r\n\r\n        --\r\n        -- Expect now either '}' to end things, or a ',' to allow us to continue.\r\n        --\r\n        i = skip_whitespace(text, new_i)\r\n\r\n        local c = text:sub(i, i)\r\n\r\n        if c == '}' then\r\n            return VALUE, i + 1\r\n        end\r\n\r\n        if text:sub(i, i) ~= ',' then\r\n            self:onDecodeError(\"expected comma or '}'\", text, i, etc)\r\n        end\r\n\r\n        i = skip_whitespace(text, i + 1)\r\n    end\r\n\r\n    self:onDecodeError(\"unclosed '{'\", text, start, etc)\r\nend\r\n\r\nlocal function grok_array(self, text, start, etc)\r\n    if text:sub(start, start) ~= '[' then\r\n        self:onDecodeError(\"expected '['\", text, start, etc)\r\n    end\r\n\r\n    local i = skip_whitespace(text, start + 1) -- +1 to skip the '['\r\n    local VALUE = self.strictTypes and self:newArray {} or {}\r\n    if text:sub(i, i) == ']' then\r\n        return VALUE, i + 1\r\n    end\r\n\r\n    local VALUE_INDEX = 1\r\n\r\n    local text_len = text:len()\r\n    while i <= text_len do\r\n        local val, new_i = grok_one(self, text, i)\r\n\r\n        -- can't table.insert(VALUE, val) here because it's a no-op if val is nil\r\n        VALUE[VALUE_INDEX] = val\r\n        VALUE_INDEX = VALUE_INDEX + 1\r\n\r\n        i = skip_whitespace(text, new_i)\r\n\r\n        --\r\n        -- Expect now either ']' to end things, or a ',' to allow us to continue.\r\n        --\r\n        local c = text:sub(i, i)\r\n        if c == ']' then\r\n            return VALUE, i + 1\r\n        end\r\n        if text:sub(i, i) ~= ',' then\r\n            self:onDecodeError(\"expected comma or '['\", text, i, etc)\r\n        end\r\n        i = skip_whitespace(text, i + 1)\r\n    end\r\n    self:onDecodeError(\"unclosed '['\", text, start, etc)\r\nend\r\n\r\ngrok_one = function(self, text, start, etc)\r\n    -- Skip any whitespace\r\n    start = skip_whitespace(text, start)\r\n\r\n    if start > text:len() then\r\n        self:onDecodeError('unexpected end of string', text, nil, etc)\r\n    end\r\n\r\n    if text:find('^\"', start) then\r\n        return grok_string(self, text, start, etc)\r\n    elseif text:find('^[-0123456789 ]', start) then\r\n        return grok_number(self, text, start, etc)\r\n    elseif text:find('^%{', start) then\r\n        return grok_object(self, text, start, etc)\r\n    elseif text:find('^%[', start) then\r\n        return grok_array(self, text, start, etc)\r\n    elseif text:find('^true', start) then\r\n        return true, start + 4\r\n    elseif text:find('^false', start) then\r\n        return false, start + 5\r\n    elseif text:find('^null', start) then\r\n        return nil, start + 4\r\n    else\r\n        self:onDecodeError(\"can't parse JSON\", text, start, etc)\r\n    end\r\nend\r\n\r\n---@param text string\r\nfunction OBJDEF:decode(text, etc)\r\n    if type(self) ~= 'table' or self.__index ~= OBJDEF then\r\n        OBJDEF:onDecodeError('JSON:decode must be called in method format', nil, nil, etc)\r\n    end\r\n\r\n    if text == nil then\r\n        self:onDecodeOfNilError(string.format('nil passed to JSON:decode()'), nil, nil, etc)\r\n    elseif type(text) ~= 'string' then\r\n        self:onDecodeError(\r\n            string.format('expected string argument to JSON:decode(), got %s', type(text)),\r\n            nil,\r\n            nil,\r\n            etc\r\n        )\r\n    end\r\n\r\n    if text:match('^%s*$') then\r\n        return nil\r\n    end\r\n\r\n    if text:match('^%s*<') then\r\n        -- Can't be JSON... we'll assume it's HTML\r\n        self:onDecodeOfHTMLError(string.format('html passed to JSON:decode()'), text, nil, etc)\r\n    end\r\n\r\n    --\r\n    -- Ensure that it's not UTF-32 or UTF-16.\r\n    -- Those are perfectly valid encodings for JSON (as per RFC 4627 section 3),\r\n    -- but this package can't handle them.\r\n    --\r\n    if text:sub(1, 1):byte() == 0 or (text:len() >= 2 and text:sub(2, 2):byte() == 0) then\r\n        self:onDecodeError('JSON package groks only UTF-8, sorry', text, nil, etc)\r\n    end\r\n\r\n    local success, value = pcall(grok_one, self, text, 1, etc)\r\n\r\n    if success then\r\n        return value\r\n    else\r\n        -- if JSON:onDecodeError() didn't abort out of the pcall, we'll have received the error message here as \"value\", so pass it along as an assert.\r\n        if self.assert then\r\n            self.assert(false, value)\r\n        else\r\n            assert(false, value)\r\n        end\r\n        -- and if we're still here, return a nil and throw the error message on as a second arg\r\n        return nil, value\r\n    end\r\nend\r\n\r\nlocal function backslash_replacement_function(c)\r\n    if c == '\\n' then\r\n        return '\\\\n'\r\n    elseif c == '\\r' then\r\n        return '\\\\r'\r\n    elseif c == '\\t' then\r\n        return '\\\\t'\r\n    elseif c == '\\b' then\r\n        return '\\\\b'\r\n    elseif c == '\\f' then\r\n        return '\\\\f'\r\n    elseif c == '\"' then\r\n        return '\\\\\"'\r\n    elseif c == '\\\\' then\r\n        return '\\\\\\\\'\r\n    else\r\n        return string.format('\\\\u%04x', c:byte())\r\n    end\r\nend\r\n\r\nlocal chars_to_be_escaped_in_JSON_string =\r\n    '[' ..\r\n    '\"' .. -- class sub-pattern to match a double quote\r\n        '%\\\\' .. -- class sub-pattern to match a backslash\r\n            '%z' .. -- class sub-pattern to match a null\r\n                '\\001' ..\r\n                    '-' ..\r\n                        '\\031' .. -- class sub-pattern to match control characters\r\n                            ']'\r\n\r\nlocal function json_string_literal(value)\r\n    local newval = value:gsub(chars_to_be_escaped_in_JSON_string, backslash_replacement_function)\r\n    return '\"' .. newval .. '\"'\r\nend\r\n\r\nlocal function object_or_array(self, T, etc)\r\n    --\r\n    -- We need to inspect all the keys... if there are any strings, we'll convert to a JSON\r\n    -- object. If there are only numbers, it's a JSON array.\r\n    --\r\n    -- If we'll be converting to a JSON object, we'll want to sort the keys so that the\r\n    -- end result is deterministic.\r\n    --\r\n    local string_keys = {}\r\n    local number_keys = {}\r\n    local number_keys_must_be_strings = false\r\n    local maximum_number_key\r\n\r\n    for key in pairs(T) do\r\n        if type(key) == 'string' then\r\n            table.insert(string_keys, key)\r\n        elseif type(key) == 'number' then\r\n            table.insert(number_keys, key)\r\n            if key <= 0 or key >= math.huge then\r\n                number_keys_must_be_strings = true\r\n            elseif not maximum_number_key or key > maximum_number_key then\r\n                maximum_number_key = key\r\n            end\r\n        else\r\n            self:onEncodeError(\"can't encode table with a key of type \" .. type(key), etc)\r\n        end\r\n    end\r\n\r\n    if #string_keys == 0 and not number_keys_must_be_strings then\r\n        --\r\n        -- An empty table, or a numeric-only array\r\n        --\r\n        if #number_keys > 0 then\r\n            return nil, maximum_number_key -- an array\r\n        elseif tostring(T) == 'JSON array' then\r\n            return nil\r\n        elseif tostring(T) == 'JSON object' then\r\n            return {}\r\n        else\r\n            -- have to guess, so we'll pick array, since empty arrays are likely more common than empty objects\r\n            return nil\r\n        end\r\n    end\r\n\r\n    table.sort(string_keys)\r\n\r\n    local map\r\n    if #number_keys > 0 then\r\n        --\r\n        -- If we're here then we have either mixed string/number keys, or numbers inappropriate for a JSON array\r\n        -- It's not ideal, but we'll turn the numbers into strings so that we can at least create a JSON object.\r\n        --\r\n\r\n        if self.noKeyConversion then\r\n            self:onEncodeError('a table with both numeric and string keys could be an object or array; aborting', etc)\r\n        end\r\n\r\n        --\r\n        -- Have to make a shallow copy of the source table so we can remap the numeric keys to be strings\r\n        --\r\n        map = {}\r\n        for key, val in pairs(T) do\r\n            map[key] = val\r\n        end\r\n\r\n        table.sort(number_keys)\r\n\r\n        --\r\n        -- Throw numeric keys in there as strings\r\n        --\r\n        for _, number_key in ipairs(number_keys) do\r\n            local string_key = tostring(number_key)\r\n            if map[string_key] == nil then\r\n                table.insert(string_keys, string_key)\r\n                map[string_key] = T[number_key]\r\n            else\r\n                self:onEncodeError(\r\n                    'conflict converting table with mixed-type keys into a JSON object: key ' ..\r\n                        number_key .. ' exists both as a string and a number.',\r\n                    etc\r\n                )\r\n            end\r\n        end\r\n    end\r\n\r\n    return string_keys, nil, map\r\nend\r\n\r\n--\r\n-- Encode\r\n--\r\n-- 'options' is nil, or a table with possible keys:\r\n--    pretty            -- if true, return a pretty-printed version\r\n--    indent            -- a string (usually of spaces) used to indent each nested level\r\n--    align_keys        -- if true, align all the keys when formatting a table\r\n--\r\nlocal encode_value  -- must predeclare because it calls itself\r\nfunction encode_value(self, value, parents, etc, options, indent)\r\n    if value == nil then\r\n        return 'null'\r\n    elseif type(value) == 'string' then\r\n        return json_string_literal(value)\r\n    elseif type(value) == 'number' then\r\n        if value ~= value then\r\n            --\r\n            -- NaN (Not a Number).\r\n            -- JSON has no NaN, so we have to fudge the best we can. This should really be a package option.\r\n            --\r\n            return 'null'\r\n        elseif value >= math.huge then\r\n            --\r\n            -- Positive infinity. JSON has no INF, so we have to fudge the best we can. This should\r\n            -- really be a package option. Note: at least with some implementations, positive infinity\r\n            -- is both \">= math.huge\" and \"<= -math.huge\", which makes no sense but that's how it is.\r\n            -- Negative infinity is properly \"<= -math.huge\". So, we must be sure to check the \">=\"\r\n            -- case first.\r\n            --\r\n            return '1e+9999'\r\n        elseif value <= -math.huge then\r\n            --\r\n            -- Negative infinity.\r\n            -- JSON has no INF, so we have to fudge the best we can. This should really be a package option.\r\n            --\r\n            return '-1e+9999'\r\n        else\r\n            return tostring(value)\r\n        end\r\n    elseif type(value) == 'boolean' then\r\n        return tostring(value)\r\n    elseif type(value) ~= 'table' then\r\n        self:onEncodeError(\"can't convert \" .. type(value) .. ' to JSON', etc)\r\n    else\r\n        --\r\n        -- A table to be converted to either a JSON object or array.\r\n        --\r\n        local T = value\r\n\r\n        if type(options) ~= 'table' then\r\n            options = {}\r\n        end\r\n        if type(indent) ~= 'string' then\r\n            indent = ''\r\n        end\r\n\r\n        if parents[T] then\r\n            self:onEncodeError('table ' .. tostring(T) .. ' is a child of itself', etc)\r\n        else\r\n            parents[T] = true\r\n        end\r\n\r\n        local result_value\r\n\r\n        local object_keys, maximum_number_key, map = object_or_array(self, T, etc)\r\n        if maximum_number_key then\r\n            --\r\n            -- An array...\r\n            --\r\n            local ITEMS = {}\r\n            for i = 1, maximum_number_key do\r\n                table.insert(ITEMS, encode_value(self, T[i], parents, etc, options, indent))\r\n            end\r\n\r\n            if options.pretty then\r\n                result_value = '[ ' .. table.concat(ITEMS, ', ') .. ' ]'\r\n            else\r\n                result_value = '[' .. table.concat(ITEMS, ',') .. ']'\r\n            end\r\n        elseif object_keys then\r\n            --\r\n            -- An object\r\n            --\r\n            local TT = map or T\r\n\r\n            if options.pretty then\r\n                local KEYS = {}\r\n                local max_key_length = 0\r\n                for _, key in ipairs(object_keys) do\r\n                    local encoded = encode_value(self, tostring(key), parents, etc, options, indent)\r\n                    if options.align_keys then\r\n                        max_key_length = math.max(max_key_length, #encoded)\r\n                    end\r\n                    table.insert(KEYS, encoded)\r\n                end\r\n                local key_indent = indent .. tostring(options.indent or '')\r\n                local subtable_indent =\r\n                    key_indent .. string.rep(' ', max_key_length) .. (options.align_keys and '  ' or '')\r\n                local FORMAT = '%s%' .. string.format('%d', max_key_length) .. 's: %s'\r\n\r\n                local COMBINED_PARTS = {}\r\n                for i, key in ipairs(object_keys) do\r\n                    local encoded_val = encode_value(self, TT[key], parents, etc, options, subtable_indent)\r\n                    table.insert(COMBINED_PARTS, string.format(FORMAT, key_indent, KEYS[i], encoded_val))\r\n                end\r\n                result_value = '{\\n' .. table.concat(COMBINED_PARTS, ',\\n') .. '\\n' .. indent .. '}'\r\n            else\r\n                local PARTS = {}\r\n                for _, key in ipairs(object_keys) do\r\n                    local encoded_val = encode_value(self, TT[key], parents, etc, options, indent)\r\n                    local encoded_key = encode_value(self, tostring(key), parents, etc, options, indent)\r\n                    table.insert(PARTS, string.format('%s:%s', encoded_key, encoded_val))\r\n                end\r\n                result_value = '{' .. table.concat(PARTS, ',') .. '}'\r\n            end\r\n        else\r\n            --\r\n            -- An empty array/object... we'll treat it as an array, though it should really be an option\r\n            --\r\n            result_value = '[]'\r\n        end\r\n\r\n        parents[T] = false\r\n        return result_value\r\n    end\r\nend\r\n\r\nfunction OBJDEF:encode(value, etc, options)\r\n    if type(self) ~= 'table' or self.__index ~= OBJDEF then\r\n        OBJDEF:onEncodeError('JSON:encode must be called in method format', etc)\r\n    end\r\n    return encode_value(self, value, {}, etc, options or nil)\r\nend\r\n\r\nfunction OBJDEF:encode_pretty(value, etc, options)\r\n    if type(self) ~= 'table' or self.__index ~= OBJDEF then\r\n        OBJDEF:onEncodeError('JSON:encode_pretty must be called in method format', etc)\r\n    end\r\n    return encode_value(self, value, {}, etc, options or default_pretty_options)\r\nend\r\n\r\nfunction OBJDEF.__tostring()\r\n    return 'JSON encode/decode package'\r\nend\r\n\r\nOBJDEF.__index = OBJDEF\r\n\r\nfunction OBJDEF:new(args)\r\n    local new = {}\r\n\r\n    if args then\r\n        for key, val in pairs(args) do\r\n            new[key] = val\r\n        end\r\n    end\r\n\r\n    return setmetatable(new, OBJDEF)\r\nend\r\n\r\nreturn OBJDEF:new()\r\n\r\n--\r\n-- Version history:\r\n--\r\n--   20141223.14   The encode_pretty() routine produced fine results for small datasets, but isn't really\r\n--                 appropriate for anything large, so with help from Alex Aulbach I've made the encode routines\r\n--                 more flexible, and changed the default encode_pretty() to be more generally useful.\r\n--\r\n--                 Added a third 'options' argument to the encode() and encode_pretty() routines, to control\r\n--                 how the encoding takes place.\r\n--\r\n--                 Updated docs to add assert() call to the loadfile() line, just as good practice so that\r\n--                 if there is a problem loading JSON.lua, the appropriate error message will percolate up.\r\n--\r\n--   20140920.13   Put back (in a way that doesn't cause warnings about unused variables) the author string,\r\n--                 so that the source of the package, and its version number, are visible in compiled copies.\r\n--\r\n--   20140911.12   Minor lua cleanup.\r\n--                 Fixed internal reference to 'JSON.noKeyConversion' to reference 'self' instead of 'JSON'.\r\n--                 (Thanks to SmugMug's David Parry for these.)\r\n--\r\n--   20140418.11   JSON nulls embedded within an array were being ignored, such that\r\n--                     [\"1\",null,null,null,null,null,\"seven\"],\r\n--                 would return\r\n--                     {1,\"seven\"}\r\n--                 It's now fixed to properly return\r\n--                     {1, nil, nil, nil, nil, nil, \"seven\"}\r\n--                 Thanks to \"haddock\" for catching the error.\r\n--\r\n--   20140116.10   The user's JSON.assert() wasn't always being used. Thanks to \"blue\" for the heads up.\r\n--\r\n--   20131118.9    Update for Lua 5.3... it seems that tostring(2/1) produces \"2.0\" instead of \"2\",\r\n--                 and this caused some problems.\r\n--\r\n--   20131031.8    Unified the code for encode() and encode_pretty(); they had been stupidly separate,\r\n--                 and had of course diverged (encode_pretty didn't get the fixes that encode got, so\r\n--                 sometimes produced incorrect results; thanks to Mattie for the heads up).\r\n--\r\n--                 Handle encoding tables with non-positive numeric keys (unlikely, but possible).\r\n--\r\n--                 If a table has both numeric and string keys, or its numeric keys are inappropriate\r\n--                 (such as being non-positive or infinite), the numeric keys are turned into\r\n--                 string keys appropriate for a JSON object. So, as before,\r\n--                         JSON:encode({ \"one\", \"two\", \"three\" })\r\n--                 produces the array\r\n--                         [\"one\",\"two\",\"three\"]\r\n--                 but now something with mixed key types like\r\n--                         JSON:encode({ \"one\", \"two\", \"three\", SOMESTRING = \"some string\" }))\r\n--                 instead of throwing an error produces an object:\r\n--                         {\"1\":\"one\",\"2\":\"two\",\"3\":\"three\",\"SOMESTRING\":\"some string\"}\r\n--\r\n--                 To maintain the prior throw-an-error semantics, set\r\n--                      JSON.noKeyConversion = true\r\n--\r\n--   20131004.7    Release under a Creative Commons CC-BY license, which I should have done from day one, sorry.\r\n--\r\n--   20130120.6    Comment update: added a link to the specific page on my blog where this code can\r\n--                 be found, so that folks who come across the code outside of my blog can find updates\r\n--                 more easily.\r\n--\r\n--   20111207.5    Added support for the 'etc' arguments, for better error reporting.\r\n--\r\n--   20110731.4    More feedback from David Kolf on how to make the tests for Nan/Infinity system independent.\r\n--\r\n--   20110730.3    Incorporated feedback from David Kolf at http://lua-users.org/wiki/JsonModules:\r\n--\r\n--                   * When encoding lua for JSON, Sparse numeric arrays are now handled by\r\n--                     spitting out full arrays, such that\r\n--                        JSON:encode({\"one\", \"two\", [10] = \"ten\"})\r\n--                     returns\r\n--                        [\"one\",\"two\",null,null,null,null,null,null,null,\"ten\"]\r\n--\r\n--                     In 20100810.2 and earlier, only up to the first non-null value would have been retained.\r\n--\r\n--                   * When encoding lua for JSON, numeric value NaN gets spit out as null, and infinity as \"1+e9999\".\r\n--                     Version 20100810.2 and earlier created invalid JSON in both cases.\r\n--\r\n--                   * Unicode surrogate pairs are now detected when decoding JSON.\r\n--\r\n--   20100810.2    added some checking to ensure that an invalid Unicode character couldn't leak in to the UTF-8 encoding\r\n--\r\n--   20100731.1    initial public release\r\n--\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ObjPoolUtilModule","guid":[2729864637,1304447132,2322341388,2859273176],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ObjPoolUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"---对象池工具模块\r\n---@module ObjPoolUtil\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Yen Yuan\r\n---@class ObjPoolUtil\r\nlocal ObjPoolUtil = class('ObjPoolUtil')\r\n\r\n---创建某一个对象的对象池\r\n---@param _folderName Object 管理的目录\r\n---@param _objName string 对象的Archetype名\r\n---@param _maxCount number 对象池最大上限，不填则为100\r\n---@return ObjPoolUtil\r\nfunction ObjPoolUtil.static.Newpool(_folderName, _objName, _maxCount)\r\n    if _folderName == nil or _objName == nil then\r\n        error('[ObjPoolUtil] 管理目录或管理对象为空')\r\n    end\r\n    if _maxCount == nil then\r\n        _maxCount = 100\r\n    end\r\n    local realPool = class(_objName .. 'Pool', ObjPoolUtil)\r\n    realPool.static.obj = _objName\r\n    realPool.static.folder = _folderName\r\n    realPool.static.maxCount = _maxCount\r\n    realPool.pool = {}\r\n    print(string.format('[ObjPoolUtil] 创建了一个%s的对象池，目录为%s', _objName, _folderName))\r\n    return realPool\r\nend\r\n\r\n---从池中创建对象到世界下\r\n---@param _position Vector3\r\n---@param _rotation EulerDegree\r\nfunction ObjPoolUtil:Spawn(_position, _rotation)\r\n    local realObj = nil\r\n    if #self.pool == 0 then\r\n        realObj = world:CreateInstance(self.obj, self.obj, self.folder, _position, _rotation)\r\n        if realObj == nil then\r\n            error(string.format('[ObjPoolUtil] Archetype下没有名为%s的对象', self.obj))\r\n            return\r\n        end\r\n        return realObj\r\n    else\r\n        realObj = self.pool[1]\r\n        self.pool[1].Position = _position\r\n        self.pool[1].Rotation = _rotation\r\n        self.pool[1]:SetActive(true)\r\n        table.remove(self.pool, 1)\r\n        return realObj\r\n    end\r\nend\r\n\r\n---从世界中销毁对象到池中\r\n---@param _obj Object\r\nfunction ObjPoolUtil:Despawn(_obj)\r\n    if _obj == nil then\r\n        error('[ObjPoolUtil] 传入对象为空')\r\n    elseif #self.pool > self.maxCount then\r\n        error(string.format('[ObjPoolUtil] %s对象池已满，该对象会永久销毁', self.obj))\r\n        _obj:Destroy()\r\n    else\r\n        table.insert(self.pool, _obj)\r\n        _obj:SetActive(false)\r\n    end\r\nend\r\n\r\nreturn ObjPoolUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"SoundUtilModule","guid":[375943343,233195050,2377557310,1976802289],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"SoundUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 音效播放模块\r\n---@module SoundUtil\r\n---@copyright Lilith Games, Avatar Team\r\n---@author Sharif Ma\r\n---@class SoundUtil\r\nlocal SoundUtil = {}\r\n\r\nfunction SoundUtil:Init()\r\n    print('[SoundUtil] Init()')\r\n    self.SoundPlaying = {}\r\n    self.Table_Sound = Config.Sound\r\nend\r\n\r\n---创建一个新音效并播放\r\n---@param _ID number 音效的ID\r\n---@param  _SoundSourceObj Object 音效的挂载物体,不填则为2D音效,挂载在主摄像机上\r\nfunction SoundUtil:PlaySound(_ID, _SoundSourceObj)\r\n    local Info, _Duration\r\n    _SoundSourceObj = _SoundSourceObj or world.CurrentCamera\r\n    Info = self.Table_Sound[_ID]\r\n    assert(Info, '[SoundUtil] 表中不存在该ID的音效')\r\n    _Duration = Info.Duration\r\n    local sameSoundPlayingNum = 0\r\n    for k, v in pairs(self.SoundPlaying) do\r\n        if v == _ID then\r\n            sameSoundPlayingNum = sameSoundPlayingNum + 1\r\n        end\r\n    end\r\n    if sameSoundPlayingNum > 0 and not Info.CoverPlay then\r\n        print(string.format('[SoundUtil] %s音效CoverPlay字段为false，不能覆盖播放', _ID))\r\n        return\r\n    end\r\n\r\n    local Audio = world:CreateObject('AudioSource', 'Audio_' .. Info.FileName, _SoundSourceObj)\r\n    Audio.LocalPosition = Vector3.Zero\r\n    Audio.SoundClip = ResourceManager.GetSoundClip('Audio/' .. Info.FileName)\r\n    print('[SoundUtil] Audio.SoundClip', Audio.SoundClip)\r\n    Audio.Volume = Info.Volume\r\n    Audio.MaxDistance = 10\r\n    Audio.MinDistance = 10\r\n    Audio.Loop = Info.IsLoop\r\n    Audio:Play()\r\n    table.insert(self.SoundPlaying, _ID)\r\n    _Duration = _Duration or 1\r\n    invoke(\r\n        function()\r\n            if Audio then\r\n                Audio:Destroy()\r\n            end\r\n        end,\r\n        _Duration\r\n    )\r\n    invoke(\r\n        function()\r\n            for k, v in pairs(self.SoundPlaying) do\r\n                if v == _ID then\r\n                    table.remove(self.SoundPlaying, k)\r\n                end\r\n            end\r\n        end,\r\n        _Duration\r\n    )\r\nend\r\n\r\nreturn SoundUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"LinkedListModule","guid":[572803863,1537884583,2902871108,3023603150],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"LinkedListModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- C# 双向链表\r\n-- @module C# doubly linked list implemented with lua\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Bruce Chen\r\n-- @see https://wiki.lilithgames.com/x/7yRZAg\r\n-- @see https://github.com/BruceCheng1995/LuaLinkedList\r\n\r\nlocal LinkedList = {}\r\nlocal LinkedNode = {}\r\nLinkedNode.__index = LinkedNode\r\n\r\nlocal NativePrint = print\r\nlocal EmptuFunc = function()\r\nend\r\n--是否开放内部日志\r\nfunction LinkedList:EnableLog(_enable)\r\n    if _enable then\r\n        print = NativePrint\r\n    else\r\n        print = EmptuFunc\r\n    end\r\nend\r\nLinkedList:EnableLog(false)\r\n--新建节点\r\nfunction LinkedNode:new(value, list)\r\n    local o = {}\r\n    setmetatable(o, self)\r\n    o.List = list\r\n    o.Next = nil\r\n    o.Prev = nil\r\n    o.Value = value\r\n    return o\r\nend\r\n--克隆这个节点\r\nfunction LinkedNode:Clone()\r\n    return LinkedNode:new(self.Value, nil)\r\nend\r\n--节点失效\r\nfunction LinkedNode:Invalidate()\r\n    self.Next = nil\r\n    self.Prev = nil\r\n    self.List = nil\r\nend\r\n--打印\r\nfunction LinkedNode:tostring()\r\n    return tostring(self.Value)\r\nend\r\nLinkedNode.__tostring = LinkedNode.tostring\r\n\r\n--验证新节点是否是自由节点\r\nfunction LinkedList:ValidateNewNode(node)\r\n    if not node then\r\n        return false\r\n    end\r\n    --assert(LinkedNode:include(node),\"instance of LinkedNode needed.\")\r\n    if node.List ~= nil then\r\n        return false\r\n    end\r\n    return true\r\nend\r\n\r\n--验证该节点是否是属于该表\r\nfunction LinkedList:ValidateNode(node)\r\n    if not node then\r\n        return false\r\n    end\r\n    --assert(LinkedNode:include(node),\"instance of LinkedNode needed.\")\r\n    if node.List ~= self then\r\n        return false\r\n    end\r\n    return true\r\nend\r\n\r\n--将节点插入到node节点之前(list:链表,node:插在这个节点前面,newnode:被插入的节点)\r\nlocal function InternalInsertNodeBefore(list, node, newnode)\r\n    newnode.Next = node\r\n    newnode.Prev = node.Prev\r\n    node.Prev.Next = newnode\r\n    node.Prev = newnode\r\n    list.Count = list.Count + 1\r\nend\r\n\r\n--将节点插入到一个空链表之前(list:链表,newnode:被插入的节点)\r\nlocal function InternalInsertNodeToEmptyList(list, newnode)\r\n    newnode.Next = newnode\r\n    newnode.Prev = newnode\r\n    list.First = newnode\r\n    list.Count = list.Count + 1\r\nend\r\n\r\n--移除链表中的节点(list:链表,node:被删除的节点)\r\nlocal function InternalRemoveNode(list, node)\r\n    if node.Next == node then\r\n        list.First = nil\r\n    else\r\n        node.Next.Prev = node.Prev\r\n        node.Prev.Next = node.Next\r\n        if list.First == node then\r\n            list.First = node.Next\r\n        end\r\n    end\r\n    node:Invalidate()\r\n    list.Count = list.Count - 1\r\nend\r\n\r\n--新建双向链表\r\nfunction LinkedList:new(tab)\r\n    local o = {}\r\n    setmetatable(o, self)\r\n    o.Count = 0\r\n    o.First = nil\r\n    if type(tab) == 'table' then\r\n        for _, v in pairs(tab) do\r\n            o:AddLast(v)\r\n        end\r\n    end\r\n    return o\r\nend\r\n\r\n--Add Value\r\n--在尾部添加值(若传入值是表，则遍历表，并将所有值添加到尾部)\r\nfunction LinkedList:Add(value)\r\n    if type(value) == 'table' then\r\n        for _, v in pairs(value) do\r\n            self:AddLast(v)\r\n        end\r\n    else\r\n        self:AddLast(value)\r\n    end\r\nend\r\n\r\n--在尾部添加值\r\nfunction LinkedList:AddLast(value)\r\n    local newnode = LinkedNode:new(value, self)\r\n    if not self.First then\r\n        InternalInsertNodeToEmptyList(self, newnode)\r\n    else\r\n        InternalInsertNodeBefore(self, self.First, newnode)\r\n    end\r\n    return newnode\r\nend\r\n\r\n--在头部添加值\r\nfunction LinkedList:AddFirst(value)\r\n    local newnode = LinkedNode:new(value, self)\r\n    if not self.First then\r\n        InternalInsertNodeToEmptyList(self, newnode)\r\n    else\r\n        InternalInsertNodeBefore(self, self.First, newnode)\r\n        self.First = newnode\r\n    end\r\n    return newnode\r\nend\r\n\r\n--在指定节点后面添加值(node:插入在这个节点后,value:被插入的值)\r\nfunction LinkedList:AddAfter(node, value)\r\n    if not self:ValidateNewNode(node) then\r\n        return\r\n    end\r\n    local newnode = LinkedNode:new(value, self)\r\n    InternalInsertNodeBefore(self, node.Next, newnode)\r\n    return newnode\r\nend\r\n\r\n--在指定节点前面添加值(node:插入在这个节点前,value:被插入的值)\r\nfunction LinkedList:AddBefore(node, value)\r\n    if not self:ValidateNode(node) then\r\n        return\r\n    end\r\n    local newnode = LinkedNode:new(value, self)\r\n    InternalInsertNodeBefore(self, node, newnode)\r\n    if node == self.First then\r\n        self.First = newnode\r\n    end\r\n    return newnode\r\nend\r\n\r\n--Add Node\r\n--在头部添加节点\r\nfunction LinkedList:AddNodeFirst(node)\r\n    if not self:ValidateNewNode(node) then\r\n        return\r\n    end\r\n    if not self.First then\r\n        InternalInsertNodeToEmptyList(self, node)\r\n    else\r\n        InternalInsertNodeBefore(self, self.First, node)\r\n        self.First = node\r\n    end\r\n    node.List = self\r\nend\r\n\r\n--在尾部添加节点\r\nfunction LinkedList:AddNodeLast(node)\r\n    if not self:ValidateNewNode(node) then\r\n        return\r\n    end\r\n    if not self.First then\r\n        InternalInsertNodeToEmptyList(self, node)\r\n    else\r\n        InternalInsertNodeBefore(self, self.First, node)\r\n    end\r\n    node.List = self\r\nend\r\n\r\n--在指定节点后面添加值(node:插入在这个节点后,newnode:被插入的节点)\r\nfunction LinkedList:AddNodeAfter(node, newnode)\r\n    if not self:ValidateNode(node) and not self:ValidateNewNode(newnode) then\r\n        return\r\n    end\r\n    InternalInsertNodeBefore(self, node.Next, newnode)\r\n    newnode.List = self\r\nend\r\n\r\n--在指定节点后面添加值(node:插入在这个节点前,newnode:被插入的节点)\r\nfunction LinkedList:AddNodeBefore(node, newnode)\r\n    if not self:ValidateNode(node) and not self:ValidateNewNode(newnode) then\r\n        return\r\n    end\r\n    InternalInsertNodeBefore(self, node, newnode)\r\n    newnode.List = self\r\n    if node ~= self.First then\r\n        return\r\n    end\r\n    self.First = newnode\r\nend\r\n\r\n--Remove\r\n--找到表中的第一个指定值，并删除，返回是否命中\r\nfunction LinkedList:Remove(value)\r\n    local node = self:Find(value)\r\n    if not node then\r\n        return false\r\n    end\r\n    InternalRemoveNode(self, node)\r\n    return true\r\nend\r\n\r\n--找到表中的第一个指定节点，并删除，返回是否命中\r\nfunction LinkedList:RemoveNode(node)\r\n    if not self:ValidateNode(node) then\r\n        return\r\n    end\r\n    InternalRemoveNode(self, node)\r\nend\r\n\r\n--移除头部节点\r\nfunction LinkedList:RemoveFirst()\r\n    if self.First == nil then\r\n        print('[LinkedList] list is empty.')\r\n    else\r\n        InternalRemoveNode(self, self.First)\r\n    end\r\nend\r\n\r\n--移除尾部节点\r\nfunction LinkedList:RemoveLast()\r\n    if self.First == nil then\r\n        print('[LinkedList] list is empty.')\r\n    else\r\n        InternalRemoveNode(self, self.First.Prev)\r\n    end\r\nend\r\n\r\n--Find\r\n--尝试找到表中的第一个指定值，若有则返回这个节点\r\nfunction LinkedList:Find(value)\r\n    local ptrnode = self.First\r\n    if value ~= nil then\r\n        while ptrnode.Value ~= value do\r\n            ptrnode = ptrnode.Next\r\n            if ptrnode == self.First then\r\n                goto close1\r\n            end\r\n        end\r\n        return ptrnode\r\n    else\r\n        while ptrnode.Value ~= nil do\r\n            ptrnode = ptrnode.Next\r\n            if ptrnode == self.First then\r\n                goto close1\r\n            end\r\n        end\r\n        return ptrnode\r\n    end\r\n    ::close1::\r\n    return\r\nend\r\n\r\n--尝试反向找到表中第一个指定值，若有则返回这个节点\r\nfunction LinkedList:FindLast(value)\r\n    if self.First == nil then\r\n        return\r\n    end\r\n    local prev = self.First.Prev\r\n    local ptrnode = prev\r\n    if value ~= nil then\r\n        while ptrnode.Value ~= value do\r\n            ptrnode = ptrnode.Prev\r\n            if ptrnode == Prev then\r\n                goto close2\r\n            end\r\n        end\r\n        return ptrnode\r\n    else\r\n        while ptrnode.Value ~= nil do\r\n            ptrnode = ptrnode.Prev\r\n            if ptrnode == prev then\r\n                goto close2\r\n            end\r\n        end\r\n        return ptrnode\r\n    end\r\n    ::close2::\r\n    return\r\nend\r\n\r\n--Other\r\n--清空链表\r\nfunction LinkedList:Clear()\r\n    local ptrnode = self.First\r\n    while ptrnode ~= nil do\r\n        local lastnode = ptrnode\r\n        ptrnode = ptrnode.Next\r\n        lastnode:Invalidate()\r\n    end\r\n    self.First = nil\r\n    self.Count = 0\r\nend\r\n\r\n--向给定table的指定位置插入数值(tab:被插入表,index:序号)\r\nfunction LinkedList:CopyTo(tab, index)\r\n    assert(type(tab) == 'table', '[LinkedList] bad argument \"table\"')\r\n    assert(index >= 1, '[LinkedList] Index out of range')\r\n    local ptrnode = self.First\r\n    if ptrnode == nil then\r\n        return\r\n    end\r\n    repeat\r\n        table.insert(tab, index, ptrnode.Value)\r\n        ptrnode = ptrnode.Next\r\n        index = index + 1\r\n    until (ptrnode == self.First)\r\nend\r\n\r\n--将链表中的数据拷贝到新表中，并将这个表输出\r\nfunction LinkedList:ToTable()\r\n    local tab = {}\r\n    self:CopyTo(tab, 1)\r\n    return tab\r\nend\r\n\r\n--克隆当前链表，并返回\r\nfunction LinkedList:Clone()\r\n    local newlist = LinkedList:new()\r\n    local ptrnode = self.First\r\n    repeat\r\n        local clnode = ptrnode:Clone()\r\n        newlist:AddNodeLast(clnode)\r\n        ptrnode = ptrnode.Next\r\n    until (ptrnode == self.First)\r\n    return newlist\r\nend\r\n\r\n--检查链表中是否包含指定值\r\nfunction LinkedList:Contains(value)\r\n    return self:Find(value) and true or false\r\nend\r\n\r\n--将链表反向\r\nfunction LinkedList:Reverse()\r\n    local tmp\r\n    if not self.First then\r\n        print('[LinkedList] list is empty')\r\n        return\r\n    end\r\n    self.First = self.First.Prev\r\n    for item in self:ipairer() do\r\n        tmp = item.Next\r\n        item.Next = item.Prev\r\n        item.Prev = tmp\r\n    end\r\nend\r\n\r\n--返回头部节点\r\nfunction LinkedList:GetFirst()\r\n    return self.First\r\nend\r\n\r\n--返回尾部节点\r\nfunction LinkedList:GetLast()\r\n    return self.First ~= nil and self.First.Prev or nil\r\nend\r\n\r\n--返回第index个节点\r\nfunction LinkedList:GetNode(index)\r\n    if index < 1 or index > self.Count then\r\n        print('[LinkedList] Index out of range')\r\n        return\r\n    end\r\n    local ptrnode = self.First.Prev\r\n    while index > 0 do\r\n        ptrnode = ptrnode.Next\r\n        index = index - 1\r\n    end\r\n    return ptrnode\r\nend\r\n\r\n--返回链表长度\r\nfunction LinkedList:Len()\r\n    return self.Count\r\nend\r\n\r\n--返回迭代器\r\nfunction LinkedList:ipairer()\r\n    local ptrnode = self:GetLast()\r\n    local passFirst = false\r\n    return function()\r\n        if ptrnode then\r\n            if ptrnode ~= self:GetLast() or not passFirst then\r\n                passFirst = true\r\n                ptrnode = ptrnode.Next\r\n                return ptrnode\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n--以文本方式表示此表\r\nfunction LinkedList:tostring()\r\n    local t = {}\r\n    for item in self:ipairer() do\r\n        table.insert(t, tostring(item))\r\n    end\r\n    return 'LinkedList:{' .. table.concat(t, ',') .. '}'\r\nend\r\n\r\nLinkedList.__index = LinkedList\r\nLinkedList.__tostring = LinkedList.tostring\r\n\r\nreturn {\r\n    list = setmetatable(LinkedList, {__call = LinkedList.new}),\r\n    node = setmetatable(LinkedNode, {__call = LinkedNode.new})\r\n}\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"GlobalFuncModule","guid":[397078907,1337606489,2918347355,1376574677],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"GlobalFuncModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 全局函数的定义\r\n--- @module GlobalFunc Defines\r\n--- @copyright Lilith Games, Avatar Team\r\n--- @author Sid Zhang\r\nlocal GlobalFunc = {}\r\n\r\n--- 埋点上传日志\r\n--- @param _tableName string 表名\r\nfunction GlobalFunc.UploadLogs(_tableName, ...)\r\n    local args = {...}\r\n    if localPlayer then\r\n        pcall(\r\n            function()\r\n                TrackService.CloudLogFromClient({_tableName, table.unpack(args)})\r\n            end\r\n        )\r\n    else\r\n        pcall(\r\n            function()\r\n                TrackService.CloudLogFromServer({_tableName, table.unpack(args)})\r\n            end\r\n        )\r\n    end\r\nend\r\n\r\nreturn GlobalFunc\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"TweenControllerModule","guid":[3340226311,3486273272,3143424947,180252541],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"TweenControllerModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"---控制某个变量随时间变化的协程类\r\n---@module TweenController\r\n---@copyright Lilith Games, Avatar Team\r\n---@author An Dai\r\nlocal TweenController = class('TweenController')\r\n\r\n---_name:类名，_sender：使用它的类，_getTotalTime:获得总时间的方法，_update _callback:回调函数 _isFix：是否在fixupdate中执行， _start: 开始函数\r\nfunction TweenController:initialize(_name, _sender, _getTotalTime, _update, _callback, _isFix, _start)\r\n    _start = _start or function()\r\n            return\r\n        end\r\n\r\n    local updateStr = (_isFix and 'Fix' or '') .. 'Update'\r\n\r\n    self.Start = function(self)\r\n        _start()\r\n        self.totalTime = _getTotalTime()\r\n        self.time = 0\r\n        _sender[updateStr .. 'Table'][_name] = self\r\n    end\r\n\r\n    self[updateStr] = function(self, _dt)\r\n        self.time = self.time + _dt\r\n        if (self.time > self.totalTime) then\r\n            self:Stop()\r\n            goto UpdateReturn\r\n        end\r\n        _update(self.time, self.totalTime, _dt)\r\n        ::UpdateReturn::\r\n    end\r\n\r\n    self.Stop = function(self)\r\n        _sender[updateStr .. 'Table'][_name] = nil\r\n        _callback()\r\n    end\r\nend\r\n\r\nreturn TweenController\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ValueChangeUtilModule","guid":[506887186,2798406641,2460390889,2104928690],"parentGuid":[626626282,3227665360,2471910562,2840544587],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ValueChangeUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 值改变及值改变事件\r\n--- @module ValueChangeUtil Module\r\n--- @copyright Lilith Games, Avatar Team\r\n--- @author Xin Tan\r\nlocal ValueChangeUtil = {}\r\n\r\n--- 数据变化事件\r\n--- @param _table table 事件表\r\n--- @param _index string 索引\r\n--- @param _oldValue mixed 旧值\r\n--- @param _newValue mixed 新值\r\n--- @param _targetPlayer PlayerInstance 这条数据对应的玩家实例\r\nfunction ValueChangeUtil.DataChangeEvent(_table, _index, _oldValue, _newValue)\r\n\tif not _table[_index] or type(_table[_index]) ~= \"function\" then\r\n\t\treturn\r\n\tend\r\n\t_table[_index](_oldValue, _newValue)\r\nend\r\n\r\n--- 将目标表（或其中某个值）改为新值\r\n--- @param _table table 目标表\r\n--- @param _index string 目标索引（改整个目标表时填nil）\r\n--- @param _value mixed  新值\r\n--- @param _eventTable table 数值改变事件表（不响应时不传）\r\nfunction ValueChangeUtil.ChangeValue(_table, _index, _value, _eventTable)\r\n\tif type(_table) ~= \"table\" then\r\n\t\tprint(\"[error]传入的目标表类型错误\")\r\n\t\treturn\r\n\tend\r\n\t\r\n    local tmp = _table\r\n    local eventtmp = _eventTable or false\r\n\t\r\n\t-- 参数含索引时\r\n\tif _index then\r\n\t\tlocal idx = {}\r\n\t\tif type(_index) == \"string\" then\r\n\t\t\t-- 将索引通过'.'拆开\r\n\t\t\tidx = string.split(_index, '.')\r\n\t\telseif type(_index) == \"table\" then\r\n\t\t\tidx = _index\r\n\t\tend\r\n\t\t-- 一层层向下索引\r\n\t\tfor i = 1, #idx - 1 do\r\n\t\t\t-- 若目标表没有对应的索引则建立空表\r\n\t\t\tif type(tmp[idx[i]]) ~= \"table\" then\r\n\t\t\t\ttmp[idx[i]] = {}\r\n\t\t\tend\r\n            tmp = tmp[idx[i]]\r\n            if eventtmp then\r\n                if type(eventtmp[idx[i]]) ~= \"table\" then\r\n                    eventtmp[idx[i]] = {}\r\n                end\r\n                eventtmp = eventtmp[idx[i]]\r\n            end\r\n\t\tend\r\n\t\t\r\n\t\t-- 若目标值不是table，则直接赋值\r\n\t\tif type(_value) ~= \"table\" then\r\n            local oldValue = table.shallowcopy(tmp[idx[#idx]])\r\n            tmp[idx[#idx]] = _value\r\n            if eventtmp then\r\n                ValueChangeUtil.DataChangeEvent(eventtmp, idx[#idx], oldValue, _value)\r\n            end\r\n\t\t\treturn\r\n\t\telse\r\n\t\t\t-- 目标值是table\r\n\t\t\t-- 若目标索引不是table，则创建table\r\n\t\t\tif type(tmp[idx[#idx]]) ~= \"table\" then\r\n                tmp[idx[#idx]] = {}\r\n                if eventtmp and type( eventtmp[idx[#idx]]) ~= \"table\" then\r\n                    eventtmp[idx[#idx]] = {}\r\n                end\r\n\t\t\tend\r\n            tmp = tmp[idx[#idx]]\r\n            if eventtmp then\r\n                eventtmp = eventtmp[idx[#idx]]\r\n            end\r\n\t\tend\r\n\telse\r\n\t\t-- 参数无索引时，从目标表根目录开始同步\r\n\t\tif type(_value) ~= \"table\" then\r\n\t\t\tprint(\"[error]传入的新值类型错误\")\r\n\t\t\treturn\r\n\t\tend\r\n\tend\r\n\t\r\n\t-- 清除目标索引表与新值的差集\r\n\tfor k, v in pairs(tmp) do\r\n        if not _value[k] then \r\n            local oldValue = tmp[k]\r\n            tmp[k] = nil\r\n            if eventtmp then\r\n                ValueChangeUtil.DataChangeEvent(eventtmp, k, oldValue, nil)\r\n            end\r\n        end\r\n\tend\r\n\t\r\n\t-- 逐层覆盖数据\r\n\tfor k, v in pairs(_value) do\r\n\t\t-- 如果值为table则向下递归\r\n\t\tif type(v) == \"table\" then\r\n            ValueChangeUtil.ChangeValue(tmp, k, v, eventtmp)\r\n\t\telse\r\n\t\t\t-- 若值不是table，则直接赋值\r\n            local oldValue = tmp[k]\r\n            tmp[k] = v\r\n            if eventtmp then\r\n                ValueChangeUtil.DataChangeEvent(eventtmp, k, oldValue, v)\r\n            end\r\n\t\tend\r\n\tend\r\n\tif eventtmp then\r\n\t\tValueChangeUtil.DataChangeEvent(eventtmp, \"parentTableEvent\")\r\n\tend\r\nend\r\n\r\n--- 进行数据验证，将对照表中存在而目标表中不存在键补充至目标表中\r\n--- @param _table table 目标表\r\n--- @param _contrast table 对照表\r\nfunction ValueChangeUtil.VerifyTable(_table, _contrast)\r\n\tfor k, v in pairs(_contrast) do\r\n\t\t-- 如果值为table则向下递归\r\n\t\tif type(v) == \"table\" then\r\n            if not _table[k] then\r\n\t\t\t\t_table[k] = table.shallowcopy(v)\r\n\t\t\telse\r\n\t\t\t\tValueChangeUtil.VerifyTable(_table[k], v)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- 若值不是table，则直接校对\r\n            if not _table[k] then _table[k] = v end\r\n\t\tend\r\n\tend\r\nend\r\n\r\nreturn ValueChangeUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cFolderObject","name":"Framework","guid":[756373066,1240223530,2766704094,915472147],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Framework"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cModuleScriptObject","name":"FrameworkConfigModule","guid":[3532304481,3064676706,3106629846,811992798],"parentGuid":[756373066,1240223530,2766704094,915472147],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"FrameworkConfigModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 框架配置\r\n--- @module Framework Global FrameworkConfig\r\n--- @copyright Lilith Games, Avatar Team\r\n--- @author Yuancheng Zhang\r\nlocal FrameworkConfig = {\r\n    -- 启动心跳\r\n    HeartbeatStart = true,\r\n    Server = {\r\n        -- 心跳包间隔时间，单位：秒\r\n        HeartbeatDelta = 1,\r\n        -- 心跳阈值，单位：秒，范围定义如下：\r\n        --          0s -> threshold_1   : connected\r\n        -- threshold_1 -> threshold_2   : disconnected, but player can reconnect\r\n        -- threshold_2 -> longer        : disconnected, remove player\r\n        HeartbeatThreshold1 = 9,\r\n        HeartbeatThreshold2 = 10,\r\n        -- 显示心跳日志\r\n        ShowHeartbeatLog = false,\r\n        -- 插件中需要使用声明周期的服务器模块目录\r\n        PluginModules = {},\r\n        -- 插件中服务器需要生成的CustomEvent, 模块中必须得有ServerEvents\r\n        PluginEvents = {}\r\n    },\r\n    Client = {\r\n        -- 心跳包间隔时间，单位：秒\r\n        HeartbeatDelta = 1,\r\n        -- 心跳阈值，单位：秒，范围定义如下：\r\n        --          0s -> threshold_1   : connected\r\n        -- threshold_1 -> threshold_2   : disconnected, weak network, can reconnect\r\n        -- threshold_2 -> longer        : disconnected, quit server\r\n        HeartbeatThreshold1 = 9,\r\n        HeartbeatThreshold2 = 10,\r\n        -- 显示心跳日志\r\n        ShowHeartbeatLog = false,\r\n        -- 插件中需要使用声明周期的客户端模块目录\r\n        PluginModules = {},\r\n        -- 插件中客户端需要生成的CustomEvent，模块中必须得有ClientEvents\r\n        PluginEvents = {}\r\n    }\r\n}\r\n\r\nreturn FrameworkConfig\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ServerHeartbeatModule","guid":[4201358790,153109338,3063225923,2088318747],"parentGuid":[756373066,1240223530,2766704094,915472147],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ServerHeartbeatModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 游戏服务器心跳\r\n--- @module Server Heartbeat, Server-side\r\n--- @copyright Lilith Games, Avatar Team\r\n--- @author Yuancheng Zhang\r\nlocal ServerHeartbeat = {}\r\n\r\n-- Localize global vars\r\nlocal Setting = FrameworkConfig.Server\r\n\r\n-- 心跳包间隔时间，单位：秒\r\nlocal HEARTBEAT_DELTA = Setting.HeartbeatDelta\r\n\r\n-- 心跳阈值，单位：秒，范围定义如下：\r\n--          0s -> threshold_1   : connected\r\n-- threshold_1 -> threshold_2   : disconnected, but player can rejoin\r\n-- threshold_2 -> longer        : disconnected, remove player\r\nlocal HEARTBEAT_THRESHOLD_1 = Setting.HeartbeatThreshold1 * 1000 -- second => ms\r\nlocal HEARTBEAT_THRESHOLD_2 = Setting.HeartbeatThreshold2 * 1000 -- second => ms\r\n\r\n-- 玩家心跳连接状态\r\nlocal HeartbeatEnum = {\r\n    CONNECT = 1, -- 在线\r\n    DISCONNECT = 2 -- 离线\r\n}\r\n\r\n-- 正在运行\r\nlocal running = false\r\n\r\n-- 上一次客户端发来的心跳时间戳缓存\r\nlocal cache = {}\r\n\r\n-- 临时变量\r\nlocal diff  -- 时间戳插值\r\nlocal sTmpTs, cTmpTs  -- 时间戳缓存\r\n\r\n--- 打印心跳日志\r\nlocal PrintHb = Setting.ShowHeartbeatLog and function(...)\r\n        print('[Heartbeat][Server]', ...)\r\n    end or function()\r\n    end\r\n\r\n--! 外部接口\r\n\r\n--- 初始化心跳包\r\nfunction ServerHeartbeat.Init()\r\n    print('[Heartbeat][Server] Init()')\r\n    CheckSetting()\r\n    InitEventsAndListeners()\r\nend\r\n\r\n--- 开始发出心跳\r\nfunction ServerHeartbeat.Start()\r\n    print('[Heartbeat][Server] Start()')\r\n    running = true\r\n    while (running) do\r\n        Update()\r\n        wait(HEARTBEAT_DELTA)\r\n    end\r\nend\r\n\r\n--- 停止心跳\r\nfunction ServerHeartbeat.Stop()\r\n    print('[Heartbeat][Server] Stop()')\r\n    running = false\r\nend\r\n\r\n--! 私有函数\r\n\r\n--- 校验心跳参数\r\nfunction CheckSetting()\r\n    assert(HEARTBEAT_DELTA >= 1, '[Heartbeat][Server] HEARTBEAT_DELTA 必须大于1秒')\r\n    assert(HEARTBEAT_THRESHOLD_1 >= HEARTBEAT_DELTA, '[Heartbeat][Server] HEARTBEAT_THRESHOLD_1 >= HEARTBEAT_DELTA')\r\n    assert(\r\n        HEARTBEAT_THRESHOLD_2 >= HEARTBEAT_THRESHOLD_1,\r\n        '[Heartbeat][Server] HEARTBEAT_THRESHOLD_2 >= HEARTBEAT_THRESHOLD_1'\r\n    )\r\nend\r\n\r\n--- 初始化事件和绑定Handler\r\nfunction InitEventsAndListeners()\r\n    if world.S_Event == nil then\r\n        world:CreateObject('FolderObject', 'S_Event', world)\r\n    end\r\n    world:CreateObject('CustomEvent', 'HeartbeatC2SEvent', world.S_Event)\r\n    world.S_Event.HeartbeatC2SEvent:Connect(HeartbeatC2SEventHandler)\r\n\r\n    -- OnAwakeEvent（玩家加入前初始化）\r\n    -- OnPlayerJoinEvent（玩家第一次加入，类似现在的OnPlayerAdded）\r\n    -- OnPlayerRejoinEvent（玩家离开房间后重新进入同一个房间）\r\n    -- OnPlayerDisconnectEvent（未接收到玩家心跳等待重连，在服务器第二个阶段）\r\n    -- OnPlayerReconnectEvent（玩家断线后重连）\r\n    -- OnPlayerLeaveEvent（玩家彻底离开，退出房间）\r\n    world:CreateObject('CustomEvent', 'OnAwakeEvent', world.S_Event)\r\n    world:CreateObject('CustomEvent', 'OnPlayerJoinEvent', world.S_Event)\r\n    -- world:CreateObject('CustomEvent', 'OnPlayerRejoinEvent', world.S_Event)\r\n    world:CreateObject('CustomEvent', 'OnPlayerDisconnectEvent', world.S_Event)\r\n    world:CreateObject('CustomEvent', 'OnPlayerReconnectEvent', world.S_Event)\r\n    world:CreateObject('CustomEvent', 'OnPlayerLeaveEvent', world.S_Event)\r\n\r\n    -- 玩家退出，发出OnPlayerLeaveEvent\r\n    world.OnPlayerRemoved:Connect(\r\n        function(_player)\r\n            if cache[_player] then\r\n                print('[Heartbeat][Server] OnPlayerLeaveEvent, 玩家主动离开游戏,', _player)\r\n                NetUtil.Fire_S('OnPlayerLeaveEvent', _player)\r\n            end\r\n        end\r\n    )\r\nend\r\n\r\n--- Update心跳\r\nfunction Update()\r\n    for p, v in pairs(cache) do\r\n        if p and not p:IsNull() then\r\n            sTmpTs = Timer.GetTimeMillisecond()\r\n            cTmpTs = v.cTimestamp\r\n            PrintHb(string.format('=> S = %s, C = %s, %s', sTmpTs, cTmpTs, p))\r\n            CheckPlayerStates(p, sTmpTs)\r\n            NetUtil.Fire_C('HeartbeatS2CEvent', p, sTmpTs, cTmpTs)\r\n        else\r\n            --* remove nil key from cache\r\n            cache[p] = nil\r\n        end\r\n    end\r\nend\r\n\r\n--- 心跳事件Handler\r\nfunction HeartbeatC2SEventHandler(_player, _cTimestamp, _sTimestamp)\r\n    if not running then\r\n        return\r\n    end\r\n    PrintHb(string.format('<= S = %s, C = %s, %s', _sTimestamp, _cTimestamp, _player))\r\n    CheckPlayerJoin(_player)\r\n    cache[_player].cTimestamp = _cTimestamp\r\n    cache[_player].sTimestamp = _sTimestamp\r\nend\r\n\r\n--- 收包时，检查玩家是否加入或重连\r\nfunction CheckPlayerJoin(_player)\r\n    if not cache[_player] then\r\n        --* 玩家新加入 OnPlayerJoinEvent\r\n        print('[Heartbeat][Server] OnPlayerJoinEvent, 新玩家加入,', _player)\r\n        NetUtil.Fire_S('OnPlayerJoinEvent', _player)\r\n        cache[_player] = {\r\n            state = HeartbeatEnum.CONNECT\r\n        }\r\n    elseif cache[_player].state == HeartbeatEnum.DISCONNECT then\r\n        --* 玩家断线重连 OnPlayerReconnectEvent\r\n        print('[Heartbeat][Server] OnPlayerReconnectEvent, 玩家断线重连,', _player)\r\n        NetUtil.Fire_S('OnPlayerReconnectEvent', _player)\r\n        cache[_player].state = HeartbeatEnum.CONNECT\r\n    end\r\nend\r\n\r\n--- 发包时，检查玩家是否掉线\r\nfunction CheckPlayerStates(_player, _sTimestam)\r\n    if not cache[_player].sTimestamp then\r\n        return\r\n    end\r\n    diff = _sTimestam - cache[_player].sTimestamp\r\n    PrintHb(string.format('==========================================> diff = %s, %s', diff * .001, _player))\r\n\r\n    if cache[_player].state == HeartbeatEnum.CONNECT and diff > HEARTBEAT_THRESHOLD_1 then\r\n        --* 玩家断线 OnPlayerReconnectEvent\r\n        print('[Heartbeat][Server] OnPlayerDisconnectEvent, 玩家离线, 等待断线重连,', _player)\r\n        NetUtil.Fire_S('OnPlayerDisconnectEvent', _player)\r\n        cache[_player].state = HeartbeatEnum.DISCONNECT\r\n    elseif cache[_player].state == HeartbeatEnum.DISCONNECT and diff > HEARTBEAT_THRESHOLD_2 then\r\n        --* 玩家彻底断线，剔除玩家\r\n        print('[Heartbeat][Server] OnPlayerLeaveEvent, 剔除离线玩家,', _player)\r\n        NetUtil.Fire_S('OnPlayerLeaveEvent', _player)\r\n        print('[Heartbeat][Server] OnPlayerLeave, 发送客户端离线事件,', _player)\r\n        NetUtil.Fire_C('OnPlayerLeaveEvent', _player)\r\n        cache[_player] = nil\r\n    end\r\nend\r\n\r\nreturn ServerHeartbeat\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ClientHeartbeatModule","guid":[2448379167,2886812809,2770381150,2704067643],"parentGuid":[756373066,1240223530,2766704094,915472147],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ClientHeartbeatModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 游戏心跳\r\n--- @module Client Heartbeat, Client-side\r\n--- @copyright Lilith Games, Avatar Team\r\n--- @author Yuancheng Zhang\r\nlocal ClientHeartbeat = {}\r\n\r\n-- Localize global vars\r\nlocal Setting = FrameworkConfig.Client\r\n\r\n-- 心跳包间隔时间，单位：秒\r\nlocal HEARTBEAT_DELTA = Setting.HeartbeatDelta\r\n\r\n-- 心跳阈值，单位：秒，范围定义如下：\r\n--          0s -> threshold_1   : connected\r\n-- threshold_1 -> threshold_2   : disconnected, weak network\r\n-- threshold_2 -> longer        : disconnected, quit server\r\nlocal HEARTBEAT_THRESHOLD_1 = Setting.HeartbeatThreshold1 * 1000 -- second => ms\r\nlocal HEARTBEAT_THRESHOLD_2 = Setting.HeartbeatThreshold2 * 1000 -- second => ms\r\n\r\n-- 玩家心跳连接状态\r\nlocal HeartbeatEnum = {\r\n    CONNECT = 1, -- 在线\r\n    DISCONNECT = 2 -- 离线\r\n}\r\n\r\n-- 正在运行\r\nlocal running = false\r\n\r\n-- 上一次服务器发来的心跳时间戳缓存\r\nlocal cache = {\r\n    sTimestamp = nil,\r\n    cTimestamp = nil\r\n}\r\n\r\n-- 临时变量\r\nlocal diff  -- 时间戳插值\r\nlocal sTmpTs, cTmpTs  -- 时间戳缓存\r\n\r\n--- 打印心跳日志\r\nlocal PrintHb = Setting.ShowHeartbeatLog and function(...)\r\n        print('[Heartbeat][Client]', ...)\r\n    end or function()\r\n    end\r\n\r\n--! 外部接口\r\n\r\n--- 初始化心跳包\r\nfunction ClientHeartbeat.Init()\r\n    print('[Heartbeat][Client] Init()')\r\n    CheckSetting()\r\n    InitEventsAndListeners()\r\nend\r\n\r\n--- 开始发出心跳\r\nfunction ClientHeartbeat.Start()\r\n    print('[Heartbeat][Client] Start()')\r\n    local cTimestamp\r\n    running = true\r\n    while (running) do\r\n        Update()\r\n        wait(HEARTBEAT_DELTA)\r\n    end\r\nend\r\n\r\n-- 停止心跳\r\nfunction ClientHeartbeat.Stop()\r\n    print('[Heartbeat][Client] Stop()')\r\n    running = false\r\nend\r\n\r\n--! 私有函数\r\n\r\n-- 校验心跳参数\r\nfunction CheckSetting()\r\n    assert(HEARTBEAT_DELTA >= 1, '[Heartbeat][Client] HEARTBEAT_DELTA 必须大于1秒')\r\n    assert(HEARTBEAT_THRESHOLD_1 >= HEARTBEAT_DELTA, '[Heartbeat][Client] HEARTBEAT_THRESHOLD_1 >= HEARTBEAT_DELTA')\r\n    assert(\r\n        HEARTBEAT_THRESHOLD_2 >= HEARTBEAT_THRESHOLD_1,\r\n        '[Heartbeat][Client] HEARTBEAT_THRESHOLD_2 >= HEARTBEAT_THRESHOLD_1'\r\n    )\r\nend\r\n\r\n--- 初始化事件和绑定Handler\r\nfunction InitEventsAndListeners()\r\n    if localPlayer.C_Event == nil then\r\n        world:CreateObject('FolderObject', 'C_Event', localPlayer)\r\n    end\r\n    world:CreateObject('CustomEvent', 'HeartbeatS2CEvent', localPlayer.C_Event)\r\n    localPlayer.C_Event.HeartbeatS2CEvent:Connect(HeartbeatS2CEventHandler)\r\n\r\n    -- OnPlayerJoinEvent（玩家第一次加入，类似现在的OnPlayerAdded）\r\n    -- OnPlayerRejoinEvent（玩家离线后重新进入同一个房间）\r\n    -- OnPlayerDisconnectEvent（未接收到服务器心跳，在客户端第二个阶段，玩家离线可重连，弱网，转菊花）\r\n    -- OnPlayerReconnectEvent（玩家断线后重连）\r\n    -- OnPlayerLeaveEvent（玩家彻底离开，退出房间）\r\n    world:CreateObject('CustomEvent', 'OnPlayerJoinEvent', localPlayer.C_Event)\r\n    -- world:CreateObject('CustomEvent', 'OnPlayerRejoinEvent', localPlayer.C_Event)\r\n    world:CreateObject('CustomEvent', 'OnPlayerDisconnectEvent', localPlayer.C_Event)\r\n    world:CreateObject('CustomEvent', 'OnPlayerReconnectEvent', localPlayer.C_Event)\r\n    world:CreateObject('CustomEvent', 'OnPlayerLeaveEvent', localPlayer.C_Event)\r\n\r\n    -- 掉线直接退出（默认，可选）\r\n    localPlayer.C_Event.OnPlayerLeaveEvent:Connect(QuitGame)\r\nend\r\n\r\n-- Update心跳\r\nfunction Update()\r\n    cTmpTs = Timer.GetTimeMillisecond()\r\n    sTmpTs = cache.sTimestamp\r\n    PrintHb(string.format('=> C = %s, S = %s, %s', cTmpTs, sTmpTs, localPlayer))\r\n    CheckPlayerState(p, cTmpTs)\r\n    NetUtil.Fire_S('HeartbeatC2SEvent', localPlayer, cTmpTs, sTmpTs)\r\nend\r\n\r\n--- 心跳事件Handler\r\nfunction HeartbeatS2CEventHandler(_stimestamp, _cTimestamp)\r\n    if not running then\r\n        return\r\n    end\r\n    PrintHb(string.format('<= C = %s, S = %s, %s', _cTimestamp, _stimestamp, localPlayer))\r\n    CheckPlayerJoin(_player, _sTimestamp)\r\n    cache.sTimestamp = _stimestamp\r\n    cache.cTimestamp = _cTimestamp\r\nend\r\n\r\n--- 收包时，检查玩家是否连接服务器，或者重新连接服务器\r\nfunction CheckPlayerJoin(_player, _sTimestamp)\r\n    if not cache.sTimestamp then\r\n        --* 玩家新加入 OnPlayerJoinEvent\r\n        print('[Heartbeat][Client] OnPlayerJoinEvent, 新玩家加入,', localPlayer)\r\n        NetUtil.Fire_C('OnPlayerJoinEvent', localPlayer)\r\n        cache.state = HeartbeatEnum.CONNECT\r\n    elseif cache.state == HeartbeatEnum.DISCONNECT then\r\n        --* 玩家断线重连 OnPlayerReconnectEvent\r\n        print('[Heartbeat][Client] OnPlayerReconnectEvent, 玩家断线重连,', localPlayer)\r\n        NetUtil.Fire_C('OnPlayerReconnectEvent', localPlayer)\r\n        cache.state = HeartbeatEnum.CONNECT\r\n    end\r\nend\r\n\r\n--- 发包时，检查玩家是否连接服务器\r\nfunction CheckPlayerState(_player, _cTimestamp)\r\n    if not cache.cTimestamp then\r\n        return\r\n    end\r\n    diff = _cTimestamp - cache.cTimestamp\r\n    PrintHb(string.format('==========================================> diff = %s, %s', diff * .001, localPlayer))\r\n    if cache.state == HeartbeatEnum.CONNECT and diff > HEARTBEAT_THRESHOLD_1 then\r\n        --* 玩家断线，弱网环境\r\n        print('[Heartbeat][Client] OnPlayerDisconnectEvent, 玩家离线, 弱网环境,', localPlayer)\r\n        NetUtil.Fire_C('OnPlayerDisconnectEvent', localPlayer)\r\n        cache.state = HeartbeatEnum.DISCONNECT\r\n    elseif cache.state == HeartbeatEnum.DISCONNECT and diff > HEARTBEAT_THRESHOLD_2 then\r\n        --* 玩家断线, 退出游戏\r\n        -- QuitGame()\r\n        NetUtil.Fire_C('OnPlayerLeaveEvent', localPlayer)\r\n    end\r\nend\r\n\r\n--- 退出游戏\r\nfunction QuitGame()\r\n    print('[Heartbeat][Client] Game.Quit(), 玩家退出游戏')\r\n    Game.Quit()\r\nend\r\n\r\nreturn ClientHeartbeat\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ServerModule","guid":[2630836918,4157751681,2512528126,1629800954],"parentGuid":[756373066,1240223530,2766704094,915472147],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ServerModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 游戏服务器主逻辑\r\n--- @module Game Server, Server-side\r\n--- @copyright Lilith Games, Avatar Team\r\n--- @author Yuancheng Zhang\r\nlocal Server = {}\r\n\r\n-- Localize global vars\r\nlocal CsvUtil, ModuleUtil = CsvUtil, ModuleUtil\r\nlocal Config = FrameworkConfig.Server\r\n\r\n-- 已经初始化，正在运行\r\nlocal initialized, running = false, false\r\n\r\n-- 含有InitDefault(),Init(),Update()的模块列表\r\nlocal initDefaultList, initList, updateList = {}, {}, {}\r\n\r\n--- 运行服务器\r\nfunction Server:Run()\r\n    print('[Server] Run()')\r\n    InitServer()\r\n    StartUpdate()\r\nend\r\n\r\n--- 停止Update\r\nfunction Server:Stop()\r\n    print('[Server] Stop()')\r\n    running = false\r\n    ServerHeartbeat.Stop()\r\nend\r\n\r\n--- 初始化\r\nfunction InitServer()\r\n    if initialized then\r\n        return\r\n    end\r\n    print('[Server] InitServer()')\r\n    InitRandomSeed()\r\n    InitHeartbeat()\r\n    InitServerCustomEvents()\r\n    InitCsvAndXls()\r\n    GenInitAndUpdateList()\r\n    RunInitDefault()\r\n    InitOtherModules()\r\n    initialized = true\r\nend\r\n\r\n--- 初始化服务器的CustomEvent\r\nfunction InitServerCustomEvents()\r\n    print('[Server] InitServerCustomEvents()')\r\n    if world.S_Event == nil then\r\n        world:CreateObject('FolderObject', 'S_Event', world)\r\n    end\r\n\r\n    -- 将插件中的CustomEvent放入Events.ClientEvents中\r\n    for _, m in pairs(Config.PluginEvents) do\r\n        local evts = _G[m].ServerEvents\r\n        assert(evts, string.format('[Server] %s 中不存在ServerEvents，请检查模块，或从FrameworkConfig删除此配置', m))\r\n        for __, evt in pairs(evts) do\r\n            if not table.exists(Events.ServerEvents, evt) then\r\n                table.insert(Events.ServerEvents, evt)\r\n            end\r\n        end\r\n    end\r\n\r\n    -- 生成CustomEvent节点\r\n    for _, evt in pairs(Events.ServerEvents) do\r\n        if world.S_Event[evt] == nil then\r\n            world:CreateObject('CustomEvent', evt, world.S_Event)\r\n        end\r\n    end\r\nend\r\n\r\n--- 初始化心跳包\r\nfunction InitHeartbeat()\r\n    assert(ServerHeartbeat, '[Server][Heartbeat] 找不到ServerHeartbeat,请联系张远程')\r\n    ServerHeartbeat.Init()\r\nend\r\n\r\n--- 生成框架需要的节点\r\nfunction InitCsvAndXls()\r\n    if not world.Global.Csv then\r\n        world:CreateObject('FolderObject', 'Csv', world.Global)\r\n    end\r\n    if not world.Global.Xls then\r\n        world:CreateObject('FolderObject', 'Xls', world.Global)\r\n    end\r\nend\r\n\r\n--- 生成需要Init和Update的模块列表\r\nfunction GenInitAndUpdateList()\r\n    ModuleUtil.GetModuleListWithFunc(Module.S_Module, 'InitDefault', initDefaultList)\r\n    ModuleUtil.GetModuleListWithFunc(Module.S_Module, 'Init', initList)\r\n    ModuleUtil.GetModuleListWithFunc(Module.S_Module, 'Update', updateList)\r\n    for _, m in pairs(FrameworkConfig.Server.PluginModules) do\r\n        ModuleUtil.GetModuleListWithFunc(m, 'InitDefault', initDefaultList)\r\n        ModuleUtil.GetModuleListWithFunc(m, 'Init', initList)\r\n        ModuleUtil.GetModuleListWithFunc(m, 'Update', updateList)\r\n    end\r\nend\r\n\r\n--- 执行默认的Init方法\r\nfunction RunInitDefault()\r\n    for _, m in ipairs(initDefaultList) do\r\n        m:InitDefault(m)\r\n    end\r\nend\r\n\r\n--- 初始化服务器随机种子\r\nfunction InitRandomSeed()\r\n    math.randomseed(os.time())\r\nend\r\n\r\n--- 初始化包含Init()方法的模块\r\nfunction InitOtherModules()\r\n    for _, m in ipairs(initList) do\r\n        m:Init()\r\n    end\r\nend\r\n\r\n--- 开始Update\r\nfunction StartUpdate()\r\n    print('[Server] StartUpdate()')\r\n    assert(not running, '[Server] StartUpdate() 正在运行')\r\n\r\n    running = true\r\n\r\n    -- 开启心跳\r\n    if FrameworkConfig.HeartbeatStart then\r\n        invoke(ServerHeartbeat.Start)\r\n    end\r\n\r\n    local dt = 0 -- delta time 每帧时间\r\n    local tt = 0 -- total time 游戏总时间\r\n    local now = Timer.GetTimeMillisecond --时间函数缓存\r\n    local prev, curr = now() / 1000, nil -- two timestamps\r\n\r\n    while (running and wait()) do\r\n        curr = now() / 1000\r\n        dt = curr - prev\r\n        tt = tt + dt\r\n        prev = curr\r\n        UpdateServer(dt, tt)\r\n    end\r\nend\r\n\r\n--- Update函数\r\n--- @param dt delta time 每帧时间\r\nfunction UpdateServer(_dt, _tt)\r\n    for _, m in ipairs(updateList) do\r\n        m:Update(_dt, _tt)\r\n    end\r\nend\r\n\r\nreturn Server\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ClientModule","guid":[2395017761,2395361208,3179134946,4246078414],"parentGuid":[756373066,1240223530,2766704094,915472147],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ClientModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 游戏客户端主逻辑\r\n-- @module Game Manager, Client-side\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Yuancheng Zhang\r\nlocal Client = {}\r\n\r\n-- Localize global vars\r\nlocal CsvUtil, XslUitl, ModuleUtil = CsvUtil, XslUitl, ModuleUtil\r\nlocal Config = FrameworkConfig.Client\r\n\r\n-- 已经初始化，正在运行\r\nlocal initialized, running = false, false\r\n\r\n-- 含有InitDefault(),Init(),Update()的模块列表\r\nlocal initDefaultList, initList, updateList = {}, {}, {}\r\n\r\n--- 运行客户端\r\nfunction Client:Run()\r\n    print('[Client] Run()')\r\n    InitClient()\r\n    StartUpdate()\r\nend\r\n\r\n--- 停止Update\r\nfunction Client:Stop()\r\n    print('[Client] Stop()')\r\n    running = false\r\n    ClientHeartbeat.Stop()\r\nend\r\n\r\n--- 初始化\r\nfunction InitClient()\r\n    if initialized then\r\n        return\r\n    end\r\n    print('[Client] InitClient()')\r\n    InitRandomSeed()\r\n    InitHeartbeat()\r\n    InitClientCustomEvents()\r\n    PreloadCsv()\r\n    GenInitAndUpdateList()\r\n    RunInitDefault()\r\n    InitOtherModules()\r\n    initialized = true\r\nend\r\n\r\n--- 初始化心跳包\r\nfunction InitHeartbeat()\r\n    assert(ClientHeartbeat, '[Client][Heartbeat] 找不到ClientHeartbeat,请联系张远程')\r\n    ClientHeartbeat.Init()\r\nend\r\n\r\n--- 初始化客户端的CustomEvent\r\nfunction InitClientCustomEvents()\r\n    if localPlayer.C_Event == nil then\r\n        world:CreateObject('FolderObject', 'C_Event', localPlayer)\r\n    end\r\n\r\n    -- 将插件中的CustomEvent放入Events.ClientEvents中\r\n    for _, m in pairs(Config.PluginEvents) do\r\n        local evts = _G[m].ClientEvents\r\n        assert(evts, string.format('[Client] %s 中不存在ClientEvents，请检查模块，或从FrameworkConfig删除此配置', m))\r\n        for __, evt in pairs(evts) do\r\n            if not table.exists(Events.ClientEvents, evt) then\r\n                table.insert(Events.ClientEvents, evt)\r\n            end\r\n        end\r\n    end\r\n\r\n    -- 生成CustomEvent节点\r\n    for _, evt in pairs(Events.ClientEvents) do\r\n        if localPlayer.C_Event[evt] == nil then\r\n            world:CreateObject('CustomEvent', evt, localPlayer.C_Event)\r\n        end\r\n    end\r\nend\r\n\r\n--- 生成需要Init和Update的模块列表\r\nfunction GenInitAndUpdateList()\r\n    ModuleUtil.GetModuleListWithFunc(Module.C_Module, 'InitDefault', initDefaultList)\r\n    ModuleUtil.GetModuleListWithFunc(Module.C_Module, 'Init', initList)\r\n    ModuleUtil.GetModuleListWithFunc(Module.C_Module, 'Update', updateList)\r\n    for _, m in pairs(Config.PluginModules) do\r\n        ModuleUtil.GetModuleListWithFunc(m, 'InitDefault', initDefaultList)\r\n        ModuleUtil.GetModuleListWithFunc(m, 'Init', initList)\r\n        ModuleUtil.GetModuleListWithFunc(m, 'Update', updateList)\r\n    end\r\nend\r\n\r\n--- 执行默认的Init方法\r\nfunction RunInitDefault()\r\n    for _, m in ipairs(initDefaultList) do\r\n        m:InitDefault(m)\r\n    end\r\nend\r\n\r\n--- 初始化客户端随机种子\r\nfunction InitRandomSeed()\r\n    math.randomseed(os.time())\r\nend\r\n\r\n--- 预加载所有的CSV表格\r\nfunction PreloadCsv()\r\n    print('[Client] PreloadCsv()')\r\n    if Config.ClientPreload and #Config.ClientPreload > 0 then\r\n        CsvUtil.PreloadCsv(Config.ClientPreload, Csv, Config)\r\n    end\r\nend\r\n\r\n--- 初始化包含Init()方法的模块\r\nfunction InitOtherModules()\r\n    for _, m in ipairs(initList) do\r\n        m:Init()\r\n    end\r\nend\r\n\r\n--- 开始Update\r\nfunction StartUpdate()\r\n    print('[Client] StartUpdate()')\r\n    assert(not running, '[Client] StartUpdate() 正在运行')\r\n\r\n    running = true\r\n\r\n    -- 开启心跳\r\n    if FrameworkConfig.HeartbeatStart then\r\n        invoke(ClientHeartbeat.Start)\r\n    end\r\n\r\n    local dt = 0 -- delta time 每帧时间\r\n    local tt = 0 -- total time 游戏总时间\r\n    local now = Timer.GetTimeMillisecond --时间函数缓存\r\n    local prev, curr = now() / 1000, nil -- two timestamps\r\n\r\n    while (running and wait()) do\r\n        curr = now() / 1000\r\n        dt = curr - prev\r\n        tt = tt + dt\r\n        prev = curr\r\n        UpdateClient(dt, tt)\r\n    end\r\nend\r\n\r\n--- Update函数\r\n-- @param dt delta time 每帧时间\r\nfunction UpdateClient(_dt, _tt)\r\n    for _, m in ipairs(updateList) do\r\n        m:Update(_dt, _tt)\r\n    end\r\nend\r\n\r\nreturn Client\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ServerBaseModule","guid":[2864628079,2098938141,2169623745,1280720590],"parentGuid":[756373066,1240223530,2766704094,915472147],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ServerBaseModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 服务器模块基础类, Server Module Base Class\r\n-- @module ServerBase, Server-side\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Yuancheng Zhang\r\nlocal ServerBase = class('ServerBase')\r\n\r\nfunction ServerBase:GetSelf()\r\n    return self\r\nend\r\n\r\n--- 加载的时候运行的代码\r\nfunction ServerBase:InitDefault(_module)\r\n    -- print(string.format('[ServerBase][%s] InitDefault()', self.name))\r\n    -- 初始化默认监听事件\r\n    EventUtil.LinkConnects(world.S_Event, _module, self)\r\nend\r\n\r\nreturn ServerBase\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ClientBaseModule","guid":[1957111763,3183362511,3175239265,4168800515],"parentGuid":[756373066,1240223530,2766704094,915472147],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ClientBaseModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 客户端模块基础类, Client Module Base Class\r\n-- @module ClientBase, Client-side\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Yuancheng Zhang\r\nlocal ClientBase = class('ClientBase')\r\n\r\nfunction ClientBase:GetSelf()\r\n    return self\r\nend\r\n\r\n--- 加载的时候运行的代码\r\nfunction ClientBase:InitDefault(_module)\r\n    -- print(string.format('[ClientBase][%s] InitDefault()', self.name))\r\n    -- 初始化默认监听事件\r\n    EventUtil.LinkConnects(localPlayer.C_Event, _module, self)\r\nend\r\n\r\nreturn ClientBase\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cFolderObject","name":"Plugin","guid":[2555489138,626346364,2851147263,1364204280],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Plugin"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cFolderObject","name":"FUNC_Guide","guid":[684900468,2789166335,2666626870,2188212943],"parentGuid":[2555489138,626346364,2851147263,1364204280],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"FUNC_Guide"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cModuleScriptObject","name":"GuideSystemModule","guid":[2070445638,524698677,3104412276,3887386575],"parentGuid":[684900468,2789166335,2666626870,2188212943],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"GuideSystemModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"---引导系统\r\n---@module GuideSystem\r\n---@copyright Lilith Games, Avatar Team\r\n---@author Sid Zhang, Yuancheng Zhang\r\n\r\nlocal GuideSystem = {}\r\n\r\n--- 引导的枚举类型\r\nGuideSystem.Enum = {\r\n    ClickGuide = 'ClickGuide'\r\n}\r\n\r\n--- 显示强引导Ui\r\n---@param _type Int 1:点击\r\n---@param _position Vector2 生成引导UI在屏幕的位置,Anchors值\r\n---@param _area Vector2 响应范围,Size\r\n---@param _content String 文本介绍,nil则不显示文本\r\nfunction GuideSystem:ShowGuide(_type, _position, _area, _content, _callBack, ...)\r\n    local args = {...}\r\n    if _type == GuideSystem.Enum.ClickGuide then\r\n        local GuideNode = world:CreateInstance('ClickGuide', 'ClickGuide', localPlayer.Local)\r\n        if _position then\r\n            GuideNode.ImgDot.AnchorsX = Vector2(_position.X, _position.X)\r\n            GuideNode.ImgDot.AnchorsY = Vector2(_position.Y, _position.Y)\r\n        end\r\n        if _content then\r\n            GuideNode.ImgDot.FigTextBox.TxtContent.Text = _content\r\n        else\r\n            GuideNode.ImgDot.FigTextBox.Visible = false\r\n        end\r\n        if _area then\r\n            GuideNode.ImgDot.BtnClose.Size = _area\r\n        end\r\n        GuideNode.ImgDot.BtnClose.OnClick:Connect(\r\n            function()\r\n                if _callBack and type(_callBack) == 'function' then\r\n                    _callBack(table.unpack(args))\r\n                end\r\n                GuideNode:Destroy()\r\n            end\r\n        )\r\n    else\r\n        error('param #1 :_type error')\r\n    end\r\nend\r\n\r\nreturn GuideSystem\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cFolderObject","name":"Define","guid":[2737473538,3344386760,2691081356,600893088],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Define"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cModuleScriptObject","name":"GlobalDataModule","guid":[1468398307,3695920924,2815319038,3596233864],"parentGuid":[2737473538,3344386760,2691081356,600893088],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"GlobalDataModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 全局变量的定义,全部定义在GlobalData这张表下面,用于全局可修改的参数\r\n--- @module GlobalData Defines\r\n--- @copyright Lilith Games, Avatar Team\r\nlocal GlobalData = {}\r\n\r\n-- Test only\r\nGlobalData.PlayerData = {}\r\n\r\nreturn GlobalData\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ConstModule","guid":[2512024877,1669350945,3212507937,4057137757],"parentGuid":[2737473538,3344386760,2691081356,600893088],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ConstModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 全局常量的定义,全部定义在Const这张表下面,用于定义全局常量参数或者枚举类型\r\n-- @module Constant Defines\r\n-- @copyright Lilith Games, Avatar Team\r\nlocal Const = {}\r\n\r\n-- e.g. (need DELETE)\r\nConst.MAX_PLAYERS = 4\r\n\r\n--语言枚举\r\nConst.LanguageEnum = {\r\n    CHS = 'CHS', -- 简体中文\r\n    CHT = 'CHT', -- 繁体中文\r\n    EN = 'EN', -- 英文\r\n    JP = 'JP' -- 日文\r\n}\r\n\r\nreturn Const\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"EventsModule","guid":[3985164048,3143978161,3122137539,183444988],"parentGuid":[2737473538,3344386760,2691081356,600893088],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"EventsModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- CustomEvent的定义，用于事件动态生成\r\n-- @module Event Defines\r\n-- @copyright Lilith Games, Avatar Team\r\nlocal Events = {}\r\n\r\n-- 服务器事件列表\r\nEvents.ServerEvents = {}\r\n\r\n-- 客户端事件列表\r\nEvents.ClientEvents = {\r\n    --通知事件\r\n    'NoticeEvent'\r\n}\r\nreturn Events\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ConfigModule","guid":[2110201861,617827622,2622314683,2453149769],"parentGuid":[2737473538,3344386760,2691081356,600893088],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ConfigModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- CSV表格的定义，用于CSV表格载入\r\n-- @module Csv Defines\r\n-- @copyright Lilith Games, Avatar Team\r\nlocal Config = {}\r\n\r\n-- 服务器预加载CSV\r\n-- csv: 对应的CSV表名\r\n-- name: Config里面的lua table名称, 可自定义, 默认和csv相同\r\n-- ids: 表格主键, 支持多主键\r\nConfig.ServerPreload = {}\r\n\r\n-- 客户端预加载CSV\r\n-- csv: 对应的CSV表名\r\n-- name: Config里面的lua table名称, 可自定义, 默认和csv相同\r\n-- ids: 表格主键, 支持多主键\r\nConfig.ClientPreload = {}\r\n\r\nreturn Config\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cFolderObject","name":"Module","guid":[1574945571,3461236255,2335300488,1410656948],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Module"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cFolderObject","name":"S_Module","guid":[760758812,3011002765,2609222735,3236427035],"parentGuid":[1574945571,3461236255,2335300488,1410656948],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"S_Module"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cFolderObject","name":"C_Module","guid":[3651921500,3839968525,2765586875,2228388046],"parentGuid":[1574945571,3461236255,2335300488,1410656948],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"C_Module"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cModuleScriptObject","name":"LanguageUtilModule","guid":[1327910891,3901181274,2716120486,2266956693],"parentGuid":[3651921500,3839968525,2765586875,2228388046],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"LanguageUtilModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 语言包模块：根据游戏内语言设置返回对应的语言文本\r\n--- @module  LanguageUtil, Client-side\r\n--- @copyright Lilith Games, Avatar Team\r\n--- @author Xiexy, Yuancheng Zhang\r\nlocal LanguageUtil, this = ModuleUtil.New('LanguageUtil', ClientBase)\r\nlocal lang = Config.GlobalSetting.DefaultLanguage\r\nlocal defaultLang = Const.LanguageEnum.CHS\r\n\r\n--- 设置当前语言\r\nfunction LanguageUtil.SetLanguage(_lang)\r\n    assert(Const.LanguageEnum[_lang], string.format('[LanguageUtil] %s 语言码不存在，请检查ConstModule', _lang))\r\n    print(string.format('[LanguageUtil] 更改当前语言：%s => %s', lang, _lang))\r\n    lang = _lang\r\nend\r\n\r\n--- 根据ID返回当前游戏语言对应的文本信息，如果对应语言为空，默认返回'*'+中文内容\r\n-- @param @number _id LanguagePack.xls中的编号\r\nfunction LanguageUtil.GetText(_id)\r\n    assert(not string.isnilorempty(_id), '[LanguageUtil] 翻译ID为空，请检查策划表和LanguagePack')\r\n    assert(\r\n        Config.LanguagePack[_id],\r\n        string.format('[LanguageUtil] LanguagePack[%s] 不存在对应翻译ID，请检查策划表和LanguagePack', _id)\r\n    )\r\n    local text = Config.LanguagePack[_id][lang]\r\n    if string.isnilorempty(text) then\r\n        print(string.format('[LanguageUtil] LanguagePack[%s][%s] 不存在对应语言翻译内容，默认使用中文', _id, lang))\r\n        text = '*' .. Config.LanguagePack[_id][defaultLang]\r\n    end\r\n    return text\r\nend\r\n\r\nreturn LanguageUtil\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"PlayerGuiDefaultModule","guid":[664667402,21253351,2924081121,1278400519],"parentGuid":[3651921500,3839968525,2765586875,2228388046],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerGuiDefaultModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 玩家默认UI\r\n--- @module Player Default GUI\r\n--- @copyright Lilith Games, Avatar Team\r\nlocal PlayerGuiDefault, this = ModuleUtil.New('PlayerGuiDefault', ClientBase)\r\n\r\n-- 获取本地玩家\r\nlocal player\r\n\r\n-- 姓名板\r\nlocal nameGUI\r\n\r\n-- 血条\r\nlocal healthGUI, background, healthBar\r\nlocal RED_BAR = ResourceManager.GetTexture('Internal/Blood_Red')\r\nlocal GREEN_BAR = ResourceManager.GetTexture('Internal/Blood_Green')\r\nlocal ORANGE_BAR = ResourceManager.GetTexture('Internal/Blood_Orange')\r\nlocal HIT_LAST_TIME = 2\r\nlocal healthBarShowTime = 0\r\n\r\nfunction PlayerGuiDefault:Init()\r\n    -- 获取本地玩家\r\n    player = localPlayer\r\n    self:InitNameGui()\r\n    self:InitHealthBarGui()\r\n    self:InitListener()\r\nend\r\n\r\n-- 姓名板\r\nfunction PlayerGuiDefault:InitNameGui()\r\n    nameGUI = player.NameGui\r\n    nameGUI.NameBarTxt1.Text = player.Name\r\n    nameGUI.NameBarTxt2.Text = player.Name\r\nend\r\n\r\n-- 血条\r\nfunction PlayerGuiDefault:InitHealthBarGui()\r\n    healthGUI = player.HealthGui\r\n    background = healthGUI.BackgroundImg\r\n    healthBar = background.HealthBarImg\r\nend\r\n\r\n-- 初始化事件\r\nfunction PlayerGuiDefault:InitListener()\r\n    player.OnHealthChange:Connect(HealthChange)\r\n    world.OnRenderStepped:Connect(MainGUI)\r\nend\r\n\r\n-- 姓名板的显示逻辑\r\nfunction NameBarLogic()\r\n    nameGUI.Visible = player.DisplayName\r\n    if player.DisplayName then\r\n        local addedHeight = (healthGUI and healthGUI.ActiveSelf) and 1.1 or 1\r\n        nameGUI.LocalPosition = Vector3(0, addedHeight + player.Avatar.Height, 0)\r\n    end\r\nend\r\n\r\n-- 血条随生命值颜色改变而改变\r\nfunction HealthChange(_oldHealth, _newHealth)\r\n    if _oldHealth > _newHealth then\r\n        healthBarShowTime = 2\r\n    end\r\n    local percent = player.Health / player.MaxHealth\r\n    if percent >= 0.7 then\r\n        healthBar.Texture = GREEN_BAR\r\n    elseif percent >= 0.3 then\r\n        healthBar.Texture = ORANGE_BAR\r\n    else\r\n        healthBar.Texture = RED_BAR\r\n    end\r\n    healthBar.AnchorsX = Vector2(0.05, 0.9 * percent + 0.05)\r\nend\r\n\r\n-- 血条在各显示模式下的显示逻辑\r\nfunction HealthBarLogic(_delta)\r\n    healthBarShowTime = healthBarShowTime - _delta\r\n    if player.HealthDisplayMode == Enum.HealthDisplayMode.Always then\r\n        healthGUI.Visible = true\r\n    elseif player.HealthDisplayMode == Enum.HealthDisplayMode.Never then\r\n        healthGUI.Visible = false\r\n    elseif player.HealthDisplayMode == Enum.HealthDisplayMode.OnHit then\r\n        healthGUI.Visible = player.Health ~= player.MaxHealth\r\n    else\r\n        healthGUI.Visible = healthBarShowTime > 0\r\n    end\r\nend\r\n\r\n-- 每个渲染帧更新姓名板和血条的显示逻辑\r\nfunction MainGUI(_delta)\r\n    NameBarLogic()\r\n    HealthBarLogic(_delta)\r\nend\r\n\r\nreturn PlayerGuiDefault\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"PlayerControlModule","guid":[1899466661,1113342787,2889724115,878688312],"parentGuid":[3651921500,3839968525,2765586875,2228388046],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerControlModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 玩家控制模块\r\n--- @module Player Controll, client-side\r\n--- @copyright Lilith Games, Avatar Team\r\nlocal PlayerControl, this = ModuleUtil.New('PlayerControl', ClientBase)\r\nlocal player\r\n--声明变量\r\nlocal isDead = false\r\nlocal forwardDir = Vector3.Forward\r\nlocal rightDir = Vector3.Right\r\nlocal finalDir = Vector3.Zero\r\nlocal horizontal = 0\r\nlocal vertical = 0\r\n\r\n-- 相机\r\nlocal camera, mode\r\n\r\n-- 手机端交互UI\r\nlocal gui, joystick, touchScreen, jumpButton\r\n\r\n-- PC端交互按键\r\nlocal FORWARD_KEY = Enum.KeyCode.W\r\nlocal BACK_KEY = Enum.KeyCode.S\r\nlocal LEFT_KEY = Enum.KeyCode.A\r\nlocal RIGHT_KEY = Enum.KeyCode.D\r\nlocal JUMP_KEY = Enum.KeyCode.Space\r\n\r\n-- 键盘的输入值\r\nlocal moveForwardAxis = 0\r\nlocal moveBackAxis = 0\r\nlocal moveLeftAxis = 0\r\nlocal moveRightAxis = 0\r\n\r\nfunction PlayerControl:Init()\r\n    -- 获取本地玩家\r\n    player = localPlayer\r\n    self:InitGui()\r\n    self:InitCamera()\r\n    self:InitListener()\r\nend\r\n\r\nfunction PlayerControl:InitListener()\r\n    -- Main\r\n    world.OnRenderStepped:Connect(MainControl)\r\n    -- Player\r\n    player.OnHealthChange:Connect(HealthCheck)\r\n    player.OnDead:Connect(PlayerDie)\r\n    -- GUI\r\n    touchScreen.OnTouched:Connect(CountTouch)\r\n    touchScreen.OnPanStay:Connect(CameraMove)\r\n    touchScreen.OnPinchStay:Connect(CameraZoom)\r\n    jumpButton.OnDown:Connect(PlayerJump)\r\n    -- Keyboard\r\n    Input.OnKeyDown:Connect(\r\n        function()\r\n            if Input.GetPressKeyData(JUMP_KEY) == 1 then\r\n                PlayerJump()\r\n            end\r\n        end\r\n    )\r\nend\r\n\r\nfunction PlayerControl:InitGui()\r\n    gui = localPlayer.Local.ControlGui\r\n    joystick = gui.Joystick\r\n    touchScreen = gui.TouchFig\r\n    jumpButton = gui.JumpBtn\r\nend\r\n\r\nfunction PlayerControl:InitCamera()\r\n    if not world.CurrentCamera and localPlayer.Local.Independent.GameCam then\r\n        world.CurrentCamera = localPlayer.Local.Independent.GameCam\r\n    end\r\n    camera = world.CurrentCamera\r\n    mode = Camera.CameraMode\r\n    camera.LookAt = player\r\nend\r\n\r\n-- 移动方向是否遵循摄像机方向\r\nfunction IsFreeMode()\r\n    return (mode == Enum.CameraMode.Social and camera.Distance >= 0) or mode == Enum.CameraMode.Orbital or\r\n        mode == Enum.CameraMode.Custom\r\nend\r\n\r\n--获取按键盘时的移动方向最终取值\r\nfunction GetKeyValue()\r\n    moveForwardAxis = Input.GetPressKeyData(FORWARD_KEY) > 0 and 1 or 0\r\n    moveBackAxis = Input.GetPressKeyData(BACK_KEY) > 0 and -1 or 0\r\n    moveLeftAxis = Input.GetPressKeyData(LEFT_KEY) > 0 and 1 or 0\r\n    moveRightAxis = Input.GetPressKeyData(RIGHT_KEY) > 0 and -1 or 0\r\n    if player.State == Enum.CharacterState.Died then\r\n        moveForwardAxis, moveBackAxis, moveLeftAxis, moveRightAxis = 0, 0, 0, 0\r\n    end\r\nend\r\n\r\n-- 获取移动方向\r\nfunction GetMoveDir()\r\n    forwardDir = IsFreeMode() and camera.Forward or player.Forward\r\n    forwardDir.y = 0\r\n    rightDir = Vector3(0, 1, 0):Cross(forwardDir)\r\n    horizontal = joystick.Horizontal\r\n    vertical = joystick.Vertical\r\n    if horizontal ~= 0 or vertical ~= 0 then\r\n        finalDir = rightDir * horizontal + forwardDir * vertical\r\n    else\r\n        GetKeyValue()\r\n        finalDir = forwardDir * (moveForwardAxis + moveBackAxis) - rightDir * (moveLeftAxis + moveRightAxis)\r\n    end\r\nend\r\n\r\n-- 移动逻辑\r\nfunction PlayerMove(_dir)\r\n    _dir.y = 0\r\n    if player.State == Enum.CharacterState.Died then\r\n        _dir = Vector3.Zero\r\n    end\r\n    if _dir.Magnitude > 0 then\r\n        if IsFreeMode then\r\n            player:FaceToDir(_dir, 4 * math.pi)\r\n        end\r\n        player:MoveTowards(Vector2(_dir.x, _dir.z).Normalized)\r\n    else\r\n        player:MoveTowards(Vector2.Zero)\r\n    end\r\nend\r\n\r\n-- 跳跃逻辑\r\nfunction PlayerJump()\r\n    if (player.IsOnGround or player.State == Enum.CharacterState.Seated) and not isDead then\r\n        player:Jump()\r\n        return\r\n    end\r\nend\r\n\r\n-- 死亡逻辑\r\nfunction PlayerDie()\r\n    isDead = true\r\n    wait(player.RespawnTime)\r\n    player:Reset()\r\n    isDead = false\r\nend\r\n\r\n-- 生命值检测\r\nfunction HealthCheck(oldHealth, newHealth)\r\n    if newHealth <= 0 then\r\n        player:Die()\r\n    end\r\nend\r\n\r\n-- 每个渲染帧处理操控逻辑\r\nfunction MainControl()\r\n    camera = world.CurrentCamera\r\n    mode = camera.CameraMode\r\n    GetMoveDir()\r\n    PlayerMove(finalDir)\r\nend\r\n\r\n-- 检测触屏的手指数\r\nlocal touchNumber = 0\r\nfunction CountTouch(container)\r\n    touchNumber = #container\r\nend\r\n\r\n-- 滑屏转向\r\nfunction CameraMove(_pos, _dis, _deltapos, _speed)\r\n    if touchNumber == 1 then\r\n        if IsFreeMode() then\r\n            camera:CameraMove(_deltapos)\r\n        else\r\n            player:RotateAround(player.Position, Vector3.Up, _deltapos.x)\r\n            camera:CameraMove(Vector2(0, _deltapos.y))\r\n        end\r\n    end\r\nend\r\n\r\n-- 双指缩放摄像机距离\r\nfunction CameraZoom(_pos1, _pos2, _dis, _speed)\r\n    if mode == Enum.CameraMode.Social then\r\n        camera.Distance = camera.Distance - _dis / 50\r\n    end\r\nend\r\n\r\nreturn PlayerControl\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cFolderObject","name":"Cls_Module","guid":[522079265,1772703138,3001358313,3723987968],"parentGuid":[1574945571,3461236255,2335300488,1410656948],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Cls_Module"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cFolderObject","name":"Editor_Module","guid":[1822279021,412438229,2868384553,280931416],"parentGuid":[1574945571,3461236255,2335300488,1410656948],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Editor_Module"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cFolderObject","name":"Xls","guid":[3561931272,2228374286,3075622864,2620868908],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Xls"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cModuleScriptObject","name":"Example1XlsModule","guid":[1154807438,2590788022,3089941547,2078280727],"parentGuid":[3561931272,2228374286,3075622864,2620868908],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Example1XlsModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- This file is generated by ava-x2l.exe,\r\n--- Don't change it manaully.\r\n--- @copyright Lilith Games, Project Da Vinci(Avatar Team)\r\n--- @see https://www.projectdavinci.com/\r\n--- @see https://github.com/endaye/avatar-ava-xls2lua\r\n--- source file: ./xls/ExampleTable1.xlsx\r\n\r\nlocal Example1Xls = {\r\n    [1] = {\r\n        house = {\r\n            id = 1,\r\n            name = 'house',\r\n            use_money = 1000,\r\n            use_food = 2.33,\r\n            is_init = true,\r\n            defense = 100,\r\n            args_int_arr = {1, 2, 3},\r\n            args_float_arr = {1.23, 2, 3.23},\r\n            args_string_arr = {'sdf', '23e', 's'},\r\n            args_bool_arr = {true, false, true},\r\n            args_vect2 = Vector2(-1, 0.5),\r\n            args_vect3 = Vector3(2, 0.3, -4),\r\n            args_euler = EulerDegree(12, 23, 43),\r\n            args_color = Color(129, 12, 3, 0),\r\n            args_lua = function() print(23) end,\r\n            Des1 = 'Example1_Des1_1_house',\r\n            Des2 = 'Example1_Des2_1_house'\r\n        },\r\n        MMM = {\r\n            id = 1,\r\n            name = 'MMM',\r\n            use_money = 123,\r\n            use_food = 336.2,\r\n            is_init = true,\r\n            defense = 0,\r\n            args_int_arr = {1, 2, 3},\r\n            args_float_arr = {1, 2.3445, 3},\r\n            args_string_arr = {'你好', '你在哪'},\r\n            args_bool_arr = {true, false},\r\n            args_vect2 = Vector2(0, 4),\r\n            args_vect3 = Vector3(-2, 3, 5),\r\n            args_euler = EulerDegree(0, 0, 0),\r\n            args_color = Color(0, 0, 0, 0),\r\n            args_lua = {a = 2, b='234'},\r\n            Des1 = 'Example1_Des1_1_MMM',\r\n            Des2 = 'Example1_Des2_1_MMM'\r\n        },\r\n        ddd = {\r\n            id = 1,\r\n            name = 'ddd',\r\n            use_money = 456,\r\n            use_food = 222.33665,\r\n            is_init = false,\r\n            defense = 130,\r\n            args_int_arr = {3, 2, 5},\r\n            args_float_arr = {3, 2, 2.5},\r\n            args_string_arr = {'我在这里啊', '你在那', '呢'},\r\n            args_bool_arr = {false, true},\r\n            args_vect2 = Vector2(2, 0.5),\r\n            args_vect3 = Vector3(0.6, 3, -8.4),\r\n            args_euler = EulerDegree(0, 0, 0),\r\n            args_color = Color(0, 0, 0, 0),\r\n            args_lua = nil,\r\n            Des1 = 'Example1_Des1_1_ddd',\r\n            Des2 = 'Example1_Des2_1_ddd'\r\n        }\r\n    },\r\n    [2] = {\r\n        farm = {\r\n            id = 2,\r\n            name = 'farm',\r\n            use_money = 100,\r\n            use_food = 220.0,\r\n            is_init = false,\r\n            defense = 200,\r\n            args_int_arr = {2, 3},\r\n            args_float_arr = {200.3, 3, 234.23},\r\n            args_string_arr = {'df', 'ssd', 'dd', 'dd'},\r\n            args_bool_arr = {},\r\n            args_vect2 = Vector2.Zero,\r\n            args_vect3 = Vector3.Zero,\r\n            args_euler = EulerDegree(0, 0, 0),\r\n            args_color = Color(0, 0, 0, 0),\r\n            args_lua = nil,\r\n            Des1 = 'Example1_Des1_2_farm',\r\n            Des2 = 'Example1_Des2_2_farm'\r\n        },\r\n        MMM = {\r\n            id = 2,\r\n            name = 'MMM',\r\n            use_money = 0,\r\n            use_food = 22.1,\r\n            is_init = false,\r\n            defense = 234,\r\n            args_int_arr = {3, 6, 6, 7},\r\n            args_float_arr = {3, 6.3, 6, 7},\r\n            args_string_arr = {'ss', 'd', 'd', 'd'},\r\n            args_bool_arr = {true, true},\r\n            args_vect2 = Vector2.Zero,\r\n            args_vect3 = Vector3.Zero,\r\n            args_euler = EulerDegree(0, 0, 0),\r\n            args_color = Color(0, 0, 0, 0),\r\n            args_lua = \"还没有添加检查\",\r\n            Des1 = 'Example1_Des1_2_MMM',\r\n            Des2 = 'Example1_Des2_2_MMM'\r\n        }\r\n    }\r\n}\r\n\r\nreturn Example1Xls\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"Example2XlsModule","guid":[3966878609,3696577721,2175744138,2596481351],"parentGuid":[3561931272,2228374286,3075622864,2620868908],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Example2XlsModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- This file is generated by ava-x2l.exe,\r\n--- Don't change it manaully.\r\n--- @copyright Lilith Games, Project Da Vinci(Avatar Team)\r\n--- @see https://www.projectdavinci.com/\r\n--- @see https://github.com/endaye/avatar-ava-xls2lua\r\n--- source file: ./xls/ExampleTable1.xlsx\r\n\r\nlocal Example2Xls = {\r\n    [1] = {\r\n        id = 1,\r\n        name = 'house',\r\n        use_money = 1000,\r\n        use_food = 2.33,\r\n        is_init = true,\r\n        defense = 100,\r\n        args1 = {1, 2, 3},\r\n        args2 = {1.23, 2, 3.23},\r\n        args3 = {'sdf', '23e', 's'},\r\n        args4 = {true, false, true}\r\n    },\r\n    [2] = {\r\n        id = 2,\r\n        name = '你好吗？',\r\n        use_money = 123,\r\n        use_food = 336.2,\r\n        is_init = true,\r\n        defense = 0,\r\n        args1 = {1, 2, 3},\r\n        args2 = {1, 2.3445, 3},\r\n        args3 = {'你好', '你在哪'},\r\n        args4 = {true, false}\r\n    },\r\n    [3] = {\r\n        id = 3,\r\n        name = '',\r\n        use_money = 456,\r\n        use_food = 222.33665,\r\n        is_init = false,\r\n        defense = 130,\r\n        args1 = {3, 2, 5},\r\n        args2 = {3, 2, 2.5},\r\n        args3 = {'我在这里啊', '你在那', '呢'},\r\n        args4 = {false, true}\r\n    },\r\n    [4] = {\r\n        id = 4,\r\n        name = 'farm',\r\n        use_money = 100,\r\n        use_food = 220.0,\r\n        is_init = false,\r\n        defense = 200,\r\n        args1 = {2, 3},\r\n        args2 = {200.3, 3, 234.23},\r\n        args3 = {'df', 'ssd', 'dd', 'dd'},\r\n        args4 = {}\r\n    },\r\n    [5] = {\r\n        id = 5,\r\n        name = 'house5',\r\n        use_money = 0,\r\n        use_food = 22.1,\r\n        is_init = false,\r\n        defense = 234,\r\n        args1 = {3, 6, 6, 7},\r\n        args2 = {3, 6.3, 6, 7},\r\n        args3 = {'ss', 'd', 'd', 'd'},\r\n        args4 = {true, true}\r\n    },\r\n    [6] = {\r\n        id = 6,\r\n        name = 'horse3',\r\n        use_money = 200,\r\n        use_food = 0,\r\n        is_init = false,\r\n        defense = 333,\r\n        args1 = {},\r\n        args2 = {},\r\n        args3 = {'2e', 'w', 'e', 'we'},\r\n        args4 = {false, false, false, false}\r\n    }\r\n}\r\n\r\nreturn Example2Xls\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"GlobalSettingXlsModule","guid":[915862330,741691007,3064296356,1451895238],"parentGuid":[3561931272,2228374286,3075622864,2620868908],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"GlobalSettingXlsModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- This file is generated by ava-x2l.exe,\r\n--- Don't change it manaully.\r\n--- @copyright Lilith Games, Project Da Vinci(Avatar Team)\r\n--- @see https://www.projectdavinci.com/\r\n--- @see https://github.com/endaye/avatar-ava-xls2lua\r\n--- source file: ./xls/GlobalSetting.xls\r\n\r\nlocal GlobalSettingXls = {\r\n    DefaultLanguage = {\r\n        Key = 'DefaultLanguage',\r\n        Value = \"CHS\"\r\n    },\r\n    PlayerPosition = {\r\n        Key = 'PlayerPosition',\r\n        Value = Vector3(0,-1,0)\r\n    },\r\n    PlayerRotation = {\r\n        Key = 'PlayerRotation',\r\n        Value = Euler(90,0,0)\r\n    },\r\n    MaxPlayerNumber = {\r\n        Key = 'MaxPlayerNumber',\r\n        Value = 100.0\r\n    },\r\n    ScoreRate = {\r\n        Key = 'ScoreRate',\r\n        Value = 12.5\r\n    }\r\n}\r\n\r\nreturn GlobalSettingXls\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"LanguagePackXlsModule","guid":[700825784,2334608193,2463848717,1647971739],"parentGuid":[3561931272,2228374286,3075622864,2620868908],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"LanguagePackXlsModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- This file is generated by ava-x2l.exe,\r\n--- Don't change it manaully.\r\n--- @copyright Lilith Games, Project Da Vinci(Avatar Team)\r\n--- @see https://www.projectdavinci.com/\r\n--- @see https://github.com/endaye/avatar-ava-xls2lua\r\n--- source file: ./xls/LanguagePack.xls\r\n\r\nlocal LanguagePackXls = {\r\n    Example1_Des1_1_house = {\r\n        ID = 'Example1_Des1_1_house',\r\n        CHS = '我真的很想%s吃饭',\r\n        CHT = '',\r\n        EN = '',\r\n        JP = ''\r\n    },\r\n    Example1_Des2_1_house = {\r\n        ID = 'Example1_Des2_1_house',\r\n        CHS = '做什么',\r\n        CHT = '',\r\n        EN = '',\r\n        JP = ''\r\n    },\r\n    Example1_Des1_1_MMM = {\r\n        ID = 'Example1_Des1_1_MMM',\r\n        CHS = '我饿了',\r\n        CHT = '',\r\n        EN = '',\r\n        JP = ''\r\n    },\r\n    Example1_Des2_1_MMM = {\r\n        ID = 'Example1_Des2_1_MMM',\r\n        CHS = '工作是什么',\r\n        CHT = '',\r\n        EN = '',\r\n        JP = ''\r\n    },\r\n    Example1_Des1_1_ddd = {\r\n        ID = 'Example1_Des1_1_ddd',\r\n        CHS = '到底什么时候能吃饭',\r\n        CHT = '',\r\n        EN = '',\r\n        JP = ''\r\n    },\r\n    Example1_Des2_1_ddd = {\r\n        ID = 'Example1_Des2_1_ddd',\r\n        CHS = '我是谁',\r\n        CHT = '',\r\n        EN = '',\r\n        JP = ''\r\n    },\r\n    Example1_Des1_2_farm = {\r\n        ID = 'Example1_Des1_2_farm',\r\n        CHS = '今天晚上吃什么',\r\n        CHT = '',\r\n        EN = '',\r\n        JP = ''\r\n    },\r\n    Example1_Des2_2_farm = {\r\n        ID = 'Example1_Des2_2_farm',\r\n        CHS = '我从哪里来',\r\n        CHT = '',\r\n        EN = '',\r\n        JP = ''\r\n    },\r\n    Example1_Des1_2_MMM = {\r\n        ID = 'Example1_Des1_2_MMM',\r\n        CHS = '下班就去吃饭吧',\r\n        CHT = '',\r\n        EN = '',\r\n        JP = ''\r\n    },\r\n    Example1_Des2_2_MMM = {\r\n        ID = 'Example1_Des2_2_MMM',\r\n        CHS = '就这样吧',\r\n        CHT = '',\r\n        EN = '',\r\n        JP = ''\r\n    }\r\n}\r\n\r\nreturn LanguagePackXls\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"SoundXlsModule","guid":[3708642180,138366140,2150857251,245324002],"parentGuid":[3561931272,2228374286,3075622864,2620868908],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"SoundXlsModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- This file is generated by ava-x2l.exe,\r\n--- Don't change it manaully.\r\n--- @copyright Lilith Games, Project Da Vinci(Avatar Team)\r\n--- @see https://www.projectdavinci.com/\r\n--- @see https://github.com/endaye/avatar-ava-xls2lua\r\n--- source file: ./xls/Sound.xls\r\n\r\nlocal SoundXls = {\r\n    test_01 = {\r\n        Type = 1,\r\n        ID = 'test_01',\r\n        IsLoop = false,\r\n        Volume = 0,\r\n        FileName = '',\r\n        Detail = '',\r\n        Duration = 0,\r\n        CoverPlay = false\r\n    }\r\n}\r\n\r\nreturn SoundXls\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cFolderObject","name":"Csv","guid":[294313154,1450328249,2442680246,272497625],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Csv"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cFolderObject","name":"S_Code","guid":[630163054,4187112824,2753371896,1919329423],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"S_Code"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cScriptObject","name":"ServerMainScript","guid":[344478647,1240680084,3003146376,138016020],"parentGuid":[630163054,4187112824,2753371896,1919329423],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ServerMainScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 服务器代码入口\r\n-- @script Server Main Function\r\n-- @copyright Lilith Games, Avatar Team\r\n-- @author Yuancheng Zhang\r\nServer:Run()\r\n"}}]},{"class":"cFolderObject","name":"SpawnLocations","guid":[3060414528,2729002180,2754306229,2661207025],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"SpawnLocations"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cStartPortal","name":"StartPortal00","guid":[2311234828,1873955616,2655392405,2525362369],"parentGuid":[3060414528,2729002180,2754306229,2661207025],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[10.0,1.5,-10.0],"m_localRotation":[0.0,-0.3826,-0.0,0.9236]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"StartPortal00"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sStartPortalComponent","data":{}}]},{"class":"cStartPortal","name":"StartPortal01","guid":[2880873389,3573762209,2456263445,1546252123],"parentGuid":[3060414528,2729002180,2754306229,2661207025],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[10.0,1.5,10.0],"m_localRotation":[0.0,0.9236,0.0,-0.3826]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"StartPortal01"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sStartPortalComponent","data":{}}]},{"class":"cStartPortal","name":"StartPortal02","guid":[3258803195,2884980247,2417960272,149547500],"parentGuid":[3060414528,2729002180,2754306229,2661207025],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-10.0,1.5,-10.0],"m_localRotation":[0.0,0.3826,0.0,0.9236]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"StartPortal02"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sStartPortalComponent","data":{}}]},{"class":"cStartPortal","name":"StartPortal03","guid":[4114460255,208751620,2876153555,2633735762],"parentGuid":[3060414528,2729002180,2754306229,2661207025],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-10.0,1.5,10.0],"m_localRotation":[0.0,0.9236,0.0,0.3826]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"StartPortal03"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sStartPortalComponent","data":{}}]},{"class":"cAudioSource","name":"BGM","guid":[1596674502,2319271992,2900844459,2801180766],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BGM"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sAudioSourceComponent","data":{"m_playonawake":true,"m_loop":true}}]},{"class":"cSkydome","name":"Sky","guid":[3956874685,1991789763,3220541584,1456680764],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Sky"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sSkydomeComponent","data":{"m_latitude":-0.0,"m_shadowDistance":100.0}},{"id":11,"class":"sDateTimeComponent","data":{"m_clocktime":15.8}},{"id":12,"class":"sFogComponent","data":{"m_fogStart":60.0,"m_fogEnd":280.0,"m_fogColor":[0.0006,0.5378,0.4871,1.0]}}]},{"class":"cFolderObject","name":"Players","guid":[3397398191,850542637,3138524115,1333674022],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Players"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[718760084,1257915969,2962466066,2150526306],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[438081159,4019275113,2394302102,997050187],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[154289415,229392516,2254790969,287930189],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[1151332762,2713075851,2532352188,4124889855],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[784260868,2609333952,2774312238,2440002730],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[36220398,4069804567,3087648968,1513344952],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[301805571,3183757047,2970218906,1035586513],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[329052330,2108966125,2246354006,3727422990],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cTerrainObject","name":"Terrain","guid":[980033814,3447341367,2913170761,3546742988],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-62.3987,-10.7201,-283.398],"m_localRotation":[-0.0,0.0926,-0.0,0.9955]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Terrain"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":610,"class":"sTerrainComponent","data":{"m_memStreamBuffer":{"m_guid":[4256450858,2503622707,2701896730,3388076770],"m_revision":-1,"m_type":"kByteStream","m_autoGenerated":true},"m_memStreamBuffer2":{"m_guid":[1237361744,2766752550,2609897848,3988635486],"m_revision":-1,"m_type":"kByteStream","m_autoGenerated":true},"m_memWaterStreamBuffer":[{"m_guid":[2896065380,3843705948,2645856480,1113501019],"m_revision":-1,"m_type":"kByteStream","m_autoGenerated":true},{"m_guid":[1940847020,2248952508,2340679954,660790013],"m_revision":-1,"m_type":"kByteStream","m_autoGenerated":true}],"m_emptyPlaceholder":true,"m_terrainIndex":[0,1,2,3,4,5,6,7],"m_textures":[{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false}]}},{"id":13,"class":"sRenderComponent","data":{}},{"id":15,"class":"sRigidBodyComponent","data":{"m_frictionRate":0.4499,"m_rough":0.4,"m_restitution":0.3,"m_responseContact":false,"m_statusFlag":10}}]},{"class":"cStaticSpaceFolderObject","name":"StaticSpace","guid":[2324326883,3665710638,3070246021,2579386889],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"StaticSpace"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cFolderObject","name":"MiniGames","guid":[396515827,708922282,2306289634,3109041923],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"MiniGames"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cFolderObject","name":"Game_01_Hunt","guid":[2667965429,2403419976,2743456291,2998620951],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_01_Hunt"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_01_Hunt","guid":[2469667971,3052095412,2449968994,2749907796],"parentGuid":[2667965429,2403419976,2743456291,2998620951],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,0.8,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_01_Hunt"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles","m_color":[1.0,1.0,0.498,1.0]}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"Game_02_WhackAMole","guid":[3198449401,1673938808,2597611757,2930126696],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_02_WhackAMole"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_02_WhackAMole","guid":[3082382232,1769620559,3011288236,2122890785],"parentGuid":[3198449401,1673938808,2597611757,2930126696],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[50.0,0.8,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_02_WhackAMole"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles"}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"Game_03_Maze","guid":[3851526498,3707258573,2899238947,1773448565],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_03_Maze"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_03_Maze","guid":[3907201476,246303561,2322220695,1877762446],"parentGuid":[3851526498,3707258573,2899238947,1773448565],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[100.0,0.8,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_03_Maze"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles","m_color":[1.0,1.0,0.498,1.0]}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"Game_04_Cannon","guid":[2513975504,1942569189,2500175883,1031199731],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_04_Cannon"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_04_Cannon","guid":[322163096,3438231732,2929137633,707108746],"parentGuid":[2513975504,1942569189,2500175883,1031199731],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[150.0,0.8,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_04_Cannon"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles"}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"Game_05_Frog","guid":[1042911082,1498367273,2799529261,2538951798],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_05_Frog"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_05_Frog","guid":[3998212685,1680294560,2638195454,85776884],"parentGuid":[1042911082,1498367273,2799529261,2538951798],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,0.8,50.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_05_Frog"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles"}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"Game_06_Zeppelin","guid":[3044858164,4203956316,2157425506,2675753844],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_06_Zeppelin"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_06_Zeppelin","guid":[2435468848,2367701808,2203545630,403892723],"parentGuid":[3044858164,4203956316,2157425506,2675753844],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[50.0,0.8,50.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_06_Zeppelin"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles","m_color":[1.0,1.0,0.498,1.0]}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"Game_07_Flower","guid":[3726188777,4005514020,2993197397,2378683986],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_07_Flower"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_07_Flower","guid":[739418978,2680179873,2872596382,3938338143],"parentGuid":[3726188777,4005514020,2993197397,2378683986],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[100.0,0.8,50.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_07_Flower"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles"}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"Game_08_Snail","guid":[3548721304,2487370205,2637999918,2270470109],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_08_Snail"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_08_Snail","guid":[2736089631,3125037388,2345441387,18159098],"parentGuid":[3548721304,2487370205,2637999918,2270470109],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[150.0,0.8,50.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_08_Snail"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles","m_color":[1.0,1.0,0.498,1.0]}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"Game_09_Race","guid":[4279357843,909721658,2853254141,2395222756],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_09_Race"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_09_Race","guid":[3972508465,1974288998,2439495245,2632466339],"parentGuid":[4279357843,909721658,2853254141,2395222756],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,0.8,100.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_09_Race"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles","m_color":[1.0,1.0,0.498,1.0]}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"Game_10_Chair","guid":[2951313505,3613541167,3039630149,1835564294],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_10_Chair"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_10_Chair","guid":[1276226525,4156836961,2328934734,490897331],"parentGuid":[2951313505,3613541167,3039630149,1835564294],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[50.0,0.8,100.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_10_Chair"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles"}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"Game_11_MonsterArena","guid":[2385560136,2422555983,3211566810,1962649665],"parentGuid":[396515827,708922282,2306289634,3109041923],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Game_11_MonsterArena"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPrimitiveObject","name":"BaseFloor_11_MonsterArena","guid":[4258616065,2564309721,2534698110,610198852],"parentGuid":[2385560136,2422555983,3211566810,1962649665],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[100.0,0.8,100.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor_11_MonsterArena"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles","m_color":[1.0,1.0,0.498,1.0]}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]}]}]}